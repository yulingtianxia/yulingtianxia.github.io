<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yulingtianxia&#39;s blog</title>
  <subtitle>玉令天下的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yulingtianxia.com/"/>
  <updated>2019-05-26T09:52:03.121Z</updated>
  <id>http://yulingtianxia.com/</id>
  
  <author>
    <name>杨萧玉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BlockHook with Revocation</title>
    <link href="http://yulingtianxia.com/blog/2019/05/26/BlockHook-with-Revocation/"/>
    <id>http://yulingtianxia.com/blog/2019/05/26/BlockHook-with-Revocation/</id>
    <published>2019-05-26T09:20:10.000Z</published>
    <updated>2019-05-26T09:52:03.121Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockHook&lt;/a&gt; 开创性地解决了 Objective-C 语言界 Hook Block 的问题，但也迎来了新的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何知道某个 Block 对象被谁 Hook 过？&lt;/li&gt;
&lt;li&gt;多次 Hook 的先后顺序？&lt;/li&gt;
&lt;li&gt;如何处理好多次 Hook 同一个 Block 后对任意一次 Hook 的撤销？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些问题也是开发者在使用时向我反馈过的问题，在这篇文章里，这些问题都将会解决。&lt;/p&gt;
&lt;p&gt;关于 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockHook&lt;/a&gt; 的原理，可以先阅读之前的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2018/02/28/Hook-Objective-C-Block-with-Libffi/&quot;&gt;Hook Objective-C Block with Libffi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2019/04/27/BlockHook-with-Struct/&quot;&gt;BlockHook with Struct&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;按顺序构造『虚拟的』-Hook-链表&quot;&gt;&lt;a href=&quot;#按顺序构造『虚拟的』-Hook-链表&quot; class=&quot;headerlink&quot; title=&quot;按顺序构造『虚拟的』 Hook 链表&quot;&gt;&lt;/a&gt;按顺序构造『虚拟的』 Hook 链表&lt;/h2&gt;&lt;p&gt;首先要有一个链表来按先后顺序记录一个 Block 对象上所有的 Hook。这个链表的格式以及持有关系也需要考虑在内。&lt;/p&gt;
&lt;p&gt;为此我构造了一个虚拟的链表来记录 Hook 的先后关系，而不是单独创建一个链表显式的记录。首先介绍下 Block 与 token 之间的引用关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yulingtianxia/Blog-Hexo-Source/master/source/resources/BlockHook/BlockHook Token List.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看出每个 &lt;code&gt;BHToken&lt;/code&gt; 记录了原始和替换后的 &lt;code&gt;invoke&lt;/code&gt; 函数指针，那么先后两次 Hook 就靠 &lt;code&gt;invoke&lt;/code&gt; 函数指针来关联了：&lt;strong&gt;每个 tokne 的 &lt;code&gt;originalInvoke&lt;/code&gt; 就是上一次 Hook 的 token 的 &lt;code&gt;replacementInvoke&lt;/code&gt;&lt;/strong&gt;。而拿到 token 又是靠 Block 对象上的 &lt;code&gt;AssociatedObject&lt;/code&gt;，且 key 为 &lt;code&gt;replacementInvoke&lt;/code&gt;。这样就构造了一条虚拟的链表：想要获得上次 Hook 的 token，只需在 Hook 的 Block 对象上使用 &lt;code&gt;originalInvoke&lt;/code&gt; 作为 key 即可。&lt;/p&gt;
&lt;p&gt;下面的代码展示了获取下个 token 的 &lt;code&gt;next&lt;/code&gt; 实现。因为链表可能会有新的插入和删除节点操作，所以需确保线程安全。&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;BHToken &lt;/span&gt;*)next&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;BHLock &lt;/span&gt;*lock = [self.&lt;span class=&quot;keyword&quot;&gt;block &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bh_lockForKey:@selector(next)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    [lock lock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!_next) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _next = objc_getAssociatedObject(self.&lt;span class=&quot;keyword&quot;&gt;block, &lt;/span&gt;self.&lt;span class=&quot;keyword&quot;&gt;originInvoke);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;BHToken &lt;/span&gt;*result = _next&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [lock unlock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return result&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里使用 &lt;code&gt;replacementInvoke&lt;/code&gt; 来作为 &lt;code&gt;AssociatedObject&lt;/code&gt; 的 key 真是&lt;strong&gt;一举多得&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将 token 的生命周期绑定到 Block 对象上，实现 self-managed&lt;/li&gt;
&lt;li&gt;因为函数指针地址是唯一的，确保 Block 上关联每个 token 的 key 不会冲突&lt;/li&gt;
&lt;li&gt;Block 的 &lt;code&gt;invoke&lt;/code&gt; 指针作为 key，可以找到最后一次 Hook 的 token。进而按 Hook 先后顺序遍历出所有的 token。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面的代码展示了如何获取最后一次 Hook 的 token。在读取 &lt;code&gt;invoke&lt;/code&gt; 函数指针的时候，注意保证线程安全。&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;BHToken &lt;/span&gt;*)&lt;span class=&quot;keyword&quot;&gt;block_currentHookToken&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; (![&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;block_checkValid]) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void *invoke = [&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;block_currentInvokeFunction];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    return objc_getAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;self, &lt;/span&gt;invoke)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void *)&lt;span class=&quot;keyword&quot;&gt;block_currentInvokeFunction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct &lt;/span&gt;_BHBlock *&lt;span class=&quot;keyword&quot;&gt;bh_block &lt;/span&gt;= (__bridge void *)&lt;span class=&quot;keyword&quot;&gt;self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;BHLock &lt;/span&gt;*lock = [&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bh_lockForKey:_cmd];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    [lock lock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void *invoke = &lt;span class=&quot;keyword&quot;&gt;bh_block-&amp;gt;invoke;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    [lock unlock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return invoke&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;撤销-Hook&quot;&gt;&lt;a href=&quot;#撤销-Hook&quot; class=&quot;headerlink&quot; title=&quot;撤销 Hook&quot;&gt;&lt;/a&gt;撤销 Hook&lt;/h2&gt;&lt;p&gt;俗话说『请神容易送神难』。好多 Hook 框架只解决的如何 Hook，但是却无法撤销恢复原样，留下一堆烂摊子。&lt;/p&gt;
&lt;p&gt;在搭建了 Hook 链表的基础上，多次 Hook 的链表可以简化成 &lt;code&gt;invoke&lt;/code&gt; 函数指针之间的关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yulingtianxia/Blog-Hexo-Source/master/source/resources/BlockHook/BlockHook invoke call.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么撤销 Hook 就可以从链表头部开始遍历，找到当前要 &lt;code&gt;remove&lt;/code&gt; 的 token。接着链表上删除这个 token，而这又可以分为两个子问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;移除最后一次 Hook：需要将 Block 的 &lt;code&gt;invoke&lt;/code&gt; 指针指向 token 的 &lt;code&gt;originalInvoke&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;移除&lt;em&gt;非&lt;/em&gt;最后一次 Hook：需要将上一次 Hook token 的 &lt;code&gt;originalInvoke&lt;/code&gt; 指向当前 token 的 &lt;code&gt;originalInvoke&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后肯定还要解除 Block 对象对 token 的持有。&lt;/p&gt;
&lt;p&gt;这部分逻辑的实现代码如下，在操作 Block 的 &lt;code&gt;invoke&lt;/code&gt; 指针时依然需要注意线程安全问题：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)remove&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.isStackBlock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Can&#39;t remove token for StackBlock!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.deadBlock = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.originInvoke) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.block) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            BHToken *current = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.block block_currentHookToken];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            BHToken *last = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (current) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (current == &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (last) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// remove middle token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        last.originInvoke = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.originInvoke;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        last.next = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// remove head(current) token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        BHLock *lock = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.block bh_lockForKey:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(block_currentInvokeFunction)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        [lock lock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ((__bridge &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _BHBlock *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.block)-&amp;gt;invoke = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.originInvoke;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        [lock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                last = current;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                current = [current next];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.originInvoke = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        objc_setAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.block, _replacementInvoke, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, OBJC_ASSO&lt;span class=&quot;built_in&quot;&gt;CIATION_RETAIN&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;这也竟然能水一篇，哈哈。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot;&gt;BlockHook&lt;/a&gt; 开创性地解决了 Objective-C 语言界 Hook Block 的问题，但也迎来了新的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何知道某个 Block 对象被谁 Hook 过？&lt;/li&gt;
&lt;li&gt;多次 Hook 的先后顺序？&lt;/li&gt;
&lt;li&gt;如何处理好多次 Hook 同一个 Block 后对任意一次 Hook 的撤销？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些问题也是开发者在使用时向我反馈过的问题，在这篇文章里，这些问题都将会解决。&lt;/p&gt;
&lt;p&gt;关于 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot;&gt;BlockHook&lt;/a&gt; 的原理，可以先阅读之前的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2018/02/28/Hook-Objective-C-Block-with-Libffi/&quot;&gt;Hook Objective-C Block with Libffi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2019/04/27/BlockHook-with-Struct/&quot;&gt;BlockHook with Struct&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>BlockHook with Struct</title>
    <link href="http://yulingtianxia.com/blog/2019/04/27/BlockHook-with-Struct/"/>
    <id>http://yulingtianxia.com/blog/2019/04/27/BlockHook-with-Struct/</id>
    <published>2019-04-27T13:26:55.000Z</published>
    <updated>2019-04-27T13:29:55.617Z</updated>
    
    <content type="html">&lt;p&gt;一年前，我开发了 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockHook&lt;/a&gt;，（应该是）填补了 Objective-C 业界在 Hook Block 技术领域的空白。但是对于 Block 的参数和返回值有限制，仅定制了 &lt;code&gt;CGRect&lt;/code&gt;, &lt;code&gt;CGSize&lt;/code&gt;, &lt;code&gt;CGPoint&lt;/code&gt; 等结构体，不支持自定义 struct。这次就把这个坑给填上。&lt;/p&gt;
&lt;p&gt;至此，&lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockHook&lt;/a&gt; 已支持 macOS 和 iOS 平台全架构、tvOS 和 watchOS 模拟器，&lt;code&gt;BlockHook.m&lt;/code&gt; 测试覆盖率达到 92% 以上。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;关于 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockHook&lt;/a&gt; 的实现原理，可以先阅读 &lt;a href=&quot;http://yulingtianxia.com/blog/2018/02/28/Hook-Objective-C-Block-with-Libffi/&quot;&gt;Hook Objective-C Block with Libffi&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Struct-Encode&quot;&gt;&lt;a href=&quot;#Struct-Encode&quot; class=&quot;headerlink&quot; title=&quot;Struct Encode&quot;&gt;&lt;/a&gt;Struct Encode&lt;/h2&gt;&lt;p&gt;要想解析自定义结构体的类型，并转换为 &lt;code&gt;ffi_type&lt;/code&gt;，首先要从 Block 的 signature 入手。从中提取出 struct 的 encode，并继续解析其内容。&lt;/p&gt;
&lt;p&gt;比如下面这个结构体，encode 是 “{TestStruct=idfc^i^{CGRect}}”。编码规则可以查看 &lt;a href=&quot;https://nshipster.cn/type-encodings/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Type Encodings&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;struct TestStruct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int32_t a&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    double b&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    float c&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    char d&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int *e&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGRect *f&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;基本可以把结构体当做基本类型的组合嵌套了，那么在原有解析方法的基础上，针对 “{name=type}” 这种范式来个递归遍历就行了。&lt;code&gt;_ffiTypeForStructEncode&lt;/code&gt; 方法将截取 signature 字符串前面的 struct，并得到结构体的 &lt;code&gt;size&lt;/code&gt;、 &lt;code&gt;alignment&lt;/code&gt; 和 encode 长度 &lt;code&gt;length&lt;/code&gt;。构建 &lt;code&gt;ffi_type&lt;/code&gt;，并截取 &lt;code&gt;=&lt;/code&gt; 后面的内容调用 &lt;code&gt;_typesWithEncodeString&lt;/code&gt; 递归处理，得到结构体元素数组。&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (ffi_type *)_ffiTypeForStructEncode:(const char *)&lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSUInteger size, &lt;span class=&quot;meta&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    long length&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;BHSizeAndAlignment(str, &lt;/span&gt;&amp;amp;size, &amp;amp;&lt;span class=&quot;meta&quot;&gt;align&lt;/span&gt;, &amp;amp;length)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ffi_type *&lt;span class=&quot;keyword&quot;&gt;structType &lt;/span&gt;= [&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;_allocate:size]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;structType-&amp;gt;type &lt;/span&gt;= FFI_TYPE_STRUCT&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;structType-&amp;gt;size &lt;/span&gt;= size&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;structType-&amp;gt;alignment &lt;/span&gt;= &lt;span class=&quot;meta&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const char *temp = [[[NSString &lt;span class=&quot;keyword&quot;&gt;stringWithUTF8String:str] &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;substringWithRange:NSMakeRange(0, &lt;/span&gt;length)] UTF8String]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // cut &lt;span class=&quot;string&quot;&gt;&quot;struct=&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;while&lt;/span&gt; (temp &amp;amp;&amp;amp; *temp &amp;amp;&amp;amp; *temp != &lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        temp++&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ffi_type **elements = [&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;_typesWithEncodeString:temp + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;structType-&amp;gt;elements &lt;/span&gt;= elements&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;keyword&quot;&gt;structType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;BHSizeAndAlignment&lt;/code&gt; 处理了字符串中的 encode，跳过了无用的 “}” 和数字。这里面的数字其实是内存地址偏移量。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *BHSizeAndAlignment(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *str, &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; *sizep, &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; *alignp, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; *lenp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;NSGetSizeAndAlignment&lt;/span&gt;(str, sizep, alignp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (lenp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        *lenp = &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; - str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(*&lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&#39;&amp;#125;&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt;++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(isdigit(*&lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt;++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;_ffiTypeForEncode&lt;/code&gt; 方法中对 struct 的处理也得到了简化，只需调用 &lt;code&gt;_ffiTypeForStructEncode&lt;/code&gt; 即可。经测试，struct 之间的嵌套都 OK。&lt;/p&gt;
&lt;h2 id=&quot;Return-Struct-on-x86&quot;&gt;&lt;a href=&quot;#Return-Struct-on-x86&quot; class=&quot;headerlink&quot; title=&quot;Return Struct on x86&quot;&gt;&lt;/a&gt;Return Struct on x86&lt;/h2&gt;&lt;p&gt;在 x86 架构下，当 Block 返回值是大于 16 Byte 的 struct 时，其实现函数 &lt;code&gt;invoke&lt;/code&gt; 的参数列表会发生变化：第一个参数不再是 Block 对象自己，而是指向 struct 返回值的指针。其余参数依次往后挪一位。Block 结构中 &lt;code&gt;flags&lt;/code&gt; 里有一个 bit 标记了这个『潜规则』：&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;BLOCK_HAS_STRET&lt;/span&gt; =         (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么在使用 libffi 定义 Hook 函数的返回值和参数列表的时候就需要注意了，虽然 signature 还是正常的，但是参数列表顺序调整了啊！当 &lt;code&gt;BLOCK_HAS_STRET&lt;/code&gt; 生效时，得特殊处理下。&lt;code&gt;_typesWithEncodeString&lt;/code&gt; 方法负责解析 signature 字符串中的 Type Encoding 列表，支持加偏移量。而 &lt;code&gt;_argsWithEncodeString&lt;/code&gt; 是调用了前者，&lt;code&gt;startIndex&lt;/code&gt; 传入 &lt;code&gt;1&lt;/code&gt;，略过了第一个返回值。&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int argCount&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ffi_type **argTypes&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ffi_type *returnType&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct _BHBlock *&lt;span class=&quot;keyword&quot;&gt;bh_block &lt;/span&gt;= (__bridge void *)self.&lt;span class=&quot;keyword&quot;&gt;block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;if ((&lt;span class=&quot;keyword&quot;&gt;bh_block-&amp;gt;flags &lt;/span&gt;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;BLOCK_HAS_STRET)) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    argTypes = [self _typesWithEncodeString:str getCount:&amp;amp;argCount startIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    argTypes[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &amp;amp;ffi_type_pointer&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    returnType = &amp;amp;ffi_type_void&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.stret = YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;Block has stret!&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    argTypes = [self _argsWithEncodeString:str getCount:&amp;amp;argCount]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    returnType = [self _ffiTypeForEncode:str]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Hook 的处理函数 &lt;code&gt;BHFFIClosureFunc&lt;/code&gt; 中，可以获取到 Block 调用时传入的参数。为了让使用方对 &lt;code&gt;BLOCK_HAS_STRET&lt;/code&gt; 无感知，需要将参数和返回值『纠正』回正常的顺序，并通过 &lt;code&gt;BHToken&lt;/code&gt; 提供给使用者。这样就实现了动态修改 Block 任意参数和返回值的功能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;args&lt;/code&gt; 是个指针数组，其中第一个指针又是个指向结构体返回值指针的指针，而 &lt;code&gt;token.retValue&lt;/code&gt; 本应该是指向结构体返回值的指针。虽然有点绕，但是不难懂。&lt;/p&gt;
&lt;p&gt;然而真的调用 Block 原实现的时候，还是需要用真正的参数列表和范沪指，所以加了 &lt;code&gt;realRetValue&lt;/code&gt; 和 &lt;code&gt;realArgs&lt;/code&gt; 分开存储原始传入的 &lt;code&gt;args&lt;/code&gt; 和 &lt;code&gt;ret&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static void BHFFIClosureFunc(ffi_cif *cif, void *&lt;span class=&quot;keyword&quot;&gt;ret&lt;/span&gt;, void **&lt;span class=&quot;keyword&quot;&gt;args&lt;/span&gt;, void *userdata)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BHToken *&lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt; = (__bridge BHToken *)(userdata);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.hasStret) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// The first arg contains address of a pointer of returned struct.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.retValue = *((void **)&lt;span class=&quot;keyword&quot;&gt;args&lt;/span&gt;[0]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Other args move backwards.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;args&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;args&lt;/span&gt; + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.retValue = &lt;span class=&quot;keyword&quot;&gt;ret&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;args&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;args&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.realRetValue = &lt;span class=&quot;keyword&quot;&gt;ret&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.realArgs = &lt;span class=&quot;keyword&quot;&gt;args&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (BlockHookModeBefore == &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt; invokeHookBlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(BlockHookModeInstead == &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.mode &amp;amp;&amp;amp; [&lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt; invokeHookBlock])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt; invokeOriginalBlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (BlockHookModeAfter == &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt; invokeHookBlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.retValue = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;args&lt;/span&gt; = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.realRetValue = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.realArgs = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h2&gt;&lt;p&gt;在测试用例 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook/blob/master/BlockHookSample%20iOSTests/BlockHookSample_iOSTests.m&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockHookSample_iOSTests.m&lt;/a&gt; 文件中包含了一些常用的使用示例，还有一些诸如改 Block 参数和返回值的骚操作。大家如果在使用中发现任何问题，或者有新的诉求，欢迎来提 issue：&lt;a href=&quot;https://github.com/yulingtianxia/BlockHook/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/BlockHook/issues&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;哎这个月实在没啥写的了，又水了一篇文章。&lt;br&gt;有的大佬都不怎么更新博客了，导致 iOS 业界水平停滞不前，进而导致我还是一如既往的菜。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一年前，我开发了 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot;&gt;BlockHook&lt;/a&gt;，（应该是）填补了 Objective-C 业界在 Hook Block 技术领域的空白。但是对于 Block 的参数和返回值有限制，仅定制了 &lt;code&gt;CGRect&lt;/code&gt;, &lt;code&gt;CGSize&lt;/code&gt;, &lt;code&gt;CGPoint&lt;/code&gt; 等结构体，不支持自定义 struct。这次就把这个坑给填上。&lt;/p&gt;
&lt;p&gt;至此，&lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot;&gt;BlockHook&lt;/a&gt; 已支持 macOS 和 iOS 平台全架构、tvOS 和 watchOS 模拟器，&lt;code&gt;BlockHook.m&lt;/code&gt; 测试覆盖率达到 92% 以上。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>音频情绪识别</title>
    <link href="http://yulingtianxia.com/blog/2019/03/30/Audio-Emotion-Recognition/"/>
    <id>http://yulingtianxia.com/blog/2019/03/30/Audio-Emotion-Recognition/</id>
    <published>2019-03-30T13:30:46.000Z</published>
    <updated>2019-04-27T08:39:53.992Z</updated>
    
    <content type="html">&lt;p&gt;如何识别声音所蕴含的情绪呢？在大部分场景下，人声的情绪更有意义。可以先将人声转文字，再通过 NLP 分析语义情绪。不过人类语言博大精深，一句『卧槽』的不同语调和语境下会有很多种意义，真的是卧槽啊！&lt;/p&gt;
&lt;p&gt;于是我从音频特征提取入手，将人声分类识别为八种情绪，实现了两个方案并都得到了测试集 70% 以上的准确率：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 VGGish 网络做特征提取，输入自定义网络进行训练。&lt;/li&gt;
&lt;li&gt;使用音频库导出一系列特征作为输入向量，自定义网络进行训练。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python 工程和 iOS Sample 开源在 GitHub 上了：&lt;a href=&quot;https://github.com/yulingtianxia/AudioEmotion&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/AudioEmotion&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Dataset&quot;&gt;&lt;a href=&quot;#Dataset&quot; class=&quot;headerlink&quot; title=&quot;Dataset&quot;&gt;&lt;/a&gt;Dataset&lt;/h2&gt;&lt;p&gt;在音频领域数据集上，Google 提供的 AudioSet 很有名，数据量大标签也多。但是跟人声和情感的关联并不大。这里使用了 RAVDESS 数据，音频数据包含了说话和唱歌两大类数据，找了 24 位演员录制出 “neutral calm happy sad angry fearful disgust surprised” 八种情感。&lt;/p&gt;
&lt;h2 id=&quot;Turicreate-Sound-Classifier&quot;&gt;&lt;a href=&quot;#Turicreate-Sound-Classifier&quot; class=&quot;headerlink&quot; title=&quot;Turicreate Sound Classifier&quot;&gt;&lt;/a&gt;Turicreate Sound Classifier&lt;/h2&gt;&lt;p&gt;苹果推出的机器学习框架 Turicreate 降低了门槛，即便没有相关经验也可以轻松上手。训练后的模型参数可以导出为 Core ML 所使用的 mlmodel 文件，更方便集成到苹果的平台上。刚发布的 5.4 版本新增了 Sound Classifier，这可用于声音情绪识别任务上。&lt;/p&gt;
&lt;p&gt;Turicreate 的 Sound Classifier 实现分三个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;音频预处理：使用 Hamming 窗口对语音进行分帧，对每一帧做短时傅里叶变换，然后利用信号幅值计算声谱图。将声谱映射到 64 阶 mel 滤波器组中计算 mel 声谱。最后通过控制时长，输出一个 (96, 64) 的矩阵。&lt;/li&gt;
&lt;li&gt;VGGish 特征提取：Google 训练好的 CNN，它是基于 VGG 的变种，可用于将声音提取成 128 维特征。Google 的 AudioSet 号称是声音届的 ImageNet，它所提供的数据类型就包含从 VGGish 提取的特征。而 VGGish 模型是使用 YouTube-8M 训练出来的。&lt;/li&gt;
&lt;li&gt;使用自定义神经网络训练，最后一层的节点数与标签数一致。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里还需要了解一个音频处理领域的一个概念：梅尔倒谱系数（Mel-scale Frequency Cepstral Coefficients，简称 MFCC）是在 Mel 标度频率域提取出来的倒谱参数，Mel标度描述了人耳频率的非线性特性。网上关于 MFCC 的资料很多，还有很多基于它的优化算法。第一步音频预处理也用到了。&lt;/p&gt;
&lt;p&gt;其实数据预处理和特征提取的结果是可以复用的，在第一个版本发布后已经进行了优化： &lt;a href=&quot;https://github.com/apple/turicreate/commit/e9b7ac6cad5a28894815aa4c5c9282163b97775b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sound Classifier: Allow Reusing Deep Features&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Turicreate 固然爽，但是还存在一些问题。接下来详细讲一下：&lt;/p&gt;
&lt;h3 id=&quot;加载音频文件&quot;&gt;&lt;a href=&quot;#加载音频文件&quot; class=&quot;headerlink&quot; title=&quot;加载音频文件&quot;&gt;&lt;/a&gt;加载音频文件&lt;/h3&gt;&lt;p&gt;Turicreate 的 &lt;code&gt;load_audio&lt;/code&gt; 方法加载音频文件时，很多 wav 会报错: “ Incomplete wav chunk”。导致训练样本大大减少。&lt;/p&gt;
&lt;p&gt;看了下源码，是使用 &lt;code&gt;scipy&lt;/code&gt; 的 &lt;code&gt;wavfile&lt;/code&gt; 库读 wav 文件的，将其替换成 &lt;code&gt;librosa&lt;/code&gt; 就 OK 了。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;, sample_rate = librosa.load(&lt;span class=&quot;title&quot;&gt;cur_file_path&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;sr&lt;/span&gt;=&lt;span class=&quot;type&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;res_type&lt;/span&gt;=&#39;&lt;span class=&quot;title&quot;&gt;scipy&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; * 32768&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# sample_rate, data = _wavfile.read(cur_file_path)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之所以还需要把 &lt;code&gt;data&lt;/code&gt; 乘 32768 是为了将 (-1, 1) 的浮点数转为 16bit 整数表示。这样保证替换加载音频文件的接口后，结果数据不会有影响。&lt;/p&gt;
&lt;p&gt;这段代码来自于 &lt;code&gt;audio_analysis.py&lt;/code&gt;，我已经将修改后的版本提交了。&lt;/p&gt;
&lt;h3 id=&quot;自定义神经网络&quot;&gt;&lt;a href=&quot;#自定义神经网络&quot; class=&quot;headerlink&quot; title=&quot;自定义神经网络&quot;&gt;&lt;/a&gt;自定义神经网络&lt;/h3&gt;&lt;p&gt;Turicreate 自定义的神经网络结构为两层 100 个节点使用 RELU 激活函数的全连接层，最后接一层 label 个数节点的 softmax。这样简单的结构在官方 Demo 的 “ESC-10” 数据分类任务上表现还 OK，但是在声音情感预测上效果并不是很好。&lt;/p&gt;
&lt;p&gt;既然是基于 VGGish 做 fine-tune，那就直接改 Turicreate 源码吧，在 &lt;code&gt;sound_classifier.py&lt;/code&gt; 文件里。主要是改神经网络定义和导出模型到 Core ML 的方法。&lt;/p&gt;
&lt;p&gt;在原有的网络结构上，增加了全连接层数和 BN 层，并使用 Dropout 层减轻过拟合的情况。当然，网络结构可以不断调整来得到更加的效果。&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def _build_custom_neural_network(num_inputs, num_labels):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    from mxnet.gluon import &lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    net = &lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.Sequential(prefix=&lt;span class=&quot;string&quot;&gt;&#39;custom_&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    with net.name_scope():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        net.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.Dense(&lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;, in_units=num_inputs, activation=&lt;span class=&quot;string&quot;&gt;&#39;relu&#39;&lt;/span&gt;, prefix=&lt;span class=&quot;string&quot;&gt;&#39;dense0_&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        net.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.BatchNorm())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        net.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.Dropout(&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        net.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.Dense(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;, activation=&lt;span class=&quot;string&quot;&gt;&#39;relu&#39;&lt;/span&gt;, prefix=&lt;span class=&quot;string&quot;&gt;&#39;dense1_&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        net.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.BatchNorm())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        net.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.Dropout(&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        net.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.Dense(&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, activation=&lt;span class=&quot;string&quot;&gt;&#39;relu&#39;&lt;/span&gt;, prefix=&lt;span class=&quot;string&quot;&gt;&#39;dense2_&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        net.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.BatchNorm())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        net.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.Dropout(&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        net.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.Dense(&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;, activation=&lt;span class=&quot;string&quot;&gt;&#39;relu&#39;&lt;/span&gt;, prefix=&lt;span class=&quot;string&quot;&gt;&#39;dense3_&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        net.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.BatchNorm())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        net.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.Dropout(&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        net.&lt;span class=&quot;built_in&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nn&lt;/span&gt;.Dense(num_labels, prefix=&lt;span class=&quot;string&quot;&gt;&#39;dense4_&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; net&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于增加了 BN 和 Dropout，所以在生成 Core ML 模型文件的时候，需要判断下层的类型。增加对 BN 层的支持，忽略 Dropout 层。这里构建 Core ML 所需网络描述的 &lt;code&gt;builder&lt;/code&gt; 是 coremltools 的 &lt;code&gt;NeuralNetworkBuilder&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;input_name, output_name = input_name, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import mxnet as _mx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;i&lt;/span&gt;, cur_layer &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(self._custom_classifier):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;output_name = str(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; type(cur_layer) == _mx&lt;span class=&quot;selector-class&quot;&gt;.gluon&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.nn&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.basic_layers&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Dense&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    W = cur_layer&lt;span class=&quot;selector-class&quot;&gt;.weight&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.data&lt;/span&gt;(ctx).asnumpy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nC, nB = W&lt;span class=&quot;selector-class&quot;&gt;.shape&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Wb = cur_layer&lt;span class=&quot;selector-class&quot;&gt;.bias&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.data&lt;/span&gt;(ctx).asnumpy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    builder.add_inner_product(name=&lt;span class=&quot;string&quot;&gt;&#39;inner_product_&#39;&lt;/span&gt;+str(i),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              W=W,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              b=Wb,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              input_channels=nB,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              output_channels=nC,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              has_bias=True,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              input_name=input_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              output_name=&lt;span class=&quot;string&quot;&gt;&#39;inner_product_&#39;&lt;/span&gt;+output_name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cur_layer&lt;span class=&quot;selector-class&quot;&gt;.act&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        builder.add_activation(&lt;span class=&quot;string&quot;&gt;&quot;activation&quot;&lt;/span&gt;+str(i), &lt;span class=&quot;string&quot;&gt;&#39;RELU&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;inner_product_&#39;&lt;/span&gt;+output_name, output_name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;elif type(cur_layer) == _mx&lt;span class=&quot;selector-class&quot;&gt;.gluon&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.nn&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.basic_layers&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.BatchNorm&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    zeros = _np.zeros(nC)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ones = _np.ones(nC)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    builder.add_batchnorm(name=&lt;span class=&quot;string&quot;&gt;&#39;bn_layer_&#39;&lt;/span&gt;+str(i),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          channels=nC,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          gamma=ones,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          beta=zeros,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          mean=zeros,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          variance=ones,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          input_name=input_name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          output_name=output_name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;elif type(cur_layer) == _mx&lt;span class=&quot;selector-class&quot;&gt;.gluon&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.nn&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.basic_layers&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Dropout&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input_name = output_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;last_output = builder&lt;span class=&quot;selector-class&quot;&gt;.spec&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.neuralNetworkClassifier&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.layers&lt;/span&gt;[-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;selector-class&quot;&gt;.output&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;builder.add_softmax(&lt;span class=&quot;string&quot;&gt;&#39;softmax&#39;&lt;/span&gt;, last_output, self.target)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;部署到-Core-ML&quot;&gt;&lt;a href=&quot;#部署到-Core-ML&quot; class=&quot;headerlink&quot; title=&quot;部署到 Core ML&quot;&gt;&lt;/a&gt;部署到 Core ML&lt;/h3&gt;&lt;p&gt;虽然生成了 mlmodel 模型文件，但是模型文件不包含第一步预处理的算法。需要依赖官方提供的 &lt;code&gt;libAudioPreprocessing.dylib&lt;/code&gt;，只支持 64 位。 在使用 Core ML 预测之前，需要将 wav 文件按照输入格式切割，官方给了实例代码，但是有 bug。建议使用我提供的 iOS Sample。&lt;/p&gt;
&lt;h2 id=&quot;Put-features-to-Keras&quot;&gt;&lt;a href=&quot;#Put-features-to-Keras&quot; class=&quot;headerlink&quot; title=&quot;Put features to Keras&quot;&gt;&lt;/a&gt;Put features to Keras&lt;/h2&gt;&lt;p&gt;在这个方案中，先是提取出音频文件的一系列特征组成一个 26 维向量，再输入自定义神经网络中进行训练。这些音频特征包括：chromagram、RMS、spectral centroid、spectral bandwidth、spectral rolloff、zero-crossing rate、MFCC。&lt;/p&gt;
&lt;p&gt;将音频特征提取后，与文件名和 label 一起保存在一个 csv 文件中。这部分代码实现在 &lt;code&gt;extract_audio_feature.py&lt;/code&gt; 里。&lt;/p&gt;
&lt;p&gt;然后使用 Keras 搭建一个比较简单的神经网络进行训练，这部分的逻辑与 Turicreate 中第三步类似，实现代码在 &lt;code&gt;train_audio.py&lt;/code&gt; 里。&lt;/p&gt;
&lt;p&gt;此方案参照了一个音乐分类的 Python Book 代码：&lt;a href=&quot;https://gist.github.com/parulnith/7f8c174e6ac099e86f0495d3d9a4c01e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Music_genre_classification.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/梅尔频率倒谱系数&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;梅尔频率倒谱系数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://research.google.com/audioset/download.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AudioSet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/research/audioset&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Models for AudioSet: A Large Scale Dataset of Audio Events&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://apple.github.io/turicreate/docs/userguide/sound_classifier/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sound Classifier&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zenodo.org/record/1188976&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Ryerson Audio-Visual Database of Emotional Speech and Song (RAVDESS)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://towardsdatascience.com/music-genre-classification-with-python-c714d032f0d8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Music Genre Classification with Python&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如何识别声音所蕴含的情绪呢？在大部分场景下，人声的情绪更有意义。可以先将人声转文字，再通过 NLP 分析语义情绪。不过人类语言博大精深，一句『卧槽』的不同语调和语境下会有很多种意义，真的是卧槽啊！&lt;/p&gt;
&lt;p&gt;于是我从音频特征提取入手，将人声分类识别为八种情绪，实现了两个方案并都得到了测试集 70% 以上的准确率：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 VGGish 网络做特征提取，输入自定义网络进行训练。&lt;/li&gt;
&lt;li&gt;使用音频库导出一系列特征作为输入向量，自定义网络进行训练。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python 工程和 iOS Sample 开源在 GitHub 上了：&lt;a href=&quot;https://github.com/yulingtianxia/AudioEmotion&quot;&gt;https://github.com/yulingtianxia/AudioEmotion&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Leaning" scheme="http://yulingtianxia.com/tags/Machine-Leaning/"/>
    
  </entry>
  
  <entry>
    <title>Parallel Computation using MPS</title>
    <link href="http://yulingtianxia.com/blog/2019/02/28/Parallel-Computation-using-MPS/"/>
    <id>http://yulingtianxia.com/blog/2019/02/28/Parallel-Computation-using-MPS/</id>
    <published>2019-02-27T17:50:50.000Z</published>
    <updated>2019-03-03T06:14:18.877Z</updated>
    
    <content type="html">&lt;p&gt;在照片质量评分组件 &lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhotoAssessment&lt;/a&gt; 项目上，有些算法的实现是使用 CPU 运行的。通过使用 MPS(Metal Performance Shader) 在 GPU 上并行计算，显著提升了性能，算法执行耗时降低了 99.9% 以上。震惊，呵呵。随着性能上成百上千倍的提升，可以在相等时间内处理更大尺寸的图片，进而提升组件的准确度和用户体验。&lt;/p&gt;
&lt;p&gt;至此，几乎所有图像处理与计算任务都交由 GPU 完成。之前利用 Sobel 算子边缘检测是使用了苹果封装好的 MPS 类，剩余的色彩分布指纹向量和饱和度均值当然都是需要自己写 Shader 的，现在终于补齐了。Metal Shading Language 与 GLSL 使用习惯和理念很相似，只不过 Metal Shader 的语法是基于 C++ 14 的。&lt;/p&gt;
&lt;p&gt;关于整个组件的实现思路，可以查阅&lt;a href=&quot;http://yulingtianxia.com/blog/2018/11/30/Photo-Assessment/&quot;&gt;『使用 Metal 和 Core ML 评价照片质量』&lt;/a&gt;。本篇文章所涉及到的 &lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment/blob/master/PhotoAssessment-Sample/Sources/PhotoAssessmentShaders.metal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Shader 代码&lt;/a&gt; 也在其中。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;工程升级到 Swift 5 结果 CI 不支持，编不过哎。&lt;/p&gt;
&lt;h2 id=&quot;性能对比&quot;&gt;&lt;a href=&quot;#性能对比&quot; class=&quot;headerlink&quot; title=&quot;性能对比&quot;&gt;&lt;/a&gt;性能对比&lt;/h2&gt;&lt;p&gt;对一张 4032x3024 彩色图片在 iPhone 8 Plus 上进行测试的 Benchmark 如下（单位：秒）：&lt;/p&gt;
&lt;p&gt;计算平均饱和度：（耗时降低 99.90%）&lt;br&gt;CPU meanSaturation cost: 27.276064038276672&lt;br&gt;GPU meanSaturation cost: 0.02604210376739502&lt;/p&gt;
&lt;p&gt;计算指纹向量算法：（耗时降低 99.28%）&lt;br&gt;CPU fingerprint cost: 8.9078871011734&lt;br&gt;GPU fingerprint cost: 0.06412196159362793&lt;/p&gt;
&lt;p&gt;优化后的耗时降低幅度也跟图片本身有关，色彩分布更广的图片优化效果会更好。图片尺寸越大，优化效果越好。&lt;/p&gt;
&lt;p&gt;再来看看 500x500 尺寸下的数据：&lt;/p&gt;
&lt;p&gt;500x500 降采样到 50x50（包含降采样耗时）&lt;br&gt;cpu total cost: 0.3883340358734131&lt;br&gt;gpu total cost: 0.0030889511108398438&lt;/p&gt;
&lt;p&gt;直接处理 500x500 尺寸图片&lt;br&gt;gpu total cost: 0.008553862571716&lt;/p&gt;
&lt;p&gt;可以看出，降采样有一定耗时。即便是降采样到 50x50 这种很小的尺寸，在 CPU 上运行算法也会有较多的耗时。&lt;strong&gt;相比之下，直接 GPU 处理 500x500 尺寸图片具有更大的优势：耗时远小于降采样后跑 CPU，略高于降采样后跑 GPU，但能够处理更大尺寸更多信息，相当于有更高的准确率。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实现这两个功能的 Shader kernel 函数分别封装成 Swift 类： &lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment/blob/master/PhotoAssessment-Sample/Sources/MPSSaturationKernel.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;MPSSaturationKernel&lt;/code&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment/blob/master/PhotoAssessment-Sample/Sources/MSPFingerprintImageKernel.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;MSPFingerprintImageKernel&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Shader-的实现&quot;&gt;&lt;a href=&quot;#Shader-的实现&quot; class=&quot;headerlink&quot; title=&quot;Shader 的实现&quot;&gt;&lt;/a&gt;Shader 的实现&lt;/h2&gt;&lt;p&gt;Command Encoder 会使用 Texture、Buffer、Sampler、Pipeline 等内容构建出 Command，并装载到 Command Buffer 上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yulingtianxia/Blog-Hexo-Source/master/source/resources/MPS/command structure0.png&quot; alt=&quot;from Apple Doc&quot;&gt;&lt;/p&gt;
&lt;p&gt;从 CPU 各个线程创建的 Command Buffer 都将会传入 Command Queue。运行在 GPU 上的 Shader 代码会处理这些 Command。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yulingtianxia/Blog-Hexo-Source/master/source/resources/MPS/command structure1.png&quot; alt=&quot;from Apple Doc&quot;&gt;&lt;/p&gt;
&lt;p&gt;Command Encoder 有三种：Render、Compute 和 Blit。区别在于用途和用法，但创建的 Command 都可以放入同一个 Command Buffer 中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yulingtianxia/Blog-Hexo-Source/master/source/resources/MPS/Cmd-Model-threads.png&quot; alt=&quot;from Apple Doc&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了在 GPU 上并行计算图片的饱和度和指纹向量，需要用到 Compute Command Encoder，并传入以下几个参数构建 Command：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Texture：输入或输出用到的图像纹理&lt;/li&gt;
&lt;li&gt;Buffer：可作为额外的入参或结果，可设定 CPU 和 GPU 间共享&lt;/li&gt;
&lt;li&gt;Compute Pipeline State：用于配置 Shader 函数名，也可用于计算 threadgroup 相关信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Threadgroup&quot;&gt;&lt;a href=&quot;#Threadgroup&quot; class=&quot;headerlink&quot; title=&quot;Threadgroup&quot;&gt;&lt;/a&gt;Threadgroup&lt;/h3&gt;&lt;p&gt;GPU 并行计算时，每条线程处理一个像素。整个 Texture 看做一个 Grid，可以进一步划分成多个 threadgroup。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yulingtianxia/Blog-Hexo-Source/master/source/resources/MPS/threadgroups.png&quot; alt=&quot;from Apple Doc&quot;&gt;&lt;/p&gt;
&lt;p&gt;threadgroup 还会按照 GPU 能同时执行的线程数 &lt;code&gt;threadExecutionWidth&lt;/code&gt; 被划分为 SIMD group。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yulingtianxia/Blog-Hexo-Source/master/source/resources/MPS/SIMD group.png&quot; alt=&quot;from Apple Doc&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了达到更好的性能，需要将 threadgroup 包含的线程数量设定为 &lt;code&gt;threadExecutionWidth&lt;/code&gt; 的整数倍。&lt;/p&gt;
&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let &lt;span class=&quot;keyword&quot;&gt;w&lt;/span&gt; = computePipelineState.threadExecutionWidth&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let &lt;span class=&quot;keyword&quot;&gt;h&lt;/span&gt; = computePipelineState.maxTotalThreadsPerThreadgroup / &lt;span class=&quot;keyword&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;threadGroupSize = MTLSize(width: &lt;span class=&quot;keyword&quot;&gt;w&lt;/span&gt;, height: &lt;span class=&quot;keyword&quot;&gt;h&lt;/span&gt;, depth: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在编写 Shader 时，可以通过参数获取到当前处理的像素所处的相对位置。在 C++ 14 中是使用属性的方式来标记参数用途。比如 &lt;code&gt;thread_position_in_grid&lt;/code&gt; 指的是当前线程处理的像素在 Grid 中的位置。类似的属性很多，比如 &lt;code&gt;threadgroup_position_in_grid&lt;/code&gt;, &lt;code&gt;thread_position_in_threadgroup&lt;/code&gt;,&lt;br&gt;&lt;code&gt;threads_per_threadgroup&lt;/code&gt;, &lt;code&gt;simdgroup_index_in_threadgroup&lt;/code&gt;, &lt;code&gt;thread_index_in_simdgroup&lt;/code&gt; …&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kernel void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rgb2hsvKernelNonuniform(texture2d&amp;lt;float, access::read&amp;gt; inTexture &lt;span class=&quot;string&quot;&gt;[[texture(0)]]&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              texture2d&amp;lt;float, access::write&amp;gt; outTexture &lt;span class=&quot;string&quot;&gt;[[texture(1)]]&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              uint2 gid &lt;span class=&quot;string&quot;&gt;[[thread_position_in_grid]]&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    float4 pixel = inTexture.read(gid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 省略部分代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;比如传入的 &lt;code&gt;gid&lt;/code&gt; 为 (9, 10)，那么就可以从 &lt;code&gt;inTexture&lt;/code&gt; 中读取到此位置像素的数据。因为 Grid 坐标系是基于这个 Texture 的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yulingtianxia/Blog-Hexo-Source/master/source/resources/MPS/grid coordinates.png&quot; alt=&quot;from Apple Doc&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Non-uniform-Threadgroup-Size&quot;&gt;&lt;a href=&quot;#Non-uniform-Threadgroup-Size&quot; class=&quot;headerlink&quot; title=&quot;Non-uniform Threadgroup Size&quot;&gt;&lt;/a&gt;Non-uniform Threadgroup Size&lt;/h3&gt;&lt;p&gt;Command Encoder 需要知道要处理的 Grid 的分组情况，比如Grid 包含多少 threadgroup，每个 threadgroup 包含多少 thread。&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; w = threadGroupSize.&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; h = threadGroupSize.&lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; threadgroupsPerGrid = MTLSize(&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;: (sourceTexture.&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt; + w - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) / w, &lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;: (sourceTexture.&lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt; + h - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) / h, depth: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;encoder?.dispatchThreadgroups(threadgroupsPerGrid, threadsPerThreadgroup: threadGroupSize)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;确定好这些信息后，GPU 就会开始按分组矩阵批量处理像素。但是因为 Grid 的尺寸是 Texture 的尺寸，长和宽不一定都能整除 threadgroup，所以处理到图片边缘的 threadgroup 时，会有一部分调用传入的 &lt;code&gt;gid&lt;/code&gt; 超出了范围。此时要在 Shader 中做边界保护逻辑：&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kernel void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rgb2hsvKernel(texture2d&amp;lt;float, access::read&amp;gt; inTexture &lt;span class=&quot;string&quot;&gt;[[texture(0)]]&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              texture2d&amp;lt;float, access::write&amp;gt; outTexture &lt;span class=&quot;string&quot;&gt;[[texture(1)]]&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              uint2 gid &lt;span class=&quot;string&quot;&gt;[[thread_position_in_grid]]&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((gid.x &amp;gt;= outTexture.get_width()) || (gid.y &amp;gt;= outTexture.get_height()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rgb2hsv(inTexture, outTexture, gid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是超范围的调用都被 &lt;code&gt;return&lt;/code&gt; 掉了，GPU 的一些线程没利用上，造成了浪费:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yulingtianxia/Blog-Hexo-Source/master/source/resources/MPS/underutilization of threads.png&quot; alt=&quot;from Apple Doc&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了提升性能，Metal 在部分 GPU 特性集上支持了 “Non-uniform Threadgroup Size”。可以允许存在不同 size 的 threadgroup：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yulingtianxia/Blog-Hexo-Source/master/source/resources/MPS/nonuniform threadgroups.png&quot; alt=&quot;from Apple Doc&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样只需要传入 Grid 的 size，以及 threadgroup 的 size，Metal 就会自动划分边缘部分的 threadgroup size，充分利用好 GPU 的运算效率。&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; threadsPerGrid = MTLSize(&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;: sourceTexture.&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;: sourceTexture.&lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;, depth: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;encoder?.dispatchThreads(threadsPerGrid, threadsPerThreadgroup: threadGroupSize)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样一来 Shader 部分的代码就不需要加边界判断了：&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kernel void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rgb2hsvKernelNonuniform(texture2d&amp;lt;float, access::read&amp;gt; inTexture &lt;span class=&quot;string&quot;&gt;[[texture(0)]]&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              texture2d&amp;lt;float, access::write&amp;gt; outTexture &lt;span class=&quot;string&quot;&gt;[[texture(1)]]&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              uint2 gid &lt;span class=&quot;string&quot;&gt;[[thread_position_in_grid]]&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rgb2hsv(inTexture, outTexture, gid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过并不是所有系统和设备都支持这项特性。目前支持 Non-uniform Threadgroup Size 的 GPU Feature Set 如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOS11 GPUFamily4_v1&lt;/li&gt;
&lt;li&gt;iOS12 GPUFamily4_v2&lt;/li&gt;
&lt;li&gt;iOS12 GPUFamily5_v1&lt;/li&gt;
&lt;li&gt;macOS13 GPUFamily1_v3&lt;/li&gt;
&lt;li&gt;macOS14 GPUFamily1_v4&lt;/li&gt;
&lt;li&gt;macOS14 GPUFamily2_v1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以目前我的策略是先判断是否支持 Non-uniform Threadgroup Size，然后决定使用的 Shader 函数版本、以及 Encoder 分发线程的方式。&lt;/p&gt;
&lt;h3 id=&quot;原子操作生成-Histogram&quot;&gt;&lt;a href=&quot;#原子操作生成-Histogram&quot; class=&quot;headerlink&quot; title=&quot;原子操作生成 Histogram&quot;&gt;&lt;/a&gt;原子操作生成 Histogram&lt;/h3&gt;&lt;p&gt;在计算指纹向量的时，并行将每个像素的内容处理完后，还需要统计成柱状图。比如处理完的像素种类一共有 &lt;code&gt;HistogramBufferSize&lt;/code&gt; 种，需要统计每种类型的像素数量，可以声明一个 Buffer，包含长度为 &lt;code&gt;HistogramBufferSize&lt;/code&gt; 的数组 &lt;code&gt;bucket&lt;/code&gt;，将其传入 Shader 函数用于统计。&lt;/p&gt;
&lt;p&gt;下面是用 Shader 实现的指纹向量生成代码，MPS 实现了部分 C++ 原子操作的接口，&lt;code&gt;atomic_fetch_add_explicit&lt;/code&gt; 用于原子累加操作。&lt;/p&gt;
&lt;figure class=&quot;highlight glsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef struct&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    atomic_int bucket[HistogramBufferSize];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; PAHistogramBuffer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; fingerprint(texture2d&amp;lt;&lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt;, access::read&amp;gt; inTexture [[&lt;span class=&quot;built_in&quot;&gt;texture&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)]],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 device PAHistogramBuffer &amp;amp;&lt;span class=&quot;keyword&quot;&gt;buffer&lt;/span&gt; [[&lt;span class=&quot;keyword&quot;&gt;buffer&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)]],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 uint2 gid [[thread_position_in_grid]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uint4 c = inTexture.read(gid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; width = inTexture.get_width();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; height = inTexture.get_height();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; blockCount = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; rowCount = &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(blockCount, height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; countPerRow = &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(blockCount, width);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; hStep = width / countPerRow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; vStep = height / rowCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; row = gid.y / vStep;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; col = gid.x / hStep;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// |-3bit-|-3bit-|-3bit-|-2bit-|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uint&lt;/span&gt; result = (row * countPerRow + col) + ((c.y &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + ((c.z &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + ((c.w &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    atomic_fetch_add_explicit(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;buffer&lt;/span&gt;.bucket[result], &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, memory_order_relaxed);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;MPS 支持的原子操作值类型很有限，无法选择占用内存更低的类型，只好忍受 &lt;code&gt;atomic_int&lt;/code&gt; 带来的 4 Byte 吧。只要控制好 &lt;code&gt;HistogramBufferSize&lt;/code&gt;，问题应该不大。&lt;/p&gt;
&lt;h3 id=&quot;踩坑&quot;&gt;&lt;a href=&quot;#踩坑&quot; class=&quot;headerlink&quot; title=&quot;踩坑&quot;&gt;&lt;/a&gt;踩坑&lt;/h3&gt;&lt;p&gt;MPS 中获取向量内容的方式可谓是方便，但是也是有坑在里面的。比如要注意无论是 &lt;code&gt;xyzw&lt;/code&gt; 还是 &lt;code&gt;rgba&lt;/code&gt; 分量获取的内容都是从低地址到高地址排列的。比如传入的像素格式是 RGBA，那么 &lt;code&gt;rgba&lt;/code&gt; 获取的值正好是反过来的。&lt;/p&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RGBA&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wzyx  &lt;span class=&quot;comment&quot;&gt;// x低 w 高&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abgr  &lt;span class=&quot;comment&quot;&gt;// r低 a 高&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样向 Texture 写数据的时候也要注意构造向量的时候，从左往右也是从低到高。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 0x04030201&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;outTexture&lt;span class=&quot;selector-class&quot;&gt;.write&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;), &lt;span class=&quot;selector-tag&quot;&gt;gid&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/metal/Metal-Feature-Set-Tables.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/metal/Metal-Feature-Set-Tables.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/47738441/passing-textures-with-uint8-component-type-to-metal-compute-shader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://stackoverflow.com/questions/47738441/passing-textures-with-uint8-component-type-to-metal-compute-shader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在照片质量评分组件 &lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment&quot;&gt;PhotoAssessment&lt;/a&gt; 项目上，有些算法的实现是使用 CPU 运行的。通过使用 MPS(Metal Performance Shader) 在 GPU 上并行计算，显著提升了性能，算法执行耗时降低了 99.9% 以上。震惊，呵呵。随着性能上成百上千倍的提升，可以在相等时间内处理更大尺寸的图片，进而提升组件的准确度和用户体验。&lt;/p&gt;
&lt;p&gt;至此，几乎所有图像处理与计算任务都交由 GPU 完成。之前利用 Sobel 算子边缘检测是使用了苹果封装好的 MPS 类，剩余的色彩分布指纹向量和饱和度均值当然都是需要自己写 Shader 的，现在终于补齐了。Metal Shading Language 与 GLSL 使用习惯和理念很相似，只不过 Metal Shader 的语法是基于 C++ 14 的。&lt;/p&gt;
&lt;p&gt;关于整个组件的实现思路，可以查阅&lt;a href=&quot;http://yulingtianxia.com/blog/2018/11/30/Photo-Assessment/&quot;&gt;『使用 Metal 和 Core ML 评价照片质量』&lt;/a&gt;。本篇文章所涉及到的 &lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment/blob/master/PhotoAssessment-Sample/Sources/PhotoAssessmentShaders.metal&quot;&gt;Shader 代码&lt;/a&gt; 也在其中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Metal" scheme="http://yulingtianxia.com/tags/Metal/"/>
    
  </entry>
  
  <entry>
    <title>使用 OCLint 自定义 MVVM 规则</title>
    <link href="http://yulingtianxia.com/blog/2019/01/27/MVVM-Rules-for-OCLint/"/>
    <id>http://yulingtianxia.com/blog/2019/01/27/MVVM-Rules-for-OCLint/</id>
    <published>2019-01-27T11:00:51.000Z</published>
    <updated>2019-01-27T10:57:06.247Z</updated>
    
    <content type="html">&lt;p&gt;最近在搞 iOS MVVM 框架，虽说是 N 年前就老生常谈的知识了，但设计模式毕竟是只一种规范，无法约束项目中所有程序员都去遵循。我做了个 OCLint 的自定义规则，对 ViewModel 运行静态检查。&lt;/p&gt;
&lt;p&gt;然而过程中踩了不少坑，OCLint 的官方 Repo 早已失效，可以使用我修改后基于 LLVM 7 的版本：&lt;a href=&quot;https://github.com/yulingtianxia/oclint/tree/llvm-7.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/oclint/tree/llvm-7.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;伸手党也可以使用我写的&lt;a href=&quot;https://github.com/yulingtianxia/oclint/releases/download/0.18.10/install-0.18.10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;脚本&lt;/a&gt;直接安装，已包含 MVVM 规则。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;编译-OCLint&quot;&gt;&lt;a href=&quot;#编译-OCLint&quot; class=&quot;headerlink&quot; title=&quot;编译 OCLint&quot;&gt;&lt;/a&gt;编译 OCLint&lt;/h2&gt;&lt;p&gt;编译 OCLint 时，会先下载 LLVM 等项目。由于 LLVM 源码废弃了在 SVN 上的版本管理，将其迁移到了 Git 上，所以目前各种版本的 OCLint 都无法编译了。而且最新版本的 OCLint 还是基于 LLVM 5 的！我从作者的 Repo 那发现有 LLVM 7 的 branch，依然无法编译，只好自己动手改了。&lt;/p&gt;
&lt;p&gt;虽然 Git 上的提交与历史 SVN 提交记录有映射，但是经过实践发现并不精准可信。编译时需要用到 llvm-project 下的 llvm，cfe 和 compile-rt，而且三个 repo 的 release 版本一定要一致。然而  LLVM 在 Git 上同一个 release 的代码却无法编译通过。更离谱的是即便 LLVM 在 GitHub 上把整个 llvm-project 作为一个 repo，依然无法将其 release 版本编译通过。&lt;/p&gt;
&lt;p&gt;算了，Git 不靠谱，还是改下 OCLint 的代码，从官网直接下以前打包好的吧。&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;llvm&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&#39;http://releases.llvm.org/7.0.0/llvm&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;clang&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&#39;http://releases.llvm.org/7.0.0/cfe&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;clang_rt&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&#39;http://releases.llvm.org/7.0.0/compiler-rt&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我把最终可以正常编译的 0.18.10 版本发了个非官方的 release 包，macOS 亲测 ok：&lt;a href=&quot;https://github.com/yulingtianxia/oclint/releases/tag/0.18.10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/oclint/releases/tag/0.18.10&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;嫌麻烦不想编译的，可以直接跑我提供的脚本来安装已经编译好的 0.18.10 版本。以前安装过 OCLint 旧版本的可以先备份下，因为会被覆盖安装。&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget --no-check-certificate -O &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt;-oclint https://github.com/yulingtianxia/oclint/releases/download/&lt;span class=&quot;number&quot;&gt;0.18&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;/&lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;0.18&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod +x &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt;-oclint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./&lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt;-oclint&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;自定义规则&quot;&gt;&lt;a href=&quot;#自定义规则&quot; class=&quot;headerlink&quot; title=&quot;自定义规则&quot;&gt;&lt;/a&gt;自定义规则&lt;/h2&gt;&lt;p&gt;网上有很多介绍如何编写自定义规则的文章，这里假设已经成功编译好 OCLint，总体流程如下。&lt;/p&gt;
&lt;h3 id=&quot;创建规则&quot;&gt;&lt;a href=&quot;#创建规则&quot; class=&quot;headerlink&quot; title=&quot;创建规则&quot;&gt;&lt;/a&gt;创建规则&lt;/h3&gt;&lt;p&gt;使用 oclint-scripts 文件夹下的 scaffoldRule 脚本创建一个新规则，并指定模板。注意规则名不需要带 “Rule”:&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;oclint-&lt;span class=&quot;keyword&quot;&gt;scripts/scaffoldRule &lt;/span&gt;MVVM -t ASTVisitor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;生成调试工程&quot;&gt;&lt;a href=&quot;#生成调试工程&quot; class=&quot;headerlink&quot; title=&quot;生成调试工程&quot;&gt;&lt;/a&gt;生成调试工程&lt;/h3&gt;&lt;p&gt;创建一个文件夹用于生成调试 Rule 的工程。我已经创建好了：&lt;a href=&quot;https://github.com/yulingtianxia/oclint/tree/llvm-7.0/oclint-xcodeproject&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/oclint/tree/llvm-7.0/oclint-xcodeproject&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行 xcode-debug.sh 脚本即可使用 oclint-rules 文件夹的内容创建一个 Xcode 工程。因为这里是想调试刚刚创建的 MVVM 规则，所以选择 oclint-rules。理论上可以修改脚本参数使用其他文件夹创建 Xcode 工程。&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#! &lt;span class=&quot;regexp&quot;&gt;/bin/&lt;/span&gt;sh -e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmake -G Xcode -D CMAKE_CXX_COMPILER=..&lt;span class=&quot;regexp&quot;&gt;/build/&lt;/span&gt;llvm-install&lt;span class=&quot;regexp&quot;&gt;/bin/&lt;/span&gt;clang++  -D CMAKE_C_COMPILER=..&lt;span class=&quot;regexp&quot;&gt;/build/&lt;/span&gt;llvm-install&lt;span class=&quot;regexp&quot;&gt;/bin/&lt;/span&gt;clang -D OCLINT_BUILD_DIR=..&lt;span class=&quot;regexp&quot;&gt;/build/&lt;/span&gt;oclint-core -D OCLINT_SOURCE_DIR=..&lt;span class=&quot;regexp&quot;&gt;/oclint-core -D OCLINT_METRICS_SOURCE_DIR=../&lt;/span&gt;oclint-metrics -D OCLINT_METRICS_BUILD_DIR=..&lt;span class=&quot;regexp&quot;&gt;/build/&lt;/span&gt;oclint-metrics -D LLVM_ROOT=..&lt;span class=&quot;regexp&quot;&gt;/build/&lt;/span&gt;llvm-install&lt;span class=&quot;regexp&quot;&gt;/ ../&lt;/span&gt;oclint-rules&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每个规则都有对应的 Scheme，选择我们自定义的 MVVMRule，添加启动参数。&lt;code&gt;-R&lt;/code&gt; 传入自定义的规则名，这里使用调试工程生成的 Debug 目录。接着传入一个随便写的测试用文件 &lt;code&gt;TestViewModel.m&lt;/code&gt;，此文件所依赖的 Framework 等环境参数也需要传入。别忘了需要把我贴的绝对路径修改成你电脑上的路径。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-R &lt;span class=&quot;regexp&quot;&gt;/Users/&lt;/span&gt;yangxiaoyu&lt;span class=&quot;regexp&quot;&gt;/Code/&lt;/span&gt;oclint&lt;span class=&quot;regexp&quot;&gt;/oclint-xcodeproject/&lt;/span&gt;rules.dl&lt;span class=&quot;regexp&quot;&gt;/Debug /&lt;/span&gt;Users&lt;span class=&quot;regexp&quot;&gt;/yangxiaoyu/&lt;/span&gt;Code&lt;span class=&quot;regexp&quot;&gt;/oclint/&lt;/span&gt;oclint-rules-test&lt;span class=&quot;regexp&quot;&gt;/OCLintTest/&lt;/span&gt;OCLintTest/TestViewModel.m  -- -x objective-c &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-isystem &lt;span class=&quot;regexp&quot;&gt;/Users/&lt;/span&gt;yangxiaoyu&lt;span class=&quot;regexp&quot;&gt;/Code/&lt;/span&gt;oclint&lt;span class=&quot;regexp&quot;&gt;/build/&lt;/span&gt;oclint-release&lt;span class=&quot;regexp&quot;&gt;/lib/&lt;/span&gt;clang&lt;span class=&quot;regexp&quot;&gt;/7.0.0/&lt;/span&gt;include&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-iframework &lt;span class=&quot;regexp&quot;&gt;/Applications/&lt;/span&gt;Xcode.app&lt;span class=&quot;regexp&quot;&gt;/Contents/&lt;/span&gt;Developer&lt;span class=&quot;regexp&quot;&gt;/Platforms/&lt;/span&gt;iPhoneSimulator.platform&lt;span class=&quot;regexp&quot;&gt;/Developer/&lt;/span&gt;SDKs&lt;span class=&quot;regexp&quot;&gt;/iPhoneSimulator.sdk/&lt;/span&gt;System&lt;span class=&quot;regexp&quot;&gt;/Library/&lt;/span&gt;Frameworks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-isystem &lt;span class=&quot;regexp&quot;&gt;/Applications/&lt;/span&gt;Xcode.app&lt;span class=&quot;regexp&quot;&gt;/Contents/&lt;/span&gt;Developer&lt;span class=&quot;regexp&quot;&gt;/Platforms/&lt;/span&gt;iPhoneSimulator.platform&lt;span class=&quot;regexp&quot;&gt;/Developer/&lt;/span&gt;SDKs&lt;span class=&quot;regexp&quot;&gt;/iPhoneSimulator.sdk/&lt;/span&gt;usr/include&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了能够调试运行，还需要在 Scheme 的 Info 下选择 Executable 为编译好的 oclint 的可执行文件。oclint-0.18.10 文件由于后缀名问题不允许被选择为 Executable，删掉后缀名的数字就可以了。这样就可以无需重新编译 OCLint 直接运行调试了！&lt;/p&gt;
&lt;h3 id=&quot;实现规则&quot;&gt;&lt;a href=&quot;#实现规则&quot; class=&quot;headerlink&quot; title=&quot;实现规则&quot;&gt;&lt;/a&gt;实现规则&lt;/h3&gt;&lt;p&gt;在 MVVM 设计模式下，我想让 ViewModel 的属性都是只读的。因为我只想通过与 Model 的数据绑定来更新 ViewModel 的值，或是在其内部更新状态。现在我需要实现一个规则来找出那些非只读属性。&lt;/p&gt;
&lt;p&gt;先找几个自带的规则例子看看，结合 &lt;a href=&quot;https://clang.llvm.org/doxygen/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clang AST 文档&lt;/a&gt;学习下各种数据结构的定义。如果不知道自己的测试代码如何下手，可以用 &lt;code&gt;clang&lt;/code&gt; 命令将测试代码转化为 &lt;a href=&quot;http://clang.llvm.org/docs/IntroductionToTheClangAST.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clang AST&lt;/a&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;clang&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-Xclang&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-ast-dump&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-fsyntax-only&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;TestViewModel&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;思路是遍历每个后缀名为 &lt;code&gt;ViewModel&lt;/code&gt; 类的 Interface 中的所有 Property，判断每个 Property 的 Attribute，如果包含 &lt;code&gt;readwrite&lt;/code&gt; 就触发 warning。提高优先级可以产生 error。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Visit ObjCImplementationDecl */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bool VisitObjCImplementationDecl(ObjCImplementationDecl *node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ObjCInterfaceDecl *&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;node&lt;/span&gt;-&amp;gt;&lt;span class=&quot;title&quot;&gt;getClassInterface&lt;/span&gt;&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bool isViewModel = &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;-&amp;gt;&lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;/span&gt;().endswith(&lt;span class=&quot;string&quot;&gt;&quot;ViewModel&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!isViewModel) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (auto property = &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;-&amp;gt;&lt;span class=&quot;title&quot;&gt;instprop_begin&lt;/span&gt;&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         propertyEnd = &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;-&amp;gt;&lt;span class=&quot;title&quot;&gt;instprop_end&lt;/span&gt;&lt;/span&gt;(); property != propertyEnd; property++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        clang::ObjCPropertyDecl *propertyDecl = (clang::ObjCPropertyDecl *)*property;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (propertyDecl-&amp;gt;getName().startswith(&lt;span class=&quot;string&quot;&gt;&quot;UI&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            addViolation(propertyDecl, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        auto attrs = propertyDecl-&amp;gt;getPropertyAttributes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bool isReadwrite = (attrs &amp;amp; ObjCPropertyDecl::PropertyAttributeKind::OBJC_PR_readwrite) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isReadwrite &amp;amp;&amp;amp; isViewModel) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            addViolation(propertyDecl, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;集成到-Xcode&quot;&gt;&lt;a href=&quot;#集成到-Xcode&quot; class=&quot;headerlink&quot; title=&quot;集成到 Xcode&quot;&gt;&lt;/a&gt;集成到 Xcode&lt;/h2&gt;&lt;p&gt;先放一张集成后的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://yulingtianxia.com/resources/QQ20190127-175054@2x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 CI 运行静态检查可以减少一部分人工 Code Review 的成本，缺点是发现问题滞后，解决问题有一定成本。而如果在本地 Xcode 运行静态检查，则可把问题扼杀在摇篮之中，缺点是占用开发机资源。&lt;/p&gt;
&lt;p&gt;如何在 Xcode 中集成 OCLint 静态检查，官方有很详细的文档，图文并茂: &lt;a href=&quot;https://oclint-docs.readthedocs.io/en/stable/guide/xcode.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://oclint-docs.readthedocs.io/en/stable/guide/xcode.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;美中不足的是 Xcode Run Script 欠一点火候，可以参考下下面我提供的脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; oclint 2&amp;gt;/dev/null; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;oclint exist&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget --no-check-certificate -O install-oclint https://github.com/yulingtianxia/oclint/releases/download/0.18.10/install-0.18.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod +x install-oclint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./install-oclint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; xcpretty 2&amp;gt;/dev/null; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;xcpretty exist&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo gem install xcpretty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; ~/.bash_profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;SRCROOT&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xcodebuild clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xcodebuild | xcpretty -r json-compilation-database --output compile_commands.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;oclint-json-compilation-database -- -report-type xcode&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h2&gt;&lt;p&gt;我只是简单的写了一个 ViewModel 的规则来跑通和验证整个流程，其实 MVVM 设计模式里还有更多的规则需要实现，比如 ViewModel 中不能引入 &lt;code&gt;UIKit&lt;/code&gt; 等。欢迎有兴趣的同学提 PR！&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://oclint.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OCLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://releases.llvm.org/download.html#7.0.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LLVM Download Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/llvm/llvm-project&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;llvm-project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://clang.llvm.org/docs/IntroductionToTheClangAST.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to the Clang AST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在搞 iOS MVVM 框架，虽说是 N 年前就老生常谈的知识了，但设计模式毕竟是只一种规范，无法约束项目中所有程序员都去遵循。我做了个 OCLint 的自定义规则，对 ViewModel 运行静态检查。&lt;/p&gt;
&lt;p&gt;然而过程中踩了不少坑，OCLint 的官方 Repo 早已失效，可以使用我修改后基于 LLVM 7 的版本：&lt;a href=&quot;https://github.com/yulingtianxia/oclint/tree/llvm-7.0&quot;&gt;https://github.com/yulingtianxia/oclint/tree/llvm-7.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;伸手党也可以使用我写的&lt;a href=&quot;https://github.com/yulingtianxia/oclint/releases/download/0.18.10/install-0.18.10&quot;&gt;脚本&lt;/a&gt;直接安装，已包含 MVVM 规则。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>DirtyWords for Xcode - 做个文明的程序员</title>
    <link href="http://yulingtianxia.com/blog/2018/12/30/Dirty-Words-for-Xcode/"/>
    <id>http://yulingtianxia.com/blog/2018/12/30/Dirty-Words-for-Xcode/</id>
    <published>2018-12-30T03:26:27.000Z</published>
    <updated>2019-01-01T13:18:43.604Z</updated>
    
    <content type="html">&lt;p&gt;开发者经常会在代码中看到各类脏话，有吐槽产品的瞎改早晚还会改回来的，有吐槽这块代码写的太烂无法直视的，或是干脆心情不好就一顿骂。公司内部的项目想必是无数天坑 f*ck 无数，连对外开源的项目也难逃一劫，比如前一段时间 &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8215217&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OpenJDK&lt;/a&gt; 就因为脏话太多火了一把。&lt;/p&gt;
&lt;p&gt;于是我做了一个 Xcode 插件来寻找代码中的脏话，将其高亮可以被选中，作为一个强提示让开发者修改。目前逻辑还只是简单替换而已，代码在这里：&lt;a href=&quot;https://github.com/yulingtianxia/DirtyWords-for-Xcode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DirtyWords-for-Xcode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了体现汉字的博大精深，瞎画了个 icon，见笑了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/DirtyWords-for-Xcode/blob/master/images/艹.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;AppStore&quot;&gt;&lt;a href=&quot;#AppStore&quot; class=&quot;headerlink&quot; title=&quot;AppStore&quot;&gt;&lt;/a&gt;AppStore&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/dirtywords-for-xcode/id1447526628?mt=12&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DirtyWords for Xcode&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;GitHub-Release&quot;&gt;&lt;a href=&quot;#GitHub-Release&quot; class=&quot;headerlink&quot; title=&quot;GitHub Release&quot;&gt;&lt;/a&gt;GitHub Release&lt;/h3&gt;&lt;p&gt;直接从 GitHub Release 页面下载最新的安装包：&lt;br&gt;&lt;a href=&quot;https://github.com/yulingtianxia/DirtyWords-for-Xcode/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/DirtyWords-for-Xcode/releases&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用方式&quot;&gt;&lt;a href=&quot;#使用方式&quot; class=&quot;headerlink&quot; title=&quot;使用方式&quot;&gt;&lt;/a&gt;使用方式&lt;/h2&gt;&lt;p&gt;用法很简单，反正目前也就这么一个功能。Editer -&amp;gt; Dirty Words -&amp;gt; Highlight&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/DirtyWords-for-Xcode/blob/master/images/usage.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;例如下图中的 “fuck” 就会被高亮，可以文明用语代之。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/DirtyWords-for-Xcode/blob/master/images/highlight.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果在 Editor 菜单中找不到的话，打开系统偏好设置 -&amp;gt; 拓展，并勾选 “DirtyWords for Xcode” 拓展项.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/DirtyWords-for-Xcode/blob/master/images/appui.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以给 DirtyWords 自定义快捷键。 Xcode &amp;gt; Preferences &amp;gt; Key Bindings &amp;gt; 搜索 “Dirty Words”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/DirtyWords-for-Xcode/blob/master/images/keybindings.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;脏词黑名单&quot;&gt;&lt;a href=&quot;#脏词黑名单&quot; class=&quot;headerlink&quot; title=&quot;脏词黑名单&quot;&gt;&lt;/a&gt;脏词黑名单&lt;/h2&gt;&lt;p&gt;脏词列表文件跟随 app 打包进去了。在拓展加载完成后，也会通过网络下载 &lt;a href=&quot;https://github.com/yulingtianxia/DirtyWords-for-Xcode/blob/master/SourceEditorExtension/dirtywords&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dirtywords&lt;/a&gt; 文件进行更新。这样方便以后调整脏词列表，也欢迎大家提 PR 补充。&lt;/p&gt;
&lt;p&gt;在收集脏词的过程中真是长了见识了，不搜不知道一搜吓一跳，哈哈。有&lt;a href=&quot;https://github.com/LDNOOBW/List-of-Dirty-Naughty-Obscene-and-Otherwise-Bad-Words&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;各国语言版的&lt;/a&gt;，还有据说是 &lt;a href=&quot;https://github.com/RobertJGabriel/Google-profanity-words&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google 版的&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;因为分词会比较耗性能，代码中有些 API 其实是触碰脏词的，比如 “UIButton” 中包含了 “butt”，所以有些脏词需要从黑名单剔除，避免误判。不过我觉得 “fuck” 这种词无论怎么组合都难洗白的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;开发者经常会在代码中看到各类脏话，有吐槽产品的瞎改早晚还会改回来的，有吐槽这块代码写的太烂无法直视的，或是干脆心情不好就一顿骂。公司内部的项目想必是无数天坑 f*ck 无数，连对外开源的项目也难逃一劫，比如前一段时间 &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8215217&quot;&gt;OpenJDK&lt;/a&gt; 就因为脏话太多火了一把。&lt;/p&gt;
&lt;p&gt;于是我做了一个 Xcode 插件来寻找代码中的脏话，将其高亮可以被选中，作为一个强提示让开发者修改。目前逻辑还只是简单替换而已，代码在这里：&lt;a href=&quot;https://github.com/yulingtianxia/DirtyWords-for-Xcode&quot;&gt;DirtyWords-for-Xcode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了体现汉字的博大精深，瞎画了个 icon，见笑了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/DirtyWords-for-Xcode/blob/master/images/艹.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用 Metal 和 Core ML 评价照片质量</title>
    <link href="http://yulingtianxia.com/blog/2018/11/30/Photo-Assessment/"/>
    <id>http://yulingtianxia.com/blog/2018/11/30/Photo-Assessment/</id>
    <published>2018-11-30T14:53:14.000Z</published>
    <updated>2018-12-23T07:33:20.335Z</updated>
    
    <content type="html">&lt;p&gt;如何评价一张照片的质量呢？&lt;/p&gt;
&lt;p&gt;用算法可以客观地评价照片质量，也可以人为主观地给照片打分，并运用机器学习来训练模型。&lt;/p&gt;
&lt;p&gt;我用 Swift 写了个 &lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;。用苹果的 Metal 跑一些算法得出客观评分，再用 Core ML 预测主观评分。得到照片评分后，就可以检测相似照片，并从中挑选最优的照片推荐给用户。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt; 中展示了图片在 NIMA 模型预测结合人脸识别的主观评分、图片的 HSB 色彩空间、以及边缘检测结果的平均值和方差。代码兼容 iOS 和 macOS。下面示例图片拍摄自胡里山炮王和西塘。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/Blog-Hexo-Source/blob/master/source/resources/PhotoAssessment/AssessmentResult1.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;img src=&quot;https://github.com/yulingtianxia/Blog-Hexo-Source/blob/master/source/resources/PhotoAssessment/AssessmentResult2.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;常规算法&quot;&gt;&lt;a href=&quot;#常规算法&quot; class=&quot;headerlink&quot; title=&quot;常规算法&quot;&gt;&lt;/a&gt;常规算法&lt;/h2&gt;&lt;p&gt;目前业界有很多衡量照片质量的维度，可以通过调整各个维度占的权重来计算照片的最终得分。常用的衡量维度都是一些图形学上的客观因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;饱和度（HSB/HSV 色彩空间中的 S）&lt;/li&gt;
&lt;li&gt;亮度（HSB/HSV 色彩空间中的 B/V）&lt;/li&gt;
&lt;li&gt;模糊度（边缘检测、二维离散傅里叶）&lt;/li&gt;
&lt;li&gt;颜色分布（线性直方图分布）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;得出的结果可能还需要设定阈值来过滤掉一些质量比较差的照片，然后做归一化和调整加权系数，最终得到照片的评分。具体权重值没有统一的参考标准，需根据业务的需求不断调试和摸索。以上列的这些标准都可以找到一些通用的算法实现，甚至用 OpenCV 分分钟的事儿。但是对于移动客户端来说，OpenCV 可能并不是个好的选择。苹果的 &lt;code&gt;Metal&lt;/code&gt; 技术更适合发挥其软硬件结合的优势，在性能和安装包上均有优势。&lt;/p&gt;
&lt;p&gt;iOS 无法直接创建 HSB 色彩空间，需要借助 &lt;code&gt;UIColor&lt;/code&gt; 等 API 将其他色彩空间颜色转换成 HSB 对应的值。于是我尝试使用 &lt;code&gt;Metal&lt;/code&gt; 实现边缘检测算法，相关代码可以在 &lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment/blob/master/PhotoAssessment-Sample/Sources/PhotoMPSProcessor.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhotoMPSProcessor.swift&lt;/a&gt; 上找到。&lt;/p&gt;
&lt;p&gt;边缘检测有很多种实现，这里我使用的是 Sobel 算子。MPS 提供了很多 对图片做卷积运算的 Filter，其中就包含 &lt;code&gt;MPSImageSobel&lt;/code&gt;。MPS 也提供了 &lt;code&gt;MPSImageLaplacian&lt;/code&gt;，不过 Laplacian 算子对噪声处理较差，实际效果不好。各种算子的原理和介绍可以参考这篇简介：&lt;a href=&quot;https://www.jianshu.com/p/2334bee37de5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数字图像 - 边缘检测原理 - Sobel, Laplace, Canny算子&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;苹果的 &lt;code&gt;MetalKit&lt;/code&gt; 拥有更简洁的 API，可以更方便地应用 &lt;code&gt;Metal&lt;/code&gt; 技术。比如加载图片可以通过 &lt;code&gt;MTKTextureLoader&lt;/code&gt; 几行代码轻松搞定。然而在实际应用中却发现是个大坑，比如 rgba16 格式的图片就会报错：”Image decoding failed”。&lt;code&gt;MTKTextureLoader&lt;/code&gt; 应该是只能加载单通道 8 bit 的图片数据，毕竟外部没有传每个像素字节数，解析时估计写死了这个值。所以还是老老实实的用 &lt;code&gt;MTLTextureDescriptor&lt;/code&gt; 描述好 Filter 的数据输入输出格式，并创建好对应的 &lt;code&gt;MTLTexture&lt;/code&gt; 吧。&lt;/p&gt;
&lt;p&gt;Sobel 算子卷积运算后的方差值可以用来检测模糊程度。下面的代码用了两个 Filter 串联起来，三种格式的数据：rgba8[w&lt;em&gt;h]-&amp;gt;r8[w&lt;/em&gt;h]-&amp;gt;r8[2*1]。也就是 RGBA 色彩空间图片转成含有边缘信息的灰度图（如下所示），最后出计算均值和方差。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/Blog-Hexo-Source/blob/master/source/resources/PhotoAssessment/SobelImageFilter.png?raw=true&quot; alt=&quot;PhotoAssessment&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@objc&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; func edgeDetect(&lt;span class=&quot;string&quot;&gt;imagePixels:&lt;/span&gt; [Int32], &lt;span class=&quot;string&quot;&gt;width:&lt;/span&gt; Int, &lt;span class=&quot;string&quot;&gt;height:&lt;/span&gt; Int, _ &lt;span class=&quot;string&quot;&gt;block:&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@escaping&lt;/span&gt; (_ &lt;span class=&quot;string&quot;&gt;mean:&lt;/span&gt; Int8, _ &lt;span class=&quot;string&quot;&gt;variance:&lt;/span&gt; Int8) -&amp;gt; Void) -&amp;gt; Void &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Make sure the current device supports MetalPerformanceShaders.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    guard MPSSupportsMTLDevice(device) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;Metal Performance Shaders not Supported on current Device&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        block(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var pixels = imagePixels&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// TextureDescriptors&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let sobelSrcTextureDescriptor = MTLTextureDescriptor.texture2DDescriptor(&lt;span class=&quot;string&quot;&gt;pixelFormat:&lt;/span&gt; .rgba8Snorm, &lt;span class=&quot;string&quot;&gt;width:&lt;/span&gt; width, &lt;span class=&quot;string&quot;&gt;height:&lt;/span&gt; height, &lt;span class=&quot;string&quot;&gt;mipmapped:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sobelSrcTextureDescriptor.usage = [.shaderWrite, .shaderRead]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let sobelDesTextureDescriptor = MTLTextureDescriptor.texture2DDescriptor(&lt;span class=&quot;string&quot;&gt;pixelFormat:&lt;/span&gt; .r8Snorm, &lt;span class=&quot;string&quot;&gt;width:&lt;/span&gt; width, &lt;span class=&quot;string&quot;&gt;height:&lt;/span&gt; height, &lt;span class=&quot;string&quot;&gt;mipmapped:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sobelDesTextureDescriptor.usage = [.shaderWrite, .shaderRead]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let varianceTextureDescriptor = MTLTextureDescriptor.texture2DDescriptor(&lt;span class=&quot;string&quot;&gt;pixelFormat:&lt;/span&gt; .r8Snorm, &lt;span class=&quot;string&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;mipmapped:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    varianceTextureDescriptor.usage = [.shaderWrite, .shaderRead]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Textures&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    guard let &lt;span class=&quot;string&quot;&gt;sobelSrcTexture:&lt;/span&gt; MTLTexture = device?.makeTexture(descriptor: sobelSrcTextureDescriptor) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;make sobelSrcTexture failed&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        block(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    guard let &lt;span class=&quot;string&quot;&gt;sobelDesTexture:&lt;/span&gt; MTLTexture = device?.makeTexture(descriptor: sobelDesTextureDescriptor) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;make sobelDesTexture failed&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        block(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    guard let &lt;span class=&quot;string&quot;&gt;varianceTexture:&lt;/span&gt; MTLTexture = device?.makeTexture(descriptor: varianceTextureDescriptor) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;make varianceTexture failed&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        block(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Fill sobelSrcTexture with pixels&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let sobelRegion = MTLRegionMake2D(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, width, height)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sobelSrcTexture.replace(&lt;span class=&quot;string&quot;&gt;region:&lt;/span&gt; sobelRegion, &lt;span class=&quot;string&quot;&gt;mipmapLevel:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;withBytes:&lt;/span&gt; &amp;amp;pixels, &lt;span class=&quot;string&quot;&gt;bytesPerRow:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; * width)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Run Image Filters&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; let commandBuffer = commandQueue?.makeCommandBuffer() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sobel?.encode(commandBuffer: commandBuffer, &lt;span class=&quot;string&quot;&gt;sourceTexture:&lt;/span&gt; sobelSrcTexture, &lt;span class=&quot;string&quot;&gt;destinationTexture:&lt;/span&gt; sobelDesTexture)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        meanAndVariance?.encode(commandBuffer: commandBuffer, &lt;span class=&quot;string&quot;&gt;sourceTexture:&lt;/span&gt; sobelDesTexture, &lt;span class=&quot;string&quot;&gt;destinationTexture:&lt;/span&gt; varianceTexture)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        commandBuffer.addCompletedHandler &amp;#123; (buffer) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var result = [Int8](repeatElement(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;count:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            let region = MTLRegionMake2D(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            varianceTexture.getBytes(&amp;amp;result, &lt;span class=&quot;string&quot;&gt;bytesPerRow:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;from:&lt;/span&gt; region, &lt;span class=&quot;string&quot;&gt;mipmapLevel:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            block(result.first!, result.last!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                let grayImage = self.imageOf(grayTexture: sobelDesTexture)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        commandBuffer.commit()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;make CommandBuffer failed&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        block(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常规做法都是利用客观评价指标来打分，可以通过设定阈值来过滤掉不符合要求的照片，但没能像大脑一样通过读懂图片的内容来评判质量。&lt;/p&gt;
&lt;h2 id=&quot;机器学习&quot;&gt;&lt;a href=&quot;#机器学习&quot; class=&quot;headerlink&quot; title=&quot;机器学习&quot;&gt;&lt;/a&gt;机器学习&lt;/h2&gt;&lt;p&gt;Google AI Blog 在 2017 年底发表过一篇博客：&lt;a href=&quot;https://ai.googleblog.com/2017/12/introducing-nima-neural-image-assessment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing NIMA: Neural Image Assessment&lt;/a&gt;。讲述了通过神经网络迁移学习来预测图片评分方法。损失函数为 EMD (earth mover’s distance)，分数分布范围是 1-10 分。先用一些已有的模型在 ImageNet 上预训练，再加个 10 节点的全连接层使用 AVA 等数据集 fune-tune。预测结果是 10 个分数的分布，而不是直接给出评分，所以可以进一步计算出期望分和方差等。&lt;/p&gt;
&lt;p&gt;虽然论文没有给出源码或者训练好的模型，但是网上可以搜到一些第三方的实现。最后使用苹果提供的 coremltools 将其他机器学习框架的模型转成苹果的 Core ML 模型。&lt;/p&gt;
&lt;p&gt;在网上搜索到了几个还算不错的开源实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idealo/image-quality-assessment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;idealo/image-quality-assessment&lt;/a&gt;：使用 Keras + Docker + AWS 实现，MobileNet 的完成度较高，提供了 aesthetic 和 technical 两种训练好的评分模型。Keras 模型可以直接转成 mlmodel。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/titu1994/neural-image-assessment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;titu1994/neural-image-assessment&lt;/a&gt;：使用 Keras 实现，提供了训练好的几种模型。效果最好的为 NASNet Mobile，loss = 0.067。Keras 模型可以直接转成 mlmodel。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/truskovskiyk/nima.pytorch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;truskovskiyk/nima.pytorch&lt;/a&gt;：使用 pytorch 实现，完成度一般，只提供了 MobileNetV2 模型（loss = 0.08）。pytorch  模型需要先转为 ONNX，然后再转成 mlmodel 格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过反复试验与对比结果，最终使用了第一个开源实现的 MobileNet。在这个过程中踩了不少坑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;机器学习涉及到的 python 库更新幅度较大，甚至连官方文档更新都严重滞后，更别提网上找的 demo 了。想跑通网上找的代码？不存在的。&lt;/li&gt;
&lt;li&gt;既然官方文档不可信，只能看代码中的注释，在摸索中写。依然会有各种各样的报错，大部分都是版本兼容问题。虽然 coremltools 官网有说兼容的最低版本，但也千万不要直接用最高版本的 Keras 和 TensorFlow。我用的 Keras 2.1.3 和 TensorFlow 1.10，亲测 OK。&lt;/li&gt;
&lt;li&gt;pytorch 转 ONNX 再转 mlmodel 更是麻烦，不得不吐槽机器学习相关的 python 库版本兼容性是真的差，API 说改就改，以为自己是 Swift 么？对于新手来说很不友好，过程几乎就是：改-&amp;gt;报错-&amp;gt;Google-&amp;gt;改-&amp;gt;继续报错。。。官网 demo 从来没跑通过，跟没有一样，不存在的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;转换模型和权重使用的 python 代码放在这里：&lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment/blob/master/ConvertMLModel/NIMA/nima.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nima.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后转化的 mlmodel 包含在 PhotoAssessment-Sample 工程中：&lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment/blob/master/PhotoAssessment-Sample/Sources/MobileNet.mlmodel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MobileNet.mlmodel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在得到 mlmodel 后，可以使用苹果的 Vision 框架加载模型，用 &lt;code&gt;VNImageRequestHandler&lt;/code&gt; 请求处理静态图片。串联上 Vision 框架的 &lt;code&gt;VNDetectFaceRectanglesRequest&lt;/code&gt; 可以顺便检测出人脸，为照片评分提供更多的参考。比如有人脸的照片可能是个加分项。&lt;/p&gt;
&lt;p&gt;PS: 这里原本还加入了神经网络识别面部表情，但是由于准确率不高且不同表情的评分难以主观衡量，所以最后去掉了。&lt;/p&gt;
&lt;p&gt;这部分的代码实现在这里： &lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment/blob/master/PhotoAssessment-Sample/Sources/PhotoMLProcessor.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhotoMLProcessor.swift&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;照片相似度&quot;&gt;&lt;a href=&quot;#照片相似度&quot; class=&quot;headerlink&quot; title=&quot;照片相似度&quot;&gt;&lt;/a&gt;照片相似度&lt;/h2&gt;&lt;p&gt;我 2016 年曾经写过一篇文章：&lt;a href=&quot;http://yulingtianxia.com/blog/2016/01/17/search-for-similar-images/&quot;&gt;如何自制一款寻找相似图片的 Mac 工具&lt;/a&gt;，原理是通过 RGBA 色彩空间和像素相对位置构造出一个特征向量，然后计算特征向量之间的余弦相似度作为照片的相似度。这种做法在处理移动客户端照片时可以进一步优化：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;手机拍照可以去掉 alpha 通道&lt;/li&gt;
&lt;li&gt;需要对照片降采样，降低计算量&lt;/li&gt;
&lt;li&gt;手机拍照的尺寸相同，宽高比因素可以去掉&lt;/li&gt;
&lt;li&gt;手机拍照具有时序性，只计算比较时间相邻的照片的相似度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;计算特征向量的实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@objc public class func fingerprintFor(imagePixels: [Int32], &lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;: Int, &lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;: Int) -&amp;gt; [UInt32: Double] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func downsample(component: UInt8) -&amp;gt; UInt32 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; UInt32(component / &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func downsample(x: Int, y: Int) -&amp;gt; UInt32 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; rowCount: Int = &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; countPerRow: Int = &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; hStep = &lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt; / countPerRow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; vStep = &lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt; / rowCount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;row&lt;/span&gt; = y / vStep&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;col&lt;/span&gt; = x / hStep&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; UInt32(&lt;span class=&quot;built_in&quot;&gt;row&lt;/span&gt; * countPerRow + &lt;span class=&quot;built_in&quot;&gt;col&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; bucket = [UInt32: UInt]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ..&amp;lt; &lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ..&amp;lt; &lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt; = imagePixels[&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt; * j + i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; r = downsample(component: &lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt;.r()) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; g = downsample(component: &lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt;.g()) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; b = downsample(component: &lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt;.b()) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; location = downsample(x: i, y: j) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; fingerprint = r | g | b | location&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bucket[fingerprint] = (bucket[fingerprint] ?? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; result: [UInt32: Double] = bucket.mapValues &amp;#123; (oldValue) -&amp;gt; Double &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; newValue = Double(oldValue) / Double(imagePixels.count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; newValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为输入都是像素数组，降采样使用 &lt;code&gt;MPSImageBilinearScale&lt;/code&gt;，实现细节类似于上面讲的边缘检测。代码在 &lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment/blob/master/PhotoAssessment-Sample/Sources/PhotoMPSProcessor.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhotoMPSProcessor.swift&lt;/a&gt; 里。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;算法可以通过调整阈值来平衡准确度与性能。比如降采样的尺寸和相似度阈值都是可以影响到最终结果和性能开销的。这里不再展开讨论。使用 Vision + Core ML 预测图片和人脸识别依然耗时较久，处理 500 张图片可能要几十秒，在生产环境下批量处理图片时需要注意。&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yulingtianxia/PhotoAssessment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/2334bee37de5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数字图像 - 边缘检测原理 - Sobel, Laplace, Canny算子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/idealo/image-quality-assessment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;idealo/image-quality-assessment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/titu1994/neural-image-assessment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;titu1994/neural-image-assessment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/truskovskiyk/nima.pytorch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;truskovskiyk/nima.pytorch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1709.05424&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NIMA: Neural Image Assessment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ai.googleblog.com/2017/12/introducing-nima-neural-image-assessment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing NIMA: Neural Image Assessment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/coreml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core ML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/apple/coremltools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;apple/coremltools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.developer.apple.com/thread/97218&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MTKTextureLoader fails for 16-big images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如何评价一张照片的质量呢？&lt;/p&gt;
&lt;p&gt;用算法可以客观地评价照片质量，也可以人为主观地给照片打分，并运用机器学习来训练模型。&lt;/p&gt;
&lt;p&gt;我用 Swift 写了个 &lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment&quot;&gt;Demo&lt;/a&gt;。用苹果的 Metal 跑一些算法得出客观评分，再用 Core ML 预测主观评分。得到照片评分后，就可以检测相似照片，并从中挑选最优的照片推荐给用户。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/PhotoAssessment&quot;&gt;Demo&lt;/a&gt; 中展示了图片在 NIMA 模型预测结合人脸识别的主观评分、图片的 HSB 色彩空间、以及边缘检测结果的平均值和方差。代码兼容 iOS 和 macOS。下面示例图片拍摄自胡里山炮王和西塘。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/Blog-Hexo-Source/blob/master/source/resources/PhotoAssessment/AssessmentResult1.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;img src=&quot;https://github.com/yulingtianxia/Blog-Hexo-Source/blob/master/source/resources/PhotoAssessment/AssessmentResult2.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Leaning" scheme="http://yulingtianxia.com/tags/Machine-Leaning/"/>
    
      <category term="Metal" scheme="http://yulingtianxia.com/tags/Metal/"/>
    
  </entry>
  
  <entry>
    <title>Class written in Swift</title>
    <link href="http://yulingtianxia.com/blog/2018/10/28/Class-written-in-Swift/"/>
    <id>http://yulingtianxia.com/blog/2018/10/28/Class-written-in-Swift/</id>
    <published>2018-10-27T17:13:46.000Z</published>
    <updated>2018-10-27T17:36:48.392Z</updated>
    
    <content type="html">&lt;p&gt;之前 &lt;a href=&quot;https://github.com/yulingtianxia/TBUIAutoTest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TBUIAutoTest&lt;/a&gt; 有个 &lt;a href=&quot;https://github.com/yulingtianxia/TBUIAutoTest/issues/7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;issue&lt;/a&gt;，我发现原因跟 Swift 有关，在解决问题时顺带稍微研究了下 Swift 编写的类。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Swift-Class-与-Ivar&quot;&gt;&lt;a href=&quot;#Swift-Class-与-Ivar&quot; class=&quot;headerlink&quot; title=&quot;Swift Class 与 Ivar&quot;&gt;&lt;/a&gt;Swift Class 与 Ivar&lt;/h2&gt;&lt;p&gt;纯粹的 Swift 类（没继承自 &lt;code&gt;NSObject&lt;/code&gt;）在 Runtime 上有很大的坑。虽然 Runtime 的接口都能调用，但因为 &lt;code&gt;Class&lt;/code&gt; 实现和构成有很大差异，所以需要谨慎对待。比如 Swift 没有 &lt;code&gt;Ivar&lt;/code&gt; 的概念，相应的 Runtime 接口也只是尽可能的封装，不保证返回的内容正确。Swift 将成员变量和属性统一起来，并统一存储和管理。&lt;/p&gt;
&lt;p&gt;其实如果 Swift 类的属性类型是继承自 &lt;code&gt;NSObject&lt;/code&gt; 的话，还是可以通过 &lt;code&gt;Ivar&lt;/code&gt; 相关 Runtime 函数获取到内容的。这也是 &lt;a href=&quot;https://github.com/yulingtianxia/TBUIAutoTest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TBUIAutoTest&lt;/a&gt; 能够兼容 Swift 的原因。有些 Objective-C 类型在 Swift 有对应的替代，比如 &lt;code&gt;NSString&lt;/code&gt; 与 &lt;code&gt;String&lt;/code&gt;。编译器会自动转换接口和类型，但在这些类型上的属性获取 Ivar 依然有些问题。比如使用 &lt;a href=&quot;https://github.com/opensource-apple/objc4/blob/881b875d7aada4cbfc154e022e1297c9526de747/runtime/objc-class.mm#L360&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;object_getIvar&lt;/a&gt; 就会 &lt;code&gt;BAD_ACCESS&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Swift-Class-Runtime-Name&quot;&gt;&lt;a href=&quot;#Swift-Class-Runtime-Name&quot; class=&quot;headerlink&quot; title=&quot;Swift Class Runtime Name&quot;&gt;&lt;/a&gt;Swift Class Runtime Name&lt;/h2&gt;&lt;p&gt;在比较早的 Swift 版本，debug 时我们看到的 Swift 的类名都是一串很长很乱的字符串，其实那是经过 Objective-C Runtime Mangle 后的产物。大概的规则如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前缀是 “_Tt”&lt;/li&gt;
&lt;li&gt;如果是 Class，还会再加一个 “C”，Protocol 会跟着一个 “P”&lt;/li&gt;
&lt;li&gt;Module名连着类名，并在每个名字前面标记字符串长度。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如今 Swift 正酝酿着一套新的 Mangle 规则，但要等 Objective-C Runtime 那边实现好新的 Demangle 后才能实施！有兴趣可以看下 &lt;a href=&quot;https://github.com/apple/swift/blob/1982d024a93b3246edecf6bf42530a835ffc479f/lib/AST/ASTMangler.cpp#L419&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mangleObjCRuntimeName&lt;/a&gt; 函数的实现。&lt;/p&gt;
&lt;p&gt;现在 lldb 中打印 Swift 类型更加友好了，但是底层还是会生成一个 Runtime Name。在 &lt;code&gt;$(SWIFT_MODULE_NAME)-Swift.h&lt;/code&gt; 文件中可以看到 Swift AST 对应 Objective-C 的头文件，里面就有 Swift Runtime Name。Swift 源码里有个 &lt;a href=&quot;https://github.com/apple/swift/blob/master/lib/PrintAsObjC/PrintAsObjC.cpp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PrintAsObjC.cpp&lt;/a&gt; 文件，它的作用就是生成 Swift AST 头文件。&lt;/p&gt;
&lt;p&gt;举个栗子：使用 &lt;code&gt;NSClassFromString(@&amp;quot;_TtC19ClassWrittenInSwift11AppDelegate&amp;quot;)&lt;/code&gt; 获取到的类是 &lt;code&gt;ClassWrittenInSwift&lt;/code&gt; Module 中的 &lt;code&gt;AppDelegate&lt;/code&gt; 类。&lt;/p&gt;
&lt;h2 id=&quot;Swift-Class-Check&quot;&gt;&lt;a href=&quot;#Swift-Class-Check&quot; class=&quot;headerlink&quot; title=&quot;Swift Class Check&quot;&gt;&lt;/a&gt;Swift Class Check&lt;/h2&gt;&lt;p&gt;如何判断一个类是否用 Swift 写的呢？Runtime 中 &lt;code&gt;Class&lt;/code&gt; 是有标志位的，只是没对外暴露接口而已。映射到 Runtime 源码中 &lt;code&gt;Class&lt;/code&gt; 的内存模型，将标志位取出即可，关键代码如下。&lt;/p&gt;
&lt;figure class=&quot;highlight gauss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; yxy_objc_object &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    yxy_isa_t isa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// class is a Swift class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; FAST_IS_SWIFT         (1UL&amp;lt;&amp;lt;0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; yxy_class_data_bits_t &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Values are the FAST_ flags above.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uintptr_t bits;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; getBit(uintptr_t bit)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bits &amp;amp; bit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; isSwift() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getBit(FAST_IS_SWIFT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; yxy_objc_class : yxy_objc_object &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Class ISA;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class superclass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    yxy_cache_t cache;             &lt;span class=&quot;comment&quot;&gt;// formerly cache pointer and vtable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    yxy_class_data_bits_t bits;    &lt;span class=&quot;comment&quot;&gt;// class_rw_t * plus custom rr/alloc flags&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;BOOL&lt;/span&gt; isWrittenInSwift(Class &lt;span class=&quot;keyword&quot;&gt;cls&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;cls&lt;/span&gt; || !object_isClass(&lt;span class=&quot;keyword&quot;&gt;cls&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; NO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; yxy_objc_class *objc_cls = (__bridge &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; yxy_objc_class *)&lt;span class=&quot;keyword&quot;&gt;cls&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; isSwift = objc_cls-&amp;gt;bits.isSwift();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; isSwift;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现很简单，封装了下：&lt;a href=&quot;https://github.com/yulingtianxia/ClassWrittenInSwift/blob/master/ClassWrittenInSwiftKit/Source/ClassWrittenInSwift.mm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ClassWrittenInSwift&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;哎，自己的 Repo 真是越来越水了。&lt;/p&gt;
&lt;h2 id=&quot;Swift-Class-Lazy-Property&quot;&gt;&lt;a href=&quot;#Swift-Class-Lazy-Property&quot; class=&quot;headerlink&quot; title=&quot;Swift Class Lazy Property&quot;&gt;&lt;/a&gt;Swift Class Lazy Property&lt;/h2&gt;&lt;p&gt;Swift 类的 &lt;code&gt;lazy&lt;/code&gt; 属性的存储比较特殊，毕竟是懒加载。它的属性名有个后缀 “.storage”，所以在 Runtime 里获取属性名时要注意，使用时是要过滤掉后缀的。&lt;/p&gt;
&lt;p&gt;写了个简单的接口获取 Swift 类中的 &lt;code&gt;lazy&lt;/code&gt; 属性名列表，代码同样放在 &lt;a href=&quot;https://github.com/yulingtianxia/ClassWrittenInSwift/blob/master/ClassWrittenInSwiftKit/Source/ClassWrittenInSwift.mm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ClassWrittenInSwift&lt;/a&gt; 里面了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前 &lt;a href=&quot;https://github.com/yulingtianxia/TBUIAutoTest&quot;&gt;TBUIAutoTest&lt;/a&gt; 有个 &lt;a href=&quot;https://github.com/yulingtianxia/TBUIAutoTest/issues/7&quot;&gt;issue&lt;/a&gt;，我发现原因跟 Swift 有关，在解决问题时顺带稍微研究了下 Swift 编写的类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://yulingtianxia.com/tags/Swift/"/>
    
      <category term="Runtime" scheme="http://yulingtianxia.com/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 虚假 Star 净网行动</title>
    <link href="http://yulingtianxia.com/blog/2018/09/16/Fuck-Fake-GitHub-Stars/"/>
    <id>http://yulingtianxia.com/blog/2018/09/16/Fuck-Fake-GitHub-Stars/</id>
    <published>2018-09-16T08:20:55.000Z</published>
    <updated>2018-09-17T15:18:38.377Z</updated>
    
    <content type="html">&lt;p&gt;前一阵子看到一篇文章 &lt;a href=&quot;https://juejin.im/post/5b8c9310f265da4361530560&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《石锤 github 买 star 行为》&lt;/a&gt;，第一反应是很震惊。是真的很震惊，因为文章中提到的 CocoaDebug 我也 star 了，没想到竟然涉嫌购买 star 炒作，蒙蔽了好多人的双眼。没错，我就是跟风 star，看别的大神 star 啥就顺手 star。 也有的人看 Trending 上啥火顺手 star，甚至用脚本自动 star。&lt;/p&gt;
&lt;p&gt;这条黑产背后到底隐藏着什么？GitHub 上还有哪些大笨蛋也曾靠买 Star 蒙蔽了大神们的双眼呢？我写了个简单的程序用于挖掘基于 Star 的关系链，并进行聚类分析。然后从 CocoaDebug 这个 repo 入手，沿着关系链一层层深挖下去。&lt;/p&gt;
&lt;p&gt;用数据说话，结果一定也会让你大开眼界。正义可能会迟到，但绝不会缺席！&lt;/p&gt;
&lt;p&gt;项目源码：&lt;a href=&quot;https://github.com/yulingtianxia/FuckFakeGitHubStars&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FuckFakeGitHubStars&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用 GitHub 的 API 获取 repo 有哪些用户 star 了，然后再看看这些用户都 star 了哪些 repo。&lt;/li&gt;
&lt;li&gt;将 star 行为相似的用户和 repo 聚类&lt;/li&gt;
&lt;li&gt;疑似黑产的用户集合一般数量较多，且每个用户 star 的 repo 并不多。将这种集合纳入黑名单。（肯定会有误判，但影响不大）&lt;/li&gt;
&lt;li&gt;计算 repo 的 star 中黑名单用户占比。&lt;/li&gt;
&lt;li&gt;继续遍历黑名单中的用户，挖掘下一层关系链，揪出更多花钱买 star 的 repo。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;爆料&quot;&gt;&lt;a href=&quot;#爆料&quot; class=&quot;headerlink&quot; title=&quot;爆料&quot;&gt;&lt;/a&gt;爆料&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;郑重声明&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;结果不一定准确，仅做参考，毕竟黑名单有误判。&lt;/li&gt;
&lt;li&gt;买 Star 都只是推测，没有交易记录就没有实锤。本文仅是分析 GitHub 社区这一有趣而又奇妙的的现象。&lt;/li&gt;
&lt;li&gt;不排除有人恶意给别人的 Repo 买 Star 的情况，也说不定有人注册了一堆账号喜欢没事给别人 Star 呢！&lt;/li&gt;
&lt;li&gt;由于脚本是广度优先搜索，每个 batch 跑完结果都会更准确。跑完整个 GitHub 需要巨长的时间。跑的 batch 越多，有些 Repo 就越能露出马脚。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于数据量实在是太大了，而且也受限于 GitHub API 请求频率的限制和 CPU 计算的耗时，在上面思路中的第五步中只运行了一部分。当然，全部深挖都只是时间问题，无奈数据量级的恐怖，先把阶段性成果输出下。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从 CocoaDebug 入手挖掘出的疑似黑产账号达到了900左右。&lt;/li&gt;
&lt;li&gt;CocoaDebug 有 30% 左右的 Star 可能是买的。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 &lt;a href=&quot;https://juejin.im/post/5b8c9310f265da4361530560&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《石锤 github 买 star 行为》&lt;/a&gt; 文章中跟 CocoaDebug 一起被揭露的『难兄难弟』所购买的 Star 更为夸张，超过了半数：&lt;/p&gt;
 &lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;repo owner&lt;span class=&quot;regexp&quot;&gt;/name: baoleiji/&lt;/span&gt;QilinBaoleiji stargazer &lt;span class=&quot;string&quot;&gt;num:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1447&lt;/span&gt; black &lt;span class=&quot;string&quot;&gt;percent:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0.5770559778852798&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;repo owner&lt;span class=&quot;regexp&quot;&gt;/name: 3348375016/&lt;/span&gt;ITSecrets stargazer &lt;span class=&quot;string&quot;&gt;num:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1589&lt;/span&gt; black &lt;span class=&quot;string&quot;&gt;percent:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0.5173064820641913&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 当然，再深挖跑一轮数据可能会发现这个比例更大。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jinxiansen 的 SwiftServerSide-Vapor 曾在 8 月 5 日登上了 Trending，当日收获 104个 Star。如果我没记错的话，mattt 大神也 star 并 follow 过（现在发现又取关了，果然即便蒙蔽了大神的双眼那也只是暂时的事儿）。神奇的是，这个 repo 中有 105 个 Star 疑似来自黑产。附上&lt;a href=&quot;https://www.v2ex.com/t/471479&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇 V 站的贴子更有趣&lt;/a&gt;。这哥们写的另外一个 JHUD 也是同理。&lt;/p&gt;
 &lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;repo owner&lt;span class=&quot;regexp&quot;&gt;/name: Jinxiansen/&lt;/span&gt;SwiftServerSide-Vapor stargazer &lt;span class=&quot;string&quot;&gt;num:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;583&lt;/span&gt; black &lt;span class=&quot;string&quot;&gt;percent:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0.18010291595197256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UCodeUStory 的 S-MVP，你慢慢涨 Star 就能逃得了么？&lt;/p&gt;
 &lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;repo owner&lt;span class=&quot;regexp&quot;&gt;/name: UCodeUStory/&lt;/span&gt;S-MVP stargazer &lt;span class=&quot;string&quot;&gt;num:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1103&lt;/span&gt; black &lt;span class=&quot;string&quot;&gt;percent:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0.28014505893019037&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;买一个 Star 到底要多少钱啊，有的 repo 还不到一百个 Star，占比还不低呢，也不多买点，真抠啊（我甚至怀疑是黑产为了伪装自己的账号，随意 star 了一些没花钱买 star 的库）：&lt;/p&gt;
 &lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;repo owner&lt;span class=&quot;regexp&quot;&gt;/name: jianhaod/&lt;/span&gt;Kaggle stargazer &lt;span class=&quot;string&quot;&gt;num:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;37&lt;/span&gt; black &lt;span class=&quot;string&quot;&gt;percent:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0.5945945945945946&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;repo owner&lt;span class=&quot;regexp&quot;&gt;/name: whsgzcy/&lt;/span&gt;DEMOS_TO_MySelf_Android stargazer &lt;span class=&quot;string&quot;&gt;num:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;63&lt;/span&gt; black &lt;span class=&quot;string&quot;&gt;percent:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0.4603174603174603&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;搞区块链的？7月7日那天涨了 246 个 star，一算比例还真差不多：&lt;/p&gt;
 &lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;repo owner&lt;span class=&quot;regexp&quot;&gt;/name: DeuroIO/&lt;/span&gt;erc20-ico-onchain-technical-analysis stargazer &lt;span class=&quot;string&quot;&gt;num:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;512&lt;/span&gt; black &lt;span class=&quot;string&quot;&gt;percent:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0.427734375&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;仿豆瓣的、仿知乎的。MelonRice 还有个放虎扑的，我脚本还没扫到它，手动点进去一看 star 的人，还是那尿性，也都 star 了前面那位 Jinxiansen。&lt;/p&gt;
 &lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;repo owner&lt;span class=&quot;regexp&quot;&gt;/name: jianxiaoBai/&lt;/span&gt;douban stargazer &lt;span class=&quot;string&quot;&gt;num:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;288&lt;/span&gt; black &lt;span class=&quot;string&quot;&gt;percent:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0.3715277777777778&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;repo owner&lt;span class=&quot;regexp&quot;&gt;/name: MelonRice/&lt;/span&gt;zhihudaily_flutter stargazer &lt;span class=&quot;string&quot;&gt;num:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;163&lt;/span&gt; black &lt;span class=&quot;string&quot;&gt;percent:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0.2085889570552147&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为找出来的数据太多了，这里就不逐个去看了，这里只是随便拎几个出来。&lt;/p&gt;
&lt;p&gt;要是 GitHub API 没有请求限频，再搞个云服务器成天跑，再做个前端页面支持查找，就完美了。要是家里有矿，说不定还能上 GPU 搞神经网络在线学习？！&lt;/p&gt;
&lt;p&gt;我好担心被这些人报复啊。&lt;/p&gt;
&lt;h2 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h2&gt;&lt;p&gt;直接看 &lt;a href=&quot;https://github.com/yulingtianxia/FuckFakeGitHubStars/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;README.md&lt;/a&gt; 吧。&lt;/p&gt;
&lt;p&gt;因为 GitHub API 用到的 token 没有上传，所以需要填你自己的 token 才可以抓数据。而且我只上传了部分数据，生成的 json 文件太大了，又懒得用数据库。&lt;/p&gt;
&lt;p&gt;最终的可读性比较强的信息输出在 log 里，没有上传。有兴趣的可以自己跑下。&lt;/p&gt;
&lt;h2 id=&quot;技术实现&quot;&gt;&lt;a href=&quot;#技术实现&quot; class=&quot;headerlink&quot; title=&quot;技术实现&quot;&gt;&lt;/a&gt;技术实现&lt;/h2&gt;&lt;p&gt;技术栈就是 python3 + GraphQL。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;REPOSITORY_STARGAZERS.json&lt;/code&gt; 存储了 repo 有哪些用户 star 了。&lt;code&gt;USER_STAR_REPOSITORIES.json&lt;/code&gt; 存储了用户 star 了哪些 repo。repo 或用户都是一个 node，都有唯一的 node ID。这样就构成了一张有向图。再根据节点的出度或入度集合将节点使用 Jaccard 相似度进行聚类。节点的详细信息以及与其他节点的相似度信息都保存在 &lt;code&gt;NODE_ID_CONTENT.json&lt;/code&gt; 中。整理出的疑似黑产黑名单用户保存在 &lt;code&gt;BLACK_LIST.json&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最初的设想是在这张巨大的有向图中广度优先遍历，层层扒皮。后来迫于面对现实，就只跑了两层，先有个阶段性结论。可以分析单个 repo star 的黑产占比，想把全网数据一网打尽需要耗费更多的时间成本。&lt;/p&gt;
&lt;p&gt;本项目用到的技术都是现学现卖，纯粹是玩票性质，代码烂的一逼，求轻喷。某大神都深入 Python 底层实现原理开课赚钱了，我还在这边查语法边写垃圾代码，差距太大了哎！&lt;/p&gt;
&lt;h2 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h2&gt;&lt;p&gt;愿以后 GitHub 能够清静些，虽然我大清自有国情在，但也别让一些别有用心之人一条臭鱼坏了一坨粥。&lt;/p&gt;
&lt;p&gt;写这篇文章的时候，强台风『山竹』还在蹂躏着深圳。&lt;/p&gt;
&lt;p&gt;就做了一点微小的工作，谢谢大家。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前一阵子看到一篇文章 &lt;a href=&quot;https://juejin.im/post/5b8c9310f265da4361530560&quot;&gt;《石锤 github 买 star 行为》&lt;/a&gt;，第一反应是很震惊。是真的很震惊，因为文章中提到的 CocoaDebug 我也 star 了，没想到竟然涉嫌购买 star 炒作，蒙蔽了好多人的双眼。没错，我就是跟风 star，看别的大神 star 啥就顺手 star。 也有的人看 Trending 上啥火顺手 star，甚至用脚本自动 star。&lt;/p&gt;
&lt;p&gt;这条黑产背后到底隐藏着什么？GitHub 上还有哪些大笨蛋也曾靠买 Star 蒙蔽了大神们的双眼呢？我写了个简单的程序用于挖掘基于 Star 的关系链，并进行聚类分析。然后从 CocoaDebug 这个 repo 入手，沿着关系链一层层深挖下去。&lt;/p&gt;
&lt;p&gt;用数据说话，结果一定也会让你大开眼界。正义可能会迟到，但绝不会缺席！&lt;/p&gt;
&lt;p&gt;项目源码：&lt;a href=&quot;https://github.com/yulingtianxia/FuckFakeGitHubStars&quot;&gt;FuckFakeGitHubStars&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="http://yulingtianxia.com/tags/GitHub/"/>
    
      <category term="瞎折腾" scheme="http://yulingtianxia.com/tags/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>iOS 自动化测试标签生成工具接入指南</title>
    <link href="http://yulingtianxia.com/blog/2018/08/13/TBUIAutoTest-Usage/"/>
    <id>http://yulingtianxia.com/blog/2018/08/13/TBUIAutoTest-Usage/</id>
    <published>2018-08-12T16:24:45.000Z</published>
    <updated>2018-09-15T08:28:13.645Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/TBUIAutoTest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TBUIAutoTest&lt;/a&gt; 可以帮开发人员生成UI 控件的标签，便于自动化测试。只需一行代码或一个配置，几乎所有的 iOS Native UI 都会在运行时生成一个页面内唯一且不变的标签。不仅节省了开发人员手动为每个 UI 控件加标签的时间，也节省了测试人员与开发人员的沟通成本。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h2&gt;&lt;p&gt;目前已经有 QQ、今日头条、兴趣部落、NOW直播等几十款 App 接入 &lt;a href=&quot;https://github.com/yulingtianxia/TBUIAutoTest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TBUIAutoTest&lt;/a&gt;。阿里系自动化测试开源框架 &lt;a href=&quot;https://github.com/macacajs/iosHookViewId&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Macaca&lt;/a&gt; 也在使用此方案，服务阿里多款 App。&lt;/p&gt;
&lt;p&gt;以往的工作流程是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;测试同学梳理出需要加标签的 UI 控件，通过截图标注给开发同学。&lt;/li&gt;
&lt;li&gt;开发同学按照标注，给相应的 UI 控件手写代码添加标签。（花时间起唯一的标签名，增加安装包体积）&lt;/li&gt;
&lt;li&gt;测试同学使用工具抓取控件树，查看控件标签，编写脚本。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果使用 &lt;a href=&quot;https://github.com/yulingtianxia/TBUIAutoTest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TBUIAutoTest&lt;/a&gt;，只需要简化成一个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;测试同学使用工具抓取控件树，查看控件标签，编写脚本。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而且几乎是&lt;strong&gt;一劳永逸&lt;/strong&gt;的，后续新增的代码也会在运行时生成标签，&lt;strong&gt;以不变应万变&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;近些年苹果的自动化测试框架经历过一些变化，但是始终是使用无障碍化相关的 API 来获取控件树和标签。&lt;/p&gt;
&lt;p&gt;实现的思路和原理：&lt;a href=&quot;http://yulingtianxia.com/blog/2016/03/28/Add-UITest-Label-for-UIAutomation/&quot;&gt;为 UIAutomation 添加自动化测试标签的探索&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;集成方式&quot;&gt;&lt;a href=&quot;#集成方式&quot; class=&quot;headerlink&quot; title=&quot;集成方式&quot;&gt;&lt;/a&gt;集成方式&lt;/h2&gt;&lt;h3 id=&quot;手动拖拽文件&quot;&gt;&lt;a href=&quot;#手动拖拽文件&quot; class=&quot;headerlink&quot; title=&quot;手动拖拽文件&quot;&gt;&lt;/a&gt;手动拖拽文件&lt;/h3&gt;&lt;p&gt;将 TBUIAutoTest 文件夹内的所有文件加入到工程中即可。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TB&lt;span class=&quot;built_in&quot;&gt;UIAutoTest&lt;/span&gt;.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TB&lt;span class=&quot;built_in&quot;&gt;UIAutoTest&lt;/span&gt;.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt;+TB&lt;span class=&quot;built_in&quot;&gt;UIAutoTest&lt;/span&gt;.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt;+TB&lt;span class=&quot;built_in&quot;&gt;UIAutoTest&lt;/span&gt;.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIResponder&lt;/span&gt;+TB&lt;span class=&quot;built_in&quot;&gt;UIAutoTest&lt;/span&gt;.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIResponder&lt;/span&gt;+TB&lt;span class=&quot;built_in&quot;&gt;UIAutoTest&lt;/span&gt;.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt;+TB&lt;span class=&quot;built_in&quot;&gt;UIAutoTest&lt;/span&gt;.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt;+TB&lt;span class=&quot;built_in&quot;&gt;UIAutoTest&lt;/span&gt;.m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;CocoaPods&quot;&gt;&lt;a href=&quot;#CocoaPods&quot; class=&quot;headerlink&quot; title=&quot;CocoaPods&quot;&gt;&lt;/a&gt;CocoaPods&lt;/h3&gt;&lt;p&gt;首先要安装 CocoaPods：&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gem &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; cocoapods&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;Podfile&lt;/code&gt; 中添加 TBUIAutoTest。需要将 “MyApp” 替换成自己的名字：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;source &lt;span class=&quot;string&quot;&gt;&#39;https://github.com/CocoaPods/Specs.git&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;platform &lt;span class=&quot;symbol&quot;&gt;:ios&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;use_frameworks!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target &lt;span class=&quot;string&quot;&gt;&#39;MyApp&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pod &lt;span class=&quot;string&quot;&gt;&#39;TBUIAutoTest&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后需要运行下面的命令行安装下：&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Carthage&quot;&gt;&lt;a href=&quot;#Carthage&quot; class=&quot;headerlink&quot; title=&quot;Carthage&quot;&gt;&lt;/a&gt;Carthage&lt;/h3&gt;&lt;p&gt;首先要通过 homebrew 安装 Carthage:&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;brew &lt;/span&gt;update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;brew &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;install &lt;/span&gt;carthage&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在 &lt;code&gt;Cartfile&lt;/code&gt; 文件中添加&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;github&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;yulingtianxia/TBUIAutoTest&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行 &lt;code&gt;carthage update&lt;/code&gt; 命令来获取 &lt;code&gt;TBUIAutoTest.framework&lt;/code&gt;，将其拖拽到工程中使用即可。&lt;/p&gt;
&lt;h2 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kAutoTestUITurnOnKey&lt;/code&gt; ：是否生成 UI 标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kAutoTestUILongPressKey&lt;/code&gt; ：是否开启长按弹窗显示 UI 标签&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/TBUIAutoTest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TBUIAutoTest&lt;/a&gt; 会在 &lt;code&gt;+ load&lt;/code&gt; 方法中从 &lt;code&gt;NSUserDefaults&lt;/code&gt; 中读取 &lt;code&gt;kAutoTestUITurnOnKey&lt;/code&gt; 和 &lt;code&gt;kAutoTestUILongPressKey&lt;/code&gt; 的值。所以在设置这两个 Key 之后，一般需要下次启动 App 才生效。这里推荐拉一条自动化测试专用分支，通过宏控制在 App 启动更早的时机设置这两个 Key。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; kAutoTest&lt;span class=&quot;built_in&quot;&gt;UITurnOnKey&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; kAutoTest&lt;span class=&quot;built_in&quot;&gt;UILongPressKey&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt;.standardUserDefaults setBool:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; forKey:kAutoTest&lt;span class=&quot;built_in&quot;&gt;UITurnOnKey&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;NSUserDefaults&lt;/span&gt;.standardUserDefaults setBool:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; forKey:kAutoTest&lt;span class=&quot;built_in&quot;&gt;UILongPressKey&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h2&gt;&lt;p&gt;系统一些自带的 UI 控件的 &lt;code&gt;isAccessibilityElement&lt;/code&gt; 属性默认是 &lt;code&gt;YES&lt;/code&gt;，但是如果想让自定义的 UI 控件能够被捕获，需要手动将其设为 &lt;code&gt;YES&lt;/code&gt;。除此之外还有一些容器控件之间的嵌套场景，需要在容器类中实现 &lt;code&gt;UIAccessibilityContainer&lt;/code&gt;，这样才能捕获到容器控件内的子视图。最简单的一种实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#pragma&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;UIAccessibilityContainer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#ifdef&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;AUTO_TEST_ENV&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt;(BOOL)&lt;span class=&quot;selector-tag&quot;&gt;isAccessibilityElement&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return NO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (NSInteger)&lt;span class=&quot;selector-tag&quot;&gt;accessibilityElementCount&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;selector-attr&quot;&gt;[[self subviews]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;count&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (id)&lt;span class=&quot;selector-tag&quot;&gt;accessibilityElementAtIndex&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(NSInteger)index&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;selector-attr&quot;&gt;[[self subviews]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;objectAtIndex&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:index&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (NSInteger)&lt;span class=&quot;selector-tag&quot;&gt;indexOfAccessibilityElement&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(id)element&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;selector-attr&quot;&gt;[[self subviews]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;indexOfObject&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:element&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于那种绘制上去的 UI，但非使用原生 UI 控件的场景，就需要自己创建 &lt;code&gt;UIAccessibilityElement&lt;/code&gt; 对象，并手动设置标签了。这部分其实都是 App 无障碍化的知识，具体细节可以参考苹果官方文档：&lt;a href=&quot;https://developer.apple.com/documentation/uikit/accessibility/uiaccessibilitycontainer?language=objc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/documentation/uikit/accessibility/uiaccessibilitycontainer?language=objc&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/TBUIAutoTest&quot;&gt;TBUIAutoTest&lt;/a&gt; 可以帮开发人员生成UI 控件的标签，便于自动化测试。只需一行代码或一个配置，几乎所有的 iOS Native UI 都会在运行时生成一个页面内唯一且不变的标签。不仅节省了开发人员手动为每个 UI 控件加标签的时间，也节省了测试人员与开发人员的沟通成本。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MessageThrottle Safety</title>
    <link href="http://yulingtianxia.com/blog/2018/07/31/MessageThrottle-Safety/"/>
    <id>http://yulingtianxia.com/blog/2018/07/31/MessageThrottle-Safety/</id>
    <published>2018-07-30T16:50:24.000Z</published>
    <updated>2018-09-15T08:28:13.897Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 是我开发的Objective-C 节流限频组件，其原理基于 Hook 消息转发流程，在运行时应用了一套节流限频的规则。&lt;/p&gt;
&lt;p&gt;新版本再次提升性能的同时，确保了 hook 流程、多线程操作、规则管理的安全性，支持了持久化规则，并对 KVO 等场景进行兼容。&lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 的代码测试覆盖率在 80% 以上，在编写测试用例的同时也发现了一些安全隐患，有些甚至是业界知名开源库都没有发现和解决的。&lt;/p&gt;
&lt;p&gt;本文是关于 &lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 的第四篇文章。前三篇如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/11/05/Objective-C-Message-Throttle-and-Debounce/&quot;&gt;Objective-C Message Throttle and Debounce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/12/15/Associated-Object-and-Dealloc/&quot;&gt;Associated Object 与 Dealloc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2018/05/31/MessageThrottle-Performance-Benchmark-and-Optimization/&quot;&gt;MessageThrottle Performance Benchmark and Optimization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;主要类的关系如下图，虚线为 &lt;code&gt;weak&lt;/code&gt; 属性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://yulingtianxia.com/resources/MessageThrottle1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;继承链消息转发缺陷&quot;&gt;&lt;a href=&quot;#继承链消息转发缺陷&quot; class=&quot;headerlink&quot; title=&quot;继承链消息转发缺陷&quot;&gt;&lt;/a&gt;继承链消息转发缺陷&lt;/h2&gt;&lt;p&gt;由于是在消息转发流程搞事情，把所有消息都经由一个统一的路由函数 &lt;code&gt;mt_forwardInvocation&lt;/code&gt; 进行处理。子类和父类不能同时 Hook 同一个方法，原因是如果子类的方法调用了父类方法，那么父类的方法调用走到统一路由函数 &lt;code&gt;mt_forwardInvocation&lt;/code&gt; 的时候，『调用父类方法』这一信息早已经丢失了，接着会转发给子类的方法实现，从而造成死循环。最后 crash。&lt;/p&gt;
&lt;p&gt;解决方法就是在 Hook 之前判断关系链，如果已经有子类或者父类被 Hook 了就报错，无法继续 Hook。&lt;/p&gt;
&lt;p&gt;在消息转发流程将所有消息通过统一的路由函数处理并转发这件事的缺陷就是丢失了类的信息，因为全都『统一』到同一个函数处理了，而不是在各自类的内部处理。诸如 Aspects 等业界知名开源库也有此问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://yulingtianxia.com/resources/MessageThrottle2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;兼容-KVO、其他-Hook-框架&quot;&gt;&lt;a href=&quot;#兼容-KVO、其他-Hook-框架&quot; class=&quot;headerlink&quot; title=&quot;兼容 KVO、其他 Hook 框架&quot;&gt;&lt;/a&gt;兼容 KVO、其他 Hook 框架&lt;/h2&gt;&lt;p&gt;首先先了解下 KVO 的原理：当监听类型为 &lt;code&gt;A&lt;/code&gt; 的对象 &lt;code&gt;a&lt;/code&gt; 时，会动态创建 &lt;code&gt;A&lt;/code&gt; 的子类 &lt;code&gt;NSKVONotifying_A&lt;/code&gt;，并把 &lt;code&gt;a&lt;/code&gt; 的类型改成 &lt;code&gt;NSKVONotifying_A&lt;/code&gt;。&lt;code&gt;NSKVONotifying_A&lt;/code&gt; 会覆写监听的属性村粗方法，以及 &lt;code&gt;class&lt;/code&gt; 方法，让外部以为 &lt;code&gt;a&lt;/code&gt; 的类型依然是 &lt;code&gt;A&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;其余开源框架在 hook 一个对象的时候，也是通过加前缀或后缀动态创建子类，然后覆写相关方法。继承链总有先来后到，这时候问题就来了。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;class&lt;/code&gt; 方法获取到的类型可能是被『篡改过』的类，使用 &lt;code&gt;objc_getClass()&lt;/code&gt; 函数获取到的才是真正的类。KVO 的做法是在用 &lt;code&gt;objc_getClass()&lt;/code&gt; 获取到真正的类之后，直接创建带 &lt;code&gt;NSKVONotifying_&lt;/code&gt; 前缀的子类。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://yulingtianxia.com/resources/MessageThrottle3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图所示，MessageThrottle 在 hook 一个对象的时候也会动态创建带前缀 &lt;code&gt;MTSubclassPrefix&lt;/code&gt; 的子类，但是不会像 KVO 那样无脑创建，而是先判断通过 &lt;code&gt;class&lt;/code&gt; 与 &lt;code&gt;objc_getClass()&lt;/code&gt; 获取到的类是否相同。如果不同，则说明已经有现成的子类了，直接在 &lt;code&gt;objc_getClass()&lt;/code&gt; 获取的类中 hook 就行了。这里是借鉴了 Aspects 的做法。&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Class cls&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class statedClass = [target class]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class &lt;span class=&quot;keyword&quot;&gt;baseClass &lt;/span&gt;= object_getClass(target)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *className = NSStringFromClass(&lt;span class=&quot;keyword&quot;&gt;baseClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if ([className hasPrefix:MTSubclassPrefix]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   cls = &lt;span class=&quot;keyword&quot;&gt;baseClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else if (mt_object_isClass(target)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   cls = target&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else if (statedClass != &lt;span class=&quot;keyword&quot;&gt;baseClass) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   cls = &lt;span class=&quot;keyword&quot;&gt;baseClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   const char *&lt;span class=&quot;keyword&quot;&gt;subclassName &lt;/span&gt;= [MTSubclassPrefix stringByAppendingString:className].UTF8String&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   Class &lt;span class=&quot;keyword&quot;&gt;subclass &lt;/span&gt;= objc_getClass(&lt;span class=&quot;keyword&quot;&gt;subclassName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   if (&lt;span class=&quot;keyword&quot;&gt;subclass &lt;/span&gt;== nil) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;subclass &lt;/span&gt;= objc_allocateClassPair(&lt;span class=&quot;keyword&quot;&gt;baseClass, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;subclassName, &lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if (&lt;span class=&quot;keyword&quot;&gt;subclass &lt;/span&gt;== nil) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;objc_allocateClassPair failed to allocate class %s.&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;subclassName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;           return NO&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       mt_hookedGetClass(&lt;span class=&quot;keyword&quot;&gt;subclass, &lt;/span&gt;statedClass)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       mt_hookedGetClass(object_getClass(&lt;span class=&quot;keyword&quot;&gt;subclass), &lt;/span&gt;statedClass)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       objc_registerClassPair(&lt;span class=&quot;keyword&quot;&gt;subclass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   object_setClass(target, &lt;span class=&quot;keyword&quot;&gt;subclass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;   cls = &lt;span class=&quot;keyword&quot;&gt;subclass;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有来就有回，如果要 remove KVO 或 hook 呢？肯定无法确保各个框架或 KVO add 和 remove『先入后出』的顺序，所以必然要做兼容处理。&lt;/p&gt;
&lt;p&gt;在 revert hook 的时候需要判断真实类型的前缀是否是 &lt;code&gt;MTSubclassPrefix&lt;/code&gt;。如果是，则将实例对象的类型还原回去。最后会判断是否还有其他相同类型的对象也被 hook 了，如果没有，则可以对这个类 revert hook。&lt;/p&gt;
&lt;p&gt;添加 KVO 和应用限频规则有先后顺序，移除 KVO 和废除限频规则也有先后顺序，那么可以排列组合出四种结果：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;初始类为 A&lt;/th&gt;
&lt;th&gt;先添加 KVO&lt;/th&gt;
&lt;th&gt;先应用限频规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;先移除 KVO&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;先废除限频规则&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_MessageThrottle_A&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;PS: &lt;code&gt;MTSubclassPrefix&lt;/code&gt; 常量内容就是 &lt;code&gt;_MessageThrottle_&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;因为通过 &lt;code&gt;MTDealloc&lt;/code&gt; 记录了 hook 的类，所以 revert hook 的时候使用的是当初 hook 的类，而不是当前实例对象真实的类。这主要是针对上面表格中的 『先应用限频规则，先废除限频规则』的情况。在废除规则的时候，真实的类为 &lt;code&gt;NSKVONotifying__MessageThrottle_A&lt;/code&gt;，而当初应用规则时 hook 的类为 &lt;code&gt;_MessageThrottle_A&lt;/code&gt;。这里要注意区分处理下。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; mt_recoverMethod(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; target, SEL selector, SEL aliasSelector)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class cls;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mt_object_isClass(target)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cls = target;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([MTEngine.defaultEngine containsSelector:selector onTargetsOfClass:cls]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MTDealloc *mtDealloc = objc_getAssociatedObject(target, selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// get class when apply rule on target.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cls = mtDealloc.cls;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// target current real class name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *className = &lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;(object_getClass(target));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([className hasPrefix:MTSubclassPrefix]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Class originalClass = &lt;span class=&quot;built_in&quot;&gt;NSClassFromString&lt;/span&gt;([className stringByReplacingOccurrencesOfString:MTSubclassPrefix withString:&lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSCAssert&lt;/span&gt;(originalClass != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;Original class must exist&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (originalClass) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                object_setClass(target, originalClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([MTEngine.defaultEngine containsSelector:selector onTarget:cls] ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [MTEngine.defaultEngine containsSelector:selector onTargetsOfClass:cls]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mt_revertHook(cls, selector, aliasSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Revert-Hook-的缺陷&quot;&gt;&lt;a href=&quot;#Revert-Hook-的缺陷&quot; class=&quot;headerlink&quot; title=&quot;Revert Hook 的缺陷&quot;&gt;&lt;/a&gt;Revert Hook 的缺陷&lt;/h2&gt;&lt;p&gt;前提：子类和父类都实现了同一个方法，并且子类的方法会调用 &lt;code&gt;super&lt;/code&gt; 的方法。&lt;/p&gt;
&lt;p&gt;在 Aspects 中有两种异常场景：&lt;/p&gt;
&lt;h3 id=&quot;先-Hook-父类，然后-revert，接着-Hook-子类。最后调用子类实例对象方法。&quot;&gt;&lt;a href=&quot;#先-Hook-父类，然后-revert，接着-Hook-子类。最后调用子类实例对象方法。&quot; class=&quot;headerlink&quot; title=&quot;先 Hook 父类，然后 revert，接着 Hook 子类。最后调用子类实例对象方法。&quot;&gt;&lt;/a&gt;先 Hook 父类，然后 revert，接着 Hook 子类。最后调用子类实例对象方法。&lt;/h3&gt;&lt;p&gt;结果是只执行了父类的方法，子类的方法没执行到。&lt;/p&gt;
&lt;p&gt;原因是当子类没有对应的方法和实现时，&lt;code&gt;instancesRespondToSelector:&lt;/code&gt; 会判断在继承链上查找是否有父类实现了方法。在 hook 某个方法前如果只通过 &lt;code&gt;instancesRespondToSelector:&lt;/code&gt; 来判断是否已经添加过 &lt;code&gt;aliasSelector&lt;/code&gt; 的话，是不够严谨的。父类 hook 后会添加 &lt;code&gt;aliasSelector&lt;/code&gt; 方法，revert 后这个方法还在。hook 子类的时候因为判断出已经有 &lt;code&gt;aliasSelector&lt;/code&gt; 方法了就没给子类添加该方法，实际上子类是继承的父类的实现，结果就是只执行了父类的方法实现。&lt;/p&gt;
&lt;p&gt;MessageThrottle 的解决方案是通过比较父类和子类的 &lt;code&gt;Method&lt;/code&gt; 是否相同。如果 &lt;code&gt;instancesRespondToSelector:&lt;/code&gt; 方法返回 &lt;code&gt;YES&lt;/code&gt; 并且父类和子类的 &lt;code&gt;Method&lt;/code&gt; 相同，那么就说明子类的 Method 是来自父类的，仍然需要为子类添加 &lt;code&gt;aliasSelector&lt;/code&gt; 对应的方法。&lt;/p&gt;
&lt;figure class=&quot;highlight oxygene&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; char *typeEncoding = method_getTypeEncoding(targetMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;targetAliasMethod&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;class_getInstanceMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cls, aliasSelector)&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;targetAliasMethodSuper&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;class_getInstanceMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(superCls, aliasSelector)&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![cls instancesRespondToSelector:aliasSelector] || targetAliasMethod == targetAliasMethodSuper) &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  __unused BOOL addedAlias = class_addMethod(cls, aliasSelector, method_getImplementation(targetMethod), typeEncoding);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NSCAssert(addedAlias, @&quot;Original implementation for %@ is already copied to %@ on %@&quot;, NSStringFromSelector(selector), NSStringFromSelector(aliasSelector), cls);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class_replaceMethod(cls, &lt;span class=&quot;keyword&quot;&gt;selector&lt;/span&gt;, mt_getMsgForwardIMP(statedClass, &lt;span class=&quot;keyword&quot;&gt;selector&lt;/span&gt;), typeEncoding);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试了下 Aspects 的表现，果然是只调用了父类的实现，这是一个很大的漏洞。&lt;/p&gt;
&lt;h3 id=&quot;先-Hook-子类，然后-revert，接着-Hook-父类。最后调用子类实例对象方法。&quot;&gt;&lt;a href=&quot;#先-Hook-子类，然后-revert，接着-Hook-父类。最后调用子类实例对象方法。&quot; class=&quot;headerlink&quot; title=&quot;先 Hook 子类，然后 revert，接着 Hook 父类。最后调用子类实例对象方法。&quot;&gt;&lt;/a&gt;先 Hook 子类，然后 revert，接着 Hook 父类。最后调用子类实例对象方法。&lt;/h3&gt;&lt;p&gt;结果是 crash。&lt;/p&gt;
&lt;p&gt;因为 Objective-C Runtime 没有提供移除方法的 API，所以在 revert hook 的时候，无法将 hook 过的 &lt;code&gt;forwardInvocation:&lt;/code&gt; 方法彻底复原，只能塞入 &lt;code&gt;NSObject&lt;/code&gt; 的默认实现（IMP）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当子类的方法调用 &lt;code&gt;super&lt;/code&gt; 方法时，因为父类的方法被 hook 了（通过替换 &lt;code&gt;IMP&lt;/code&gt; 为 &lt;code&gt;_objc_msgForward&lt;/code&gt;），会触发调用 &lt;code&gt;forwardInvocation:&lt;/code&gt; 方法。但是子类的 &lt;code&gt;forwardInvocation:&lt;/code&gt; 方法曾经被 Hook 过，所以此时不再是直接调用父类的实现，而是调用子类自己的实现，那么结果就是找不到方法，抛异常。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果子类没被 hook 过，子类是没有 &lt;code&gt;forwardInvocation:&lt;/code&gt; 方法的，会调用父类的方法实现。因为父类被 hook 了，所以会走 MessageThrottle 的消息转发流程，所以是不会出问题的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两者差别在于，调用 &lt;code&gt;forwardInvocation:&lt;/code&gt; 方法时，已经 Hook 过的类会调用自己的实现，而不会调用父类的实现。&lt;/p&gt;
&lt;p&gt;MessageThrottle 解决方案是记录所有 Hook 过的类，在 Hook 其他类之前先判断下是否已经有子类被 Hook 过。如果有，则作降级处理，打 Log 报错，不能继续 Hook。&lt;/p&gt;
&lt;p&gt;这个方案虽然不完美，但总比抛异常 crash 好。连 Aspects 也没有注意到这点，亲测会 crash。&lt;/p&gt;
&lt;h2 id=&quot;规则持久化&quot;&gt;&lt;a href=&quot;#规则持久化&quot; class=&quot;headerlink&quot; title=&quot;规则持久化&quot;&gt;&lt;/a&gt;规则持久化&lt;/h2&gt;&lt;p&gt;如果限频规则只存在于内存中，那么其实是很不安全的。&lt;/p&gt;
&lt;p&gt;有些场景下限频的周期很长，比如为了减少某条协议请求后台的次数，要求客户端一小时内最多请求一次。如果在一小时内 App 进程杀掉了然后又打开 App，这样就需要限频规则信息能够持久化存储，下次打开 App 读取并应用上次保存的规则。&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;target&lt;/code&gt; 为类或元类、&lt;code&gt;MTPerformModeFirstly&lt;/code&gt; 模式下且限频周期大于 5 秒的规则，MessageThrottle 会自动将其标记为持久化规则。&lt;/p&gt;
&lt;p&gt;可以通过设置 &lt;code&gt;MTRule&lt;/code&gt; 的 &lt;code&gt;persistent&lt;/code&gt; 属性为 &lt;code&gt;YES&lt;/code&gt;，来标记规则为需要持久化。对于 &lt;code&gt;target&lt;/code&gt; 为实例对象的规则持久化是无意义的，因为进程杀掉后，实例对象的生命周期也就结束了，规则也就自动失效了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MTRule&lt;/code&gt; 中只有一部分数据能够持久化，一些动态的内容无法持久化，比如队列、block 等。需要注意区分类对象和元类。&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;savePersistentRules&lt;/code&gt; 方法来保存持久化规则。对于 iOS、macOS 和 tvOS，会在收到 Terminate 通知时自动调用 &lt;code&gt;savePersistentRules&lt;/code&gt; 方法。&lt;/p&gt;
&lt;h2 id=&quot;线程安全&quot;&gt;&lt;a href=&quot;#线程安全&quot; class=&quot;headerlink&quot; title=&quot;线程安全&quot;&gt;&lt;/a&gt;线程安全&lt;/h2&gt;&lt;p&gt;每个 &lt;code&gt;MTRule&lt;/code&gt; 都对应着一个递归锁，保证了此规则上的方法调用是线程安全的。&lt;br&gt;存储所有 target-selector 映射关系的 &lt;code&gt;MTEngine&lt;/code&gt; 添加和废除规则涉及到对 &lt;code&gt;NSMapTable&lt;/code&gt; 和 &lt;code&gt;NSMutableSet&lt;/code&gt; 的操作，使用一个互斥锁来保证 &lt;code&gt;apply&lt;/code&gt;、&lt;code&gt;discard&lt;/code&gt; 和 &lt;code&gt;allRules&lt;/code&gt; 等方法的线程安全。当一个 &lt;code&gt;MTRule&lt;/code&gt; 在多个线程被频繁 &lt;code&gt;apply&lt;/code&gt; 和 &lt;code&gt;discard&lt;/code&gt; 的同时也可能会有这个 &lt;code&gt;MTRule&lt;/code&gt; 的方法在多个线程频繁调用，所以还需要在 &lt;code&gt;apply&lt;/code&gt; 和 &lt;code&gt;discard&lt;/code&gt; 方法里也加一层 &lt;code&gt;MTRule&lt;/code&gt; 的递归锁。&lt;/p&gt;
&lt;p&gt;当然，如果在 hook 或 revert 的过程中调用了方法，但是没有走 MessageThrottle 的转发逻辑的话，还是有可能出现多线程问题。但这样的概率很低，我用下面类似的代码进行测试是 OK 的：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(&lt;span class=&quot;name&quot;&gt;dispatch_get_global_queue&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   for (&lt;span class=&quot;name&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; i &amp;lt; 10000; i ++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       dispatch_async(&lt;span class=&quot;name&quot;&gt;dispatch_get_global_queue&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [rule apply]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(&lt;span class=&quot;name&quot;&gt;dispatch_get_global_queue&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   for (&lt;span class=&quot;name&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; i &amp;lt; 10000; i ++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       dispatch_async(&lt;span class=&quot;name&quot;&gt;dispatch_get_global_queue&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [self.stub foo:[NSDate date]]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(&lt;span class=&quot;name&quot;&gt;dispatch_get_global_queue&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   for (&lt;span class=&quot;name&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; i &amp;lt; 10000; i ++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       dispatch_async(&lt;span class=&quot;name&quot;&gt;dispatch_get_global_queue&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [rule discard]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(&lt;span class=&quot;name&quot;&gt;dispatch_get_global_queue&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   for (&lt;span class=&quot;name&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; i &amp;lt; 10000; i ++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       dispatch_async(&lt;span class=&quot;name&quot;&gt;dispatch_get_global_queue&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [self.stub foo:[NSDate date]]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为 &lt;code&gt;MTPerformModeLast&lt;/code&gt; 和 &lt;code&gt;MTPerformModeDebounce&lt;/code&gt; 都是延时执行模式，所以有可能在延时的过程中，规则已经被废弃了，但是依然会调用到 &lt;code&gt;[invocation invoke]&lt;/code&gt;，而此时需要注意 &lt;code&gt;invocation&lt;/code&gt; 的 &lt;code&gt;selector&lt;/code&gt;。如果规则已经被废弃了，需要使用原始的 &lt;code&gt;selector&lt;/code&gt;，而不是 &lt;code&gt;aliasSelector&lt;/code&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot;&gt;MessageThrottle&lt;/a&gt; 是我开发的Objective-C 节流限频组件，其原理基于 Hook 消息转发流程，在运行时应用了一套节流限频的规则。&lt;/p&gt;
&lt;p&gt;新版本再次提升性能的同时，确保了 hook 流程、多线程操作、规则管理的安全性，支持了持久化规则，并对 KVO 等场景进行兼容。&lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot;&gt;MessageThrottle&lt;/a&gt; 的代码测试覆盖率在 80% 以上，在编写测试用例的同时也发现了一些安全隐患，有些甚至是业界知名开源库都没有发现和解决的。&lt;/p&gt;
&lt;p&gt;本文是关于 &lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot;&gt;MessageThrottle&lt;/a&gt; 的第四篇文章。前三篇如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/11/05/Objective-C-Message-Throttle-and-Debounce/&quot;&gt;Objective-C Message Throttle and Debounce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/12/15/Associated-Object-and-Dealloc/&quot;&gt;Associated Object 与 Dealloc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2018/05/31/MessageThrottle-Performance-Benchmark-and-Optimization/&quot;&gt;MessageThrottle Performance Benchmark and Optimization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>追踪 Objective-C Block 代码定义的位置</title>
    <link href="http://yulingtianxia.com/blog/2018/06/24/Objective-C-Block-Mangle-Name/"/>
    <id>http://yulingtianxia.com/blog/2018/06/24/Objective-C-Block-Mangle-Name/</id>
    <published>2018-06-24T09:19:03.000Z</published>
    <updated>2018-09-15T08:28:13.753Z</updated>
    
    <content type="html">&lt;p&gt;之前写了一篇文章&lt;a href=&quot;http://yulingtianxia.com/blog/2018/03/31/Track-Block-Arguments-of-Objective-C-Method/&quot;&gt;《追踪 Objective-C 方法中的 Block 参数对象》&lt;/a&gt;，利用 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockHook&lt;/a&gt; 和 Objective-C 的动态特性实现对 block 对象执行和销毁的追踪。本文在此基础上，通过 Mach-O 文件格式获取 Mangle Name 并根据 Clang 源码实现对其解析，探寻如何追踪 block 代码定义的位置。&lt;/p&gt;
&lt;p&gt;主要代码已经整合到 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockHook&lt;/a&gt; 1.0.2 版本中。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;解决思路&quot;&gt;&lt;a href=&quot;#解决思路&quot; class=&quot;headerlink&quot; title=&quot;解决思路&quot;&gt;&lt;/a&gt;解决思路&lt;/h2&gt;&lt;p&gt;能想到的最直接的方法就是获取 block 内部 invoke 函数的内存地址，并找到这个地址对应的 image，然后根据对基地址的偏移量，利用 dYSM 文件存储的符号表查找到对应代码位置。这属于很常规的操作了，即便没有 dYSM 文件，用 Mach-O 反汇编也能知道 block 定义在哪个方法的大概位置。&lt;/p&gt;
&lt;p&gt;本文完？？？&lt;/p&gt;
&lt;p&gt;太水了！！！&lt;/p&gt;
&lt;p&gt;如果只需要知道 block 定义在哪个方法里的话，其实有更简单的方法呀！在程序运行时就能知道的，不用那么多麻烦的后续操作。解决思路如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过读取每个 Mach-O 镜像文件的符号表，建立 block invoke 函数偏移地址到符号名的映射。&lt;/li&gt;
&lt;li&gt;获取到的符号名是经过 Clang 处理后的 mangle name，根据生成规则反推出 block invoke 函数实现代码位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Mach-O-文件格式&quot;&gt;&lt;a href=&quot;#Mach-O-文件格式&quot; class=&quot;headerlink&quot; title=&quot;Mach-O 文件格式&quot;&gt;&lt;/a&gt;Mach-O 文件格式&lt;/h2&gt;&lt;p&gt;网上关于 Mach-O 文件的介绍一大堆，这里不再赘述。其实就是个二进制文件格式定义，照着文档写代码读二进制内容罢了。苹果也提供了 Mach-O 文件数据结构的定义，直接用就行了。当二进制镜像被加载到虚拟内存中后，就可以通过计算各种偏移量来按图索骥了。下面的代码将 &lt;code&gt;_hunt_blocks_for_image&lt;/code&gt; 注册为镜像加载后的回调函数，这行代码执行前已经加载的镜像也会回调此函数：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_dyld_register_func_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_add_image(_hunt_blocks_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_image);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;_hunt_blocks_for_image&lt;/code&gt; 函数会读取一个 Mach-O 文件中的符号表。具体操作是先从遍历 Load Commands 入手，找到 &lt;code&gt;__LINKEDIT&lt;/code&gt; 段的基地址以及符号表数据的偏移量及其字符串表的偏移量。然后遍历符号表，获取到符号地址和符号名的偏移量。如果符号名中包含 &lt;code&gt;_block_invoke&lt;/code&gt; 则说明是 block 实现函数，然后用字典保存符号地址到符号名的映射。&lt;/p&gt;
&lt;p&gt;遍历 Load Commands 时要注意，不同类型的 Load Command 数据类型也不一样，但是肯定会有 &lt;code&gt;cmd&lt;/code&gt; 和 &lt;code&gt;cmdsize&lt;/code&gt; 这两个字段。可以凭借 &lt;code&gt;cmd&lt;/code&gt; 简单区分其数据结构。比如符号表的 &lt;code&gt;cmd&lt;/code&gt; 是 &lt;code&gt;LC_SYMTAB&lt;/code&gt;，其数据结构为 &lt;code&gt;symtab_command&lt;/code&gt;。比如常见的 &lt;code&gt;cmd&lt;/code&gt; 为 &lt;code&gt;LC_SEGMENT&lt;/code&gt; 的『段』可以靠 &lt;code&gt;segname&lt;/code&gt; 区分，类型有 &lt;code&gt;__PAGEZERO&lt;/code&gt; &lt;code&gt;__TEXT&lt;/code&gt; &lt;code&gt;__DATA&lt;/code&gt; &lt;code&gt;__LINKEDIT&lt;/code&gt; &lt;code&gt;__OBJC&lt;/code&gt; 等等，有的『段』下面还有很多『节』(Section)。&lt;code&gt;__PAGEZERO&lt;/code&gt; 段在可执行文件才有，大小跟架构有关，是虚拟内存基地址。符号表是一个 &lt;code&gt;nlist&lt;/code&gt; 数组，保存着每个符号的一些信息，这里只用到了符号地址和符号名。&lt;/p&gt;
&lt;p&gt;因为使用 &lt;code&gt;NSMapTable&lt;/code&gt; 存储符号地址和符号名的映射，所以需要用 &lt;code&gt;pthread_mutex_t&lt;/code&gt; 确保线程安全。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_hunt_blocks_for_image&lt;/code&gt; 函数实现如下。我觉得我思想解释的够明白了，对于看过 fishhook 源码的人来说应该很简单。实在看不懂就自己对照着 MachOView 和苹果文档，随便找个方法计算一遍偏移量就好了。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; NSMapTable *block_invoke_mangle_cache;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;pthread_mutex_t&lt;/span&gt; block_invoke_mangle_cache_mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; _hunt_blocks_for_image(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; mach_header *header, &lt;span class=&quot;keyword&quot;&gt;intptr_t&lt;/span&gt; slide) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Dl_info info;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dladdr(header, &amp;amp;info) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;segment_command_t&lt;/span&gt; *cur_seg_cmd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;segment_command_t&lt;/span&gt; *linkedit_segment = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;segment_command_t&lt;/span&gt; *pagezero_segment = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; symtab_command* symtab_cmd = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; cur = (&lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt;)header + &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;mach_header_t&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (uint i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; header-&amp;gt;ncmds; i++, cur += cur_seg_cmd-&amp;gt;cmdsize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cur_seg_cmd = (&lt;span class=&quot;keyword&quot;&gt;segment_command_t&lt;/span&gt; *)cur;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cur_seg_cmd-&amp;gt;cmd == LC_SEGMENT_ARCH_DEPENDENT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(cur_seg_cmd-&amp;gt;segname, SEG_LINKEDIT) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                linkedit_segment = cur_seg_cmd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strcmp(SEG_PAGEZERO, cur_seg_cmd-&amp;gt;segname) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                pagezero_segment = (&lt;span class=&quot;keyword&quot;&gt;segment_command_t&lt;/span&gt;*)cur_seg_cmd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cur_seg_cmd-&amp;gt;cmd == LC_SYMTAB) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            symtab_cmd = (struct symtab_command*)cur_seg_cmd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!symtab_cmd || !linkedit_segment ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; linkedit_base = (&lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt;)slide + linkedit_segment-&amp;gt;vmaddr - linkedit_segment-&amp;gt;fileoff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;nlist_t&lt;/span&gt; *symtab = (&lt;span class=&quot;keyword&quot;&gt;nlist_t&lt;/span&gt; *)(linkedit_base + symtab_cmd-&amp;gt;symoff);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *strtab = (char *)(linkedit_base + symtab_cmd-&amp;gt;stroff);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_lock(&amp;amp;block_invoke_mangle_cache_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!block_invoke_mangle_cache) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        block_invoke_mangle_cache = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory | NSMapTableObjectPointerPersonality valueOptions:NSPointerFunctionsCopyIn];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (uint i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; symtab_cmd-&amp;gt;nsyms; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; strtab_offset = symtab[i].n_un.n_strx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *symbol_name = strtab + strtab_offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; symbol_name_longer_than_1 = symbol_name[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &amp;amp;&amp;amp; symbol_name[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!symbol_name_longer_than_1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; block_addr = (&lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt;)info.dli_fbase + symtab[i].n_value - (pagezero_segment ? pagezero_segment-&amp;gt;vmsize : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSString *symbolName = [NSString stringWithUTF8String:&amp;amp;symbol_name[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSRange range = [symbolName rangeOfString:@&lt;span class=&quot;string&quot;&gt;&quot;_block_invoke&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (range.location != NSNotFound &amp;amp;&amp;amp; range.location &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [block_invoke_mangle_cache setObject:symbolName forKey:(__bridge id)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)block_addr];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_unlock(&amp;amp;block_invoke_mangle_cache_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Block-Mangle-Name&quot;&gt;&lt;a href=&quot;#Block-Mangle-Name&quot; class=&quot;headerlink&quot; title=&quot;Block Mangle Name&quot;&gt;&lt;/a&gt;Block Mangle Name&lt;/h2&gt;&lt;p&gt;Clang 7.0.0 源码的 &lt;a href=&quot;https://clang.llvm.org/doxygen/Mangle_8cpp_source.html#l00060&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mangle.cpp&lt;/a&gt; 文件实现了 Objective-C 和 block 的 mangle name。只需要看 &lt;code&gt;mangleBlock&lt;/code&gt; 和 &lt;code&gt;mangleGlobalBlock&lt;/code&gt; 两个函数即可大概了解 block mangle name 的生成规则。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局 block：block 变量名 + &lt;code&gt;_block_invoke&lt;/code&gt; + &lt;code&gt;discriminator&lt;/code&gt;。详见 &lt;code&gt;mangleGlobalBlock&lt;/code&gt; 函数实现。&lt;/li&gt;
&lt;li&gt;其他 block：&lt;code&gt;__&lt;/code&gt; + block 代码所处的函数或方法的 mangle name + &lt;code&gt;_block_invoke&lt;/code&gt; + &lt;code&gt;discriminator&lt;/code&gt;。详见 &lt;code&gt;mangleBlock&lt;/code&gt; 函数实现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意的是 &lt;code&gt;discriminator&lt;/code&gt; 是从第二个才开始显示的。比如在 &lt;code&gt;Foo&lt;/code&gt; 类的 &lt;code&gt;bar&lt;/code&gt; 方法中定义了两个 block，那么这两个 block 的 mangle name 就是 &lt;code&gt;__10_-[Foo bar]_block_invoke&lt;/code&gt; 和 &lt;code&gt;__10_-[Foo bar]_block_invoke_2&lt;/code&gt;。在 gcc 里稍有区别，第一个 block 的 mangle name 也会显示 &lt;code&gt;discriminator&lt;/code&gt;。前面的 “10” 是方法名 &lt;code&gt;-[Foo bar]&lt;/code&gt; 的字符串长度。这部分属于 Objective-C 方法名的 mangle name 规则，C++ 函数也有类似的规则，不仅用数字保存字符串长度，还有其他字母表示方法类型和参数类型等。这里不展开细讲了，看源码都能找到。&lt;/p&gt;
&lt;p&gt;于是只要能拿到 mangle name，就能推断出定义 block 代码所处的位置咯。不带 &lt;code&gt;__&lt;/code&gt; 的就是全局 block 咯？我并没有打算写代码来解析下 mangle name 的规则，还是交给调用方去使用吧。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockHook&lt;/a&gt; 的 &lt;code&gt;BHToken&lt;/code&gt; 类新增了 &lt;code&gt;mangleName&lt;/code&gt; 属性，只需要使用原始的 invoke 函数地址作为 Key 即可从字典里获得这个 block 对应的 &lt;code&gt;mangleName&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(NSString *)&lt;/span&gt;mangleName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if &lt;span class=&quot;params&quot;&gt;(!_mangleName)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_mutex_lock&lt;span class=&quot;params&quot;&gt;(&amp;amp;block_invoke_mangle_cache_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if &lt;span class=&quot;params&quot;&gt;(_originInvoke)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _mangleName = [block_invoke_mangle_cache objectForKey:&lt;span class=&quot;params&quot;&gt;(__bridge id)&lt;/span&gt;_originInvoke];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_mutex_unlock&lt;span class=&quot;params&quot;&gt;(&amp;amp;block_invoke_mangle_cache_mutex)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return _mangleName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里有个多次 hook 的问题。所谓的 &lt;code&gt;_originInvoke&lt;/code&gt; 只是这次 hook 相对的原始实现函数，它可能处在多次 hook 中的一环，而不是最原始的 block 实现，此时是拿不到 &lt;code&gt;mangleName&lt;/code&gt;。所以需要用第一次 hook block 的 token 来获取 &lt;code&gt;mangleName&lt;/code&gt;。PS:想搞倒是可以搞，把 hook block 产生的 token 都保存起来，然后按照 &lt;code&gt;_originInvoke&lt;/code&gt; 和 &lt;code&gt;_replacementInvoke&lt;/code&gt; 顺藤摸瓜就行，不难，顺便还能解决 &lt;code&gt;remove&lt;/code&gt; 操作的顺序问题。我懒的搞，目前场景太小意义不大。&lt;/p&gt;
&lt;p&gt;想了解 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockHook&lt;/a&gt; 原理的，可以看这篇文章：&lt;a href=&quot;http://yulingtianxia.com/blog/2018/02/28/Hook-Objective-C-Block-with-Libffi/&quot;&gt;Hook Objective-C Block with Libffi&lt;/a&gt;。（继续疯狂炒冷饭。。。）&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;目前 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockHook&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/yulingtianxia/BlockTracker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockTracker&lt;/a&gt; 都已经支持获取 block 的 mangle name 了。&lt;/p&gt;
&lt;p&gt;不知道 dyld 3 强制应用后会不会对此有影响，我就是遍历这个二进制文件自己的符号表而已呀，动态重定向的我又不 care。反正 fishhook 到时候估计是 gg 了，因为 dyld 3 会在加载时解析所有符号表，也就是固定下来了，没跳板了。&lt;/p&gt;
&lt;p&gt;然而我还是这么菜，赶在月底前写了个篇幅短小全是常识的大水文。。。&lt;/p&gt;
&lt;p&gt;本文完。。。&lt;/p&gt;
&lt;p&gt;太水了！！！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前写了一篇文章&lt;a href=&quot;http://yulingtianxia.com/blog/2018/03/31/Track-Block-Arguments-of-Objective-C-Method/&quot;&gt;《追踪 Objective-C 方法中的 Block 参数对象》&lt;/a&gt;，利用 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot;&gt;BlockHook&lt;/a&gt; 和 Objective-C 的动态特性实现对 block 对象执行和销毁的追踪。本文在此基础上，通过 Mach-O 文件格式获取 Mangle Name 并根据 Clang 源码实现对其解析，探寻如何追踪 block 代码定义的位置。&lt;/p&gt;
&lt;p&gt;主要代码已经整合到 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot;&gt;BlockHook&lt;/a&gt; 1.0.2 版本中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>MessageThrottle Performance Benchmark and Optimization</title>
    <link href="http://yulingtianxia.com/blog/2018/05/31/MessageThrottle-Performance-Benchmark-and-Optimization/"/>
    <id>http://yulingtianxia.com/blog/2018/05/31/MessageThrottle-Performance-Benchmark-and-Optimization/</id>
    <published>2018-05-30T18:01:50.000Z</published>
    <updated>2018-09-15T08:28:13.562Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 是我开发的Objective-C 节流限频组件，其原理基于 Hook 消息转发流程，所以相比直接调用方法，会有一些性能上的损耗。本篇文章记录了对其性能进行测试的结果，并通过使用 &lt;code&gt;NSMapTable&lt;/code&gt; 改进存储结构和缓存来对性能进行大幅度的优化。&lt;/p&gt;
&lt;p&gt;这是你从未体验过的船新版本。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;关于 &lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 最初的实现原理可以参考 &lt;a href=&quot;http://yulingtianxia.com/blog/2017/11/05/Objective-C-Message-Throttle-and-Debounce/&quot;&gt;Objective-C Message Throttle and Debounce&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Benchmark&quot;&gt;&lt;a href=&quot;#Benchmark&quot; class=&quot;headerlink&quot; title=&quot;Benchmark&quot;&gt;&lt;/a&gt;Benchmark&lt;/h2&gt;&lt;p&gt;Xcode 自带的单元测试框架可以很方便的测量一个方法的执行效率，&lt;code&gt;measureBlock&lt;/code&gt; 里的代码会被执行十次，测试结束后会得到每次执行耗时，以及平均数和方差。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)testPerformanceExample &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// This is an example of a performance test case.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; *date = [&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; date];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; measureBlock:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Put the code you want to measure the time of here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i ++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.sstub foo:date];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;性能损耗大多发生在消息转发流程上的处理，为了能够校准基线，需要让每次消息发送都执行。MessageThrottle 1.2.0 刚刚支持了让某些条件下消息永远执行的特性：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setUp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; setUp];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Put setup code here. This method is called before the invocation of each test method in the class.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.sstub = [SuperStub &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MTRule *rule = [self.sstub &lt;span class=&quot;string&quot;&gt;mt_limitSelector:&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;foo:&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;oncePerDuration:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;usingMode:&lt;/span&gt;MTPerformModeDebounce];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rule.alwaysInvokeBlock =  ^(MTRule *rule, NSDate *date) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; YES; &lt;span class=&quot;comment&quot;&gt;// 让消息永远都执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过调整 &lt;code&gt;foo:&lt;/code&gt; 方法的耗时来得到调用不同耗时函数的测试结果。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (void)&lt;span class=&quot;selector-tag&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(NSDate&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;arg&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-attr&quot;&gt;[NSThread sleepForTimeInterval:0.0001]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终得到一组数据，测试机器为 iPhone 8 plus。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;执行模式\被调用方法耗时&lt;/th&gt;
&lt;th&gt;0.0001&lt;/th&gt;
&lt;th&gt;0.001&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;不使用 MT&lt;/td&gt;
&lt;td&gt;0.118(baseline)&lt;/td&gt;
&lt;td&gt;1.17(baseline)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT 立即执行&lt;/td&gt;
&lt;td&gt;0.135(14.4%worse)&lt;/td&gt;
&lt;td&gt;1.33(13.8%worse)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT debounce 0.01s&lt;/td&gt;
&lt;td&gt;0.0281(76.2%better)&lt;/td&gt;
&lt;td&gt;0.0279(97.6%better)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;测试的基准数据为不使用 MessageThottle，直接调用方法。&lt;/li&gt;
&lt;li&gt;使用 MessageThottle 后，消息转发流程会带来多余的耗时会导致性能下降，而且被调用方法耗时越少，性能下降得越明显（比较两列数据）。&lt;/li&gt;
&lt;li&gt;如果加了消息限频，会忽略掉一部分调用，这样当出现大量频繁调用时，方法真正执行的次数很少，性能反而大大提升了（第三行数据）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Optimization&quot;&gt;&lt;a href=&quot;#Optimization&quot; class=&quot;headerlink&quot; title=&quot;Optimization&quot;&gt;&lt;/a&gt;Optimization&lt;/h2&gt;&lt;p&gt;通过性能优化，将消息转发流程产生的耗时降低了将近 50%。并加强了线程安全。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;执行模式\被调用方法耗时&lt;/th&gt;
&lt;th&gt;0.0001&lt;/th&gt;
&lt;th&gt;0.001&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;不使用 MT&lt;/td&gt;
&lt;td&gt;0.118(baseline)&lt;/td&gt;
&lt;td&gt;1.17(baseline)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MT 立即执行&lt;/td&gt;
&lt;td&gt;0.135(14.4%worse)&lt;/td&gt;
&lt;td&gt;1.33(13.8%worse)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;性能优化后&lt;/td&gt;
&lt;td&gt;0.126(6.88%worse)&lt;/td&gt;
&lt;td&gt;1.25(6.93%worse)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;为了方便管理和查看所有的 &lt;code&gt;MTRule&lt;/code&gt;，使用了 &lt;code&gt;MTEngine&lt;/code&gt; 单例进行中心化的管理。获取一个 &lt;code&gt;MTRule&lt;/code&gt; 之前，需要先用 &lt;code&gt;target&lt;/code&gt; 和 &lt;code&gt;selector&lt;/code&gt; 生成一个描述字符串，然后用这个字符串作为 Key 在 &lt;code&gt;MTEngine&lt;/code&gt; 的字典里查询对应的 &lt;code&gt;MTRule&lt;/code&gt; 对象。每次应用和废除规则、消息发送时都要频繁从 &lt;code&gt;MTEngine&lt;/code&gt; 获取 &lt;code&gt;MTRule&lt;/code&gt; 对象，由此也产生了大量开销。这里的性能瓶颈主要有两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成描述字符串造成的开销。&lt;/li&gt;
&lt;li&gt;从 &lt;code&gt;MTEngine&lt;/code&gt; 加锁的字典获取 &lt;code&gt;MTRule&lt;/code&gt; 的等待开销。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应用和废除规则的时候，这两点开销并不明显。但当所有应用规则的消息发送都要经过这两步的时候，这俨然成了拥堵的重灾区。当然治理方案也是相对的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;改进 &lt;code&gt;MTEngine&lt;/code&gt; 中字典的存储结构，使用 &lt;code&gt;NSMapTable&lt;/code&gt; 替换 &lt;code&gt;NSMutableDictionary&lt;/code&gt;。因为 &lt;code&gt;NSMapTable&lt;/code&gt; 支持将任意指针作为 Key 且无需持有，可以将 &lt;code&gt;target&lt;/code&gt; 作为 Key，Value 为这个 &lt;code&gt;target&lt;/code&gt; 对应的 &lt;code&gt;selector&lt;/code&gt; 集合。&lt;code&gt;MTEngine&lt;/code&gt; 不再持有 &lt;code&gt;MTRule&lt;/code&gt; 对象，而只是存储了所有应用规则的 &lt;code&gt;target&lt;/code&gt; 及其 &lt;code&gt;selector&lt;/code&gt;。而 &lt;code&gt;MTRule&lt;/code&gt; 对象改为由其 &lt;code&gt;target&lt;/code&gt; 通过 AssociatedObject 的方式持有，可以很方便通过 &lt;code&gt;selector&lt;/code&gt; 存取。当 &lt;code&gt;target&lt;/code&gt; 销毁后，它关联的 &lt;code&gt;MTRule&lt;/code&gt; 对象也会被销毁，&lt;code&gt;NSMapTable&lt;/code&gt; 也会自动移除那些键或值为 &lt;code&gt;nil&lt;/code&gt; 的数据。下面是 &lt;code&gt;MTEngine&lt;/code&gt; 封装了 &lt;code&gt;NSMapTable&lt;/code&gt; 字典对应的便捷方法。&lt;/p&gt;
 &lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_targetSELs = [&lt;span class=&quot;built_in&quot;&gt;NSMapTable&lt;/span&gt; weakToStrongObjectsMapTable];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//添加 target-selector 记录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addSelector:(SEL)selector onTarget:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableSet&lt;/span&gt; *selectors = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.targetSELs objectForKey:target];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!selectors) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        selectors = [&lt;span class=&quot;built_in&quot;&gt;NSMutableSet&lt;/span&gt; set];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [selectors addObject:&lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(selector)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.targetSELs setObject:selectors forKey:target];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//移除 target-selector 记录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)removeSelector:(SEL)selector onTarget:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableSet&lt;/span&gt; *selectors = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.targetSELs objectForKey:target];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!selectors) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        selectors = [&lt;span class=&quot;built_in&quot;&gt;NSMutableSet&lt;/span&gt; set];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [selectors removeObject:&lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(selector)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.targetSELs setObject:selectors forKey:target];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//是否存在 target-selector 记录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)containsSelector:(SEL)selector onTarget:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.targetSELs objectForKey:target] containsObject:&lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(selector)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//是否存在 target-selector 记录，未指定具体 target，但 target 的类型为 cls 即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)containsSelector:(SEL)selector onTargetsOfClass:(Class)cls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; target &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.targetSELs keyEnumerator] allObjects]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!mt_object_isClass(target) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [target isMemberOfClass:cls] &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.targetSELs objectForKey:target] containsObject:&lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(selector)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个 &lt;code&gt;MTRule&lt;/code&gt; 有自己独立的递归锁，这样避免了在 &lt;code&gt;forwardInvocation&lt;/code&gt; 里千军万马过独木桥的拥堵，且不妨碍递归调用的场景。存取 &lt;code&gt;MTEngine&lt;/code&gt; 的字典依然使用普通的互斥锁。这两个锁都使用性能较好的 &lt;code&gt;pthread_mutex_t&lt;/code&gt; 实现。&lt;/p&gt;
 &lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; // 初始化递归锁&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; pthread_mutexattr_t attr&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; pthread_mutexattr_init(&amp;amp;attr)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; pthread_mutexattr_settype(&amp;amp;attr, PTHREAD_MUTEX_RECURSIVE)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; pthread_mutex_t mutex = mtDealloc.invokeLock&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; pthread_mutex_init(&amp;amp;mutex, &amp;amp;attr)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; objc_setAssociatedObject(rule.target, rule.selector, mtDealloc, OBJC_ASSOCIATION_RETAIN)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // 消息转发时保证线程安全&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; static void mt_forwardInvocation(__unsafe_unretained id assignSlf, SEL selector, NSInvocation *invocation)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     SEL originalSelector = invocation.selector&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     SEL fixedOriginalSelector = mt_aliasForSelector(originalSelector)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     if (![assignSlf respondsToSelector:fixedOriginalSelector]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         mt_executeOrigForwardInvocation(assignSlf, selector, invocation)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         return&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     MTDealloc *mtDealloc = objc_getAssociatedObject(invocation.target, selector)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     pthread_mutex_t mutex = mtDealloc.invokeLock&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     pthread_mutex_lock(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     mt_handleInvocation(invocation, fixedOriginalSelector)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     pthread_mutex_unlock(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;MTEngine&lt;/code&gt; 中字典的存储结构的改进不仅提高了性能，还让设计思路更清晰。在添加或废除规则的时候，旧方案需要遍历所有的 &lt;code&gt;MTRule&lt;/code&gt; 对象，然后通过检查 &lt;code&gt;target&lt;/code&gt; 和 &lt;code&gt;selector&lt;/code&gt; 来判断规则是否相互干扰；新方案直接存储了 &lt;code&gt;target&lt;/code&gt; 和对应的 &lt;code&gt;selector&lt;/code&gt; 数组，声明如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMapTable&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSMutableSet&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *&amp;gt; *&amp;gt; *targetSELs;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的存储方式可以更高效地找到某个对象或类的某个方法是否被限频了，增删规则也更快。&lt;/p&gt;
&lt;p&gt;在 Hook 某个方法的时候，会给它生成一个新的方法名，这就又涉及到字符串拼接的开销。解决方案是使用缓存来映射两个 &lt;code&gt;SEL&lt;/code&gt; 指针，又要用到 &lt;code&gt;NSMapTable&lt;/code&gt; 大显神威了。这又将节省 6% 左右的 CPU 耗时！需要注意的是创建 &lt;code&gt;NSMapTable&lt;/code&gt; 时的选项，以及存取时的类型强转：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 初始化 NSMapTable 缓存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_aliasSelectorCache = [&lt;span class=&quot;built_in&quot;&gt;NSMapTable&lt;/span&gt; mapTableWithKeyOptions:&lt;span class=&quot;built_in&quot;&gt;NSPointerFunctionsOpaqueMemory&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;NSMapTableObjectPointerPersonality&lt;/span&gt; valueOptions:&lt;span class=&quot;built_in&quot;&gt;NSPointerFunctionsOpaqueMemory&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;NSMapTableObjectPointerPersonality&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在方法内部使用缓存优化性能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; SEL mt_aliasForSelector(SEL selector)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_lock(&amp;amp;alias_selector_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SEL aliasSelector = (__bridge &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)[MTEngine.defaultEngine.aliasSelectorCache objectForKey:(__bridge &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)selector];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!aliasSelector) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *selectorName = &lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        aliasSelector = &lt;span class=&quot;built_in&quot;&gt;NSSelectorFromString&lt;/span&gt;([&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;__mt_%@&quot;&lt;/span&gt;, selectorName]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [MTEngine.defaultEngine.aliasSelectorCache setObject:(__bridge &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)aliasSelector forKey:(__bridge &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)selector];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_unlock(&amp;amp;alias_selector_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; aliasSelector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可能有人会担心直接缓存 &lt;code&gt;SEL&lt;/code&gt; 指针会不会命中率很低。因为所有名字相同的方法都拥有同一个唯一的 &lt;code&gt;SEL&lt;/code&gt;，所以可以很快速地用直接指针地址判等。可以参考&lt;a href=&quot;https://stackoverflow.com/questions/11051528/understanding-uniqueness-of-selectors-in-objective-c?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;更新 &lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 到最新版即可获取到更快更强更安全的 Objective 消息节流限频功能，一行代码搞定频繁调用的问题。&lt;/p&gt;
&lt;p&gt;新版本在废除消息的时候，也增强了对合法性和安全性的检查。（说白了就是改 bug）&lt;/p&gt;
&lt;p&gt;理论上我的另一个组件 &lt;a href=&quot;https://github.com/yulingtianxia/BlockTracker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockTracker&lt;/a&gt; 也可以按照本文的方案优化性能了，嘿嘿，有时间搞下。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot;&gt;MessageThrottle&lt;/a&gt; 是我开发的Objective-C 节流限频组件，其原理基于 Hook 消息转发流程，所以相比直接调用方法，会有一些性能上的损耗。本篇文章记录了对其性能进行测试的结果，并通过使用 &lt;code&gt;NSMapTable&lt;/code&gt; 改进存储结构和缓存来对性能进行大幅度的优化。&lt;/p&gt;
&lt;p&gt;这是你从未体验过的船新版本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Colorful Rounded Rect Dash Border</title>
    <link href="http://yulingtianxia.com/blog/2018/04/30/Colorful-Rounded-Rect-Dash-Border/"/>
    <id>http://yulingtianxia.com/blog/2018/04/30/Colorful-Rounded-Rect-Dash-Border/</id>
    <published>2018-04-30T09:25:44.000Z</published>
    <updated>2018-09-15T08:28:13.549Z</updated>
    
    <content type="html">&lt;p&gt;产品经理要求做个能展示进度的分段彩色外环，大概长这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/YXYDashLayer/blob/master/Assets/YXYDashLayer.gif?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;花了两天左右来实现和优化，记录下踩坑经历。&lt;/p&gt;
&lt;p&gt;组件已经开源，取个名字叫 &lt;code&gt;YXYDashLayer&lt;/code&gt; 吧：&lt;a href=&quot;https://github.com/yulingtianxia/YXYDashLayer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/YXYDashLayer&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;接口设计&quot;&gt;&lt;a href=&quot;#接口设计&quot; class=&quot;headerlink&quot; title=&quot;接口设计&quot;&gt;&lt;/a&gt;接口设计&lt;/h2&gt;&lt;p&gt;因为考虑到要做成稍微通用一些的组件，最底层的 &lt;code&gt;YXYMaskDashLayer&lt;/code&gt; 接口设计如下。其他类的属性也都是对它的封装。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 分段的间隙&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; dashGap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 线宽&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; dashWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 矩形的圆角半径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; dashCornerRadius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 分段总数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; totalCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 需要显示哪些分段的 index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *&amp;gt; *showIndexes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 刷新整个Layer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)refresh;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 仅刷新 Dash 的 totalCount、dashGap 和 showIndexes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)refreshDash;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为有些属性改变后并不需要重新绘制 path，为了实现更好的性能，所以还提供了一个只刷新 dash 数据的接口 &lt;code&gt;refreshDash&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;具体使用的例子可以运行 Demo 程序。&lt;/p&gt;
&lt;h2 id=&quot;思路很重要&quot;&gt;&lt;a href=&quot;#思路很重要&quot; class=&quot;headerlink&quot; title=&quot;思路很重要&quot;&gt;&lt;/a&gt;思路很重要&lt;/h2&gt;&lt;p&gt;之前的样式是个圆形的分段外环，而且是纯色的，看了下以前的代码，是按照弧度均分后，从顶部开始按顺时针一段一段 path 组合起来的。用 &lt;code&gt;UIBezierPath&lt;/code&gt; 的 &lt;code&gt;+ bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:&lt;/code&gt; 方法即可画出来。&lt;/p&gt;
&lt;p&gt;然而现在改成了圆角矩形的，要按照周长均分来画分段，实现方式完全不同。因为圆形只是圆角矩形的一种特殊情况，所以需要另一种更通用的实现方式。因为借鉴了圆形分段一段段画的思想，最开始想到的也是一段段画圆角矩形，需要把整个圆角矩形划分成 9 个区域（四个四分之一圆弧，四条直线，顶部直线需要分成两块），还要对圆角和直线部分的边界处理，涉及到大量的计算。我刚开始要这么干的时候，觉得这么做有点笨，肯定有更简单的方案。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CAShapeLayer&lt;/code&gt; 的 &lt;code&gt;lineDashPattern&lt;/code&gt; 和 &lt;code&gt;lineDashPhase&lt;/code&gt; 属性就可以实现这个需求了，之前一直被旧代码的方案限制了思路。真是退一步海阔天空啊。原本跟产品说这有 5 天工作量，结果半个小时就写出个 demo，哈哈。然后用剩下的时间继续完善打磨，做成通用组件。&lt;/p&gt;
&lt;h2 id=&quot;技术实现&quot;&gt;&lt;a href=&quot;#技术实现&quot; class=&quot;headerlink&quot; title=&quot;技术实现&quot;&gt;&lt;/a&gt;技术实现&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;先用贝塞尔曲线画一个圆角矩形(就叫 &lt;code&gt;path&lt;/code&gt; 吧)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path.CGPath&lt;/code&gt; 赋值给 &lt;code&gt;CAShapeLayer&lt;/code&gt; 实例（就叫 &lt;code&gt;maskLayer&lt;/code&gt; 吧）&lt;/li&gt;
&lt;li&gt;根据线宽、分段间隙、&lt;code&gt;path&lt;/code&gt; 周长、总分段数、要展示的分段 index，可计算出 &lt;code&gt;lineDashPattern&lt;/code&gt; 和 &lt;code&gt;lineDashPhase&lt;/code&gt; 的值，刷新 &lt;code&gt;maskLayer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;maskLayer&lt;/code&gt; 赋值给 &lt;code&gt;CAGradientLayer&lt;/code&gt; 实例的 &lt;code&gt;mask&lt;/code&gt;。调整 &lt;code&gt;colors&lt;/code&gt; 等属性即可实现一个彩色渐变分段圆角矩形外圈。&lt;/li&gt;
&lt;li&gt;将多个这样的 &lt;code&gt;CAGradientLayer&lt;/code&gt; 实例重叠在一起，即可实现个别分段『高亮』效果。比如一个 layer 当做底色，另一个放上面当做灰色进度条。（PS：本文最开始的 gif 就是这样）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里面踩坑最多的就是前 3 个步骤，计算时需要考虑到一些边界条件。&lt;/p&gt;
&lt;h3 id=&quot;画圆角矩形的坑&quot;&gt;&lt;a href=&quot;#画圆角矩形的坑&quot; class=&quot;headerlink&quot; title=&quot;画圆角矩形的坑&quot;&gt;&lt;/a&gt;画圆角矩形的坑&lt;/h3&gt;&lt;p&gt;&lt;code&gt;+ bezierPathWithRoundedRect:cornerRadius:&lt;/code&gt; 方法是可以直接画出一个圆角矩形的，但是路径的起始点并没确定。表面上看上去是从顶部直线左端开始顺时针画，然而会有向右的一些偏差。这样就无法精确计算出 &lt;code&gt;lineDashPhase&lt;/code&gt; 的值，导致画出来的效果不对称了。&lt;/p&gt;
&lt;p&gt;于是我这里干脆自己画个圆角矩形，代码也很简单。由于要考虑到线宽，所以需要计算下真正的圆角半径和外接矩形尺寸，顺时针画四段直线四段四分之一圆弧即可。下面的代码是写在 &lt;code&gt;CAShapeLayer&lt;/code&gt; 子类里的：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIBezierPath&lt;/span&gt; *path = [&lt;span class=&quot;built_in&quot;&gt;UIBezierPath&lt;/span&gt; bezierPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dashRect = &lt;span class=&quot;built_in&quot;&gt;CGRectInset&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bounds, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dashWidth / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dashWidth / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; width = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dashRect.size.width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; height = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dashRect.size.height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius = MIN(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dashCornerRadius - &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dashWidth / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius = MAX(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; center = &lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.frame.size.width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.frame.size.height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[path moveToPoint:&lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(center.x - width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius, center.y - height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[path addLineToPoint:&lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(center.x + width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius, center.y - height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[path addArcWithCenter:&lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(center.x + width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius, center.y - height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius) radius:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius startAngle:M_PI_2 * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; endAngle:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; clockwise:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[path addLineToPoint:&lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(center.x + width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, center.y + height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[path addArcWithCenter:&lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(center.x + width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius, center.y + height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius) radius:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius startAngle:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; endAngle:M_PI_2 clockwise:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[path addLineToPoint:&lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(center.x - width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius, center.y + height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[path addArcWithCenter:&lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(center.x - width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius, center.y + height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius) radius:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius startAngle:M_PI_2 endAngle:M_PI clockwise:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[path addLineToPoint:&lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(center.x - width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, center.y - height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[path addArcWithCenter:&lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(center.x - width / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius, center.y - height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius) radius:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius startAngle:M_PI endAngle:M_PI_2 * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; clockwise:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.totalLength = (width + height) * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius * &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; + M_PI * &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.realDashCornerRadius * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.lineWidth = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dashWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.path = path.CGPath;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码也计算出了周长，用于下一步的分段长度计算。&lt;/p&gt;
&lt;h3 id=&quot;处理边界值&quot;&gt;&lt;a href=&quot;#处理边界值&quot; class=&quot;headerlink&quot; title=&quot;处理边界值&quot;&gt;&lt;/a&gt;处理边界值&lt;/h3&gt;&lt;p&gt;圆角矩形的周长已经算出来了，外部提供了 &lt;code&gt;dashGap&lt;/code&gt;，但是绘制时真正的分段间隙是需要考虑到线宽和分段总数的。因为线的边缘会有个半圆，半径为二分之一线宽。当只有一个分段的时候画一个完整的圆角矩形，不需要有间隙了。如果分段总数过多导致计算的分段长度 &lt;code&gt;pieceLength&lt;/code&gt; 小于 0，需要计算能展示出来分段数的最大值 &lt;code&gt;realTotalCount&lt;/code&gt;，并重新计算分段长度 &lt;code&gt;pieceLength&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; realDashGap = (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.totalCount == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dashGap + &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dashWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; realTotalCount = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.totalCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; pieceLength = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.totalLength / &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.totalCount - realDashGap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pieceLength &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pieceLength = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   realTotalCount = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.totalLength / realDashGap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pieceLength = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.totalLength / realTotalCount - realDashGap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Can&#39;t show! Reduce total count or dash gap! Real Total Count: %lu, Real Dash Gap:%ff&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)realTotalCount, realDashGap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Dash-策略&quot;&gt;&lt;a href=&quot;#Dash-策略&quot; class=&quot;headerlink&quot; title=&quot;Dash 策略&quot;&gt;&lt;/a&gt;Dash 策略&lt;/h3&gt;&lt;p&gt;&lt;code&gt;lineDashPhase&lt;/code&gt; 可以理解为 dash 距离 path 起始点的距离，想让 dash 从顶部中间开始，需要设置初始值：二分之一外接矩形宽度的减去圆角半径，再加上二分之一 &lt;code&gt;realDashGap&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self.lineDashPhase &lt;/span&gt;= - (&lt;span class=&quot;keyword&quot;&gt;self.dashRect.size.width &lt;/span&gt;/ &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;self.realDashCornerRadius &lt;/span&gt;+ realDashGap / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就是顺时针画需要展示的分段。输入是一个 &lt;code&gt;showIndexes&lt;/code&gt; 数组，比如一共有 10 个分段，想展示的是前两个和最后一个分段，那么 &lt;code&gt;showIndexes&lt;/code&gt; 的内容就是 &lt;code&gt;@[@0, @1, @9]&lt;/code&gt;。此时 &lt;code&gt;lineDashPattern&lt;/code&gt; 的值就应该是（&lt;code&gt;pieceLength&lt;/code&gt; 就是每个分段的长度）：&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@[&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@pieceLength,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@realDashGap,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@pieceLength,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@(realDashGap&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;*&lt;/span&gt; 8 + pieceLength &lt;span class=&quot;symbol&quot;&gt;*&lt;/span&gt; 7), &lt;span class=&quot;meta&quot;&gt;@pieceLength,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@realDashGap]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果 &lt;code&gt;showIndexes&lt;/code&gt; 的内容是 &lt;code&gt;@[@1, @2, @9]&lt;/code&gt;，可不可以让 &lt;code&gt;lineDashPattern&lt;/code&gt; 数组前面填 &lt;code&gt;@0&lt;/code&gt; 呢？&lt;/p&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@[&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@0,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@(pieceLength&lt;/span&gt; + realDashGap), &lt;span class=&quot;meta&quot;&gt;@pieceLength,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@realDashGap,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@pieceLength,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@(realDashGap&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;*&lt;/span&gt; 7 + pieceLength &lt;span class=&quot;symbol&quot;&gt;*&lt;/span&gt; 6), &lt;span class=&quot;meta&quot;&gt;@pieceLength,&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@realDashGap]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为把 &lt;code&gt;lineCap&lt;/code&gt; 设为了 &lt;code&gt;kCALineCapRound&lt;/code&gt;，即便长度为 0 路径也会展示成为一个圆点，半径就是线宽。然而安卓系统对应的 API 在这种情况就不会绘制出圆点。为此 iOS 更麻烦一点，需要再次调整&lt;code&gt;lineDashPhase&lt;/code&gt; 的值来『越过』前面几个分段。具体的实现代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;NSMutableArray&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;NSNumber&lt;/span&gt; *&amp;gt; *dashPattern = [&lt;span class=&quot;type&quot;&gt;NSMutableArray&lt;/span&gt; arrayWithCapacity:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * realTotalCount];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;NSInteger&lt;/span&gt; needsMovePhaseCount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; realTotalCount; i ++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.showIndexes containsObject:@(i)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [dashPattern addObject:@(pieceLength)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [dashPattern addObject:@(realDashGap)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dashPattern.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           dashPattern[dashPattern.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = @(dashPattern[dashPattern.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].doubleValue + pieceLength + realDashGap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.lineDashPhase -= (pieceLength + realDashGap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           needsMovePhaseCount ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (needsMovePhaseCount &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; dashPattern.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   dashPattern[dashPattern.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = @(dashPattern[dashPattern.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].doubleValue + (pieceLength + realDashGap) * needsMovePhaseCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.showIndexes.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.lineDashPattern = dashPattern;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;一开始做这种需求我是拒绝的，交互有点复杂啊，用户看不懂啊，说白了还是不知道咋实现心里没底啊！然而要是没有这种需求，也就没有这篇月末大水文了。&lt;/p&gt;
&lt;p&gt;我真是越来越水了，只会写 UI 了，还是搞底层的逆向大佬们牛逼啊！Hank 老师教教我！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;产品经理要求做个能展示进度的分段彩色外环，大概长这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/YXYDashLayer/blob/master/Assets/YXYDashLayer.gif?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;花了两天左右来实现和优化，记录下踩坑经历。&lt;/p&gt;
&lt;p&gt;组件已经开源，取个名字叫 &lt;code&gt;YXYDashLayer&lt;/code&gt; 吧：&lt;a href=&quot;https://github.com/yulingtianxia/YXYDashLayer&quot;&gt;https://github.com/yulingtianxia/YXYDashLayer&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yulingtianxia.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>追踪 Objective-C 方法中的 Block 参数对象</title>
    <link href="http://yulingtianxia.com/blog/2018/03/31/Track-Block-Arguments-of-Objective-C-Method/"/>
    <id>http://yulingtianxia.com/blog/2018/03/31/Track-Block-Arguments-of-Objective-C-Method/</id>
    <published>2018-03-31T15:44:39.000Z</published>
    <updated>2018-09-15T08:28:13.796Z</updated>
    
    <content type="html">&lt;p&gt;很多方法最后一个参数是类似于 &lt;code&gt;completionBlock&lt;/code&gt; 这种回调，然而有些 API 实现一些异常逻辑时会忘记调用传入的 Block 参数（当然这肯定是 bug 啦），或者存在多次调用。在调试的时候可能会碰到这种大坑，需要追踪下 Block 参数何时调用了，甚至是否调用过。如果不方便直接在 Block 实现中加代码，或者没有源码的情况下，就需要无侵入式地追踪 Block 参数对象。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/BlockTracker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockTracker&lt;/a&gt; 可以追踪方法调用时传入的 Block 类型的参数的执行和销毁。基于 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockHook&lt;/a&gt; 实现。本文讲述了它的使用方法和实现原理。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h2&gt;&lt;p&gt;只需要调用 &lt;code&gt;bt_trackBlockArgOfSelector:callback:&lt;/code&gt; 方法，就能在对应方法执行传入的 block 参数被调用和销毁的时候得到回调。回调中的内容包含了 &lt;code&gt;block&lt;/code&gt; 对象，回调类型，&lt;code&gt;block&lt;/code&gt; 已经执行的次数，执行 &lt;code&gt;block&lt;/code&gt; 的参数、返回值，堆栈信息。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BTTracker *tracker = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; bt_trackBlockArgOfSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(performBlock:) callback:^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;  _Nullable block, BlockTrackerCallbackType type, &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; invokeCount, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * _Nullable * _Null_unspecified args, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * _Nullable result, &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *&amp;gt; * _Nonnull callStackSymbols) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@ invoke count = %ld&quot;&lt;/span&gt;, BlockTrackerCallbackTypeInvoke == type ? &lt;span class=&quot;string&quot;&gt;@&quot;BlockTrackerCallBackTypeInvoke&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;@&quot;BlockTrackerCallBackTypeDead&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)invokeCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你不想追踪这个方法执行时传入的 block 参数时，也可以停止追踪：&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[tracker stop]&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;举个栗子，现在有个方法叫 &lt;code&gt;performBlock:&lt;/code&gt;，只是简单地调用了 &lt;code&gt;block&lt;/code&gt; 参数：&lt;/p&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;)performBlock:(&lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;(^)(&lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;))&lt;span class=&quot;keyword&quot;&gt;block&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;block&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;调用两次这个方法，每次都传入不同的 block 实现：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__block NSString *word = @&lt;span class=&quot;string&quot;&gt;&quot;I&#39;m a block&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self performBlock:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;add &#39;!!!&#39; to word&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   word = [word stringByAppendingString:@&lt;span class=&quot;string&quot;&gt;&quot;!!!&quot;&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self performBlock:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;%@&quot;&lt;/span&gt;, word)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为执行两次方法传入的是两个不同的 block 对象，所以会追踪两个 block 对象的执行和销毁，打印的 log 如下：&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;add &#39;!!!&#39; to word&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BlockTrackerCallBackTypeInvoke&lt;span class=&quot;built_in&quot;&gt; invoke &lt;/span&gt;count = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I&#39;m a block!!!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BlockTrackerCallBackTypeInvoke&lt;span class=&quot;built_in&quot;&gt; invoke &lt;/span&gt;count = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BlockTrackerCallBackTypeDead&lt;span class=&quot;built_in&quot;&gt; invoke &lt;/span&gt;count = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BlockTrackerCallBackTypeDead&lt;span class=&quot;built_in&quot;&gt; invoke &lt;/span&gt;count = 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 block 对象销毁的时候&lt;br&gt;你可以尝试着把 &lt;code&gt;performBlock:&lt;/code&gt; 的实现改成这样试试：&lt;/p&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;)performBlock:(&lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;(^)(&lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;))&lt;span class=&quot;keyword&quot;&gt;block&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;block&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;block&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;block&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;p&gt;原理很简单，就是 Hook 方法后再 Hook 下 Block，流程大致如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用 Objective-C Runtime 机制 Hook 某个方法，参考 &lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 的实现原理。&lt;/li&gt;
&lt;li&gt;在方法真正执行前，使用 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BlockHook&lt;/a&gt; 先 Hook 所有 Block 类型的参数。Hook 模式为 &lt;code&gt;BlockHookModeAfter&lt;/code&gt; 和 &lt;code&gt;BlockHookModeDead&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在 Block 执行后更新执行次数，并将相关信息回调给 Tracker。销毁后也会回调给 Tracker。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;流程大概很简单，复用以前代码。这里主要讲下 Track 的逻辑。&lt;/p&gt;
&lt;h3 id=&quot;过滤方法的-Block-参数&quot;&gt;&lt;a href=&quot;#过滤方法的-Block-参数&quot; class=&quot;headerlink&quot; title=&quot;过滤方法的 Block 参数&quot;&gt;&lt;/a&gt;过滤方法的 Block 参数&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;bt_trackBlockArgOfSelector:callback:&lt;/code&gt; 里获取方法的 Type Encoding 后判断是否含有 Block 类型的参数，并将 Block 参数的 Index 保存到 &lt;code&gt;BTTracker&lt;/code&gt; 的 &lt;code&gt;blockArgIndex&lt;/code&gt; 属性。&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (nullable &lt;span class=&quot;keyword&quot;&gt;BTTracker &lt;/span&gt;*)&lt;span class=&quot;keyword&quot;&gt;bt_trackBlockArgOfSelector:(SEL)selector &lt;/span&gt;callback:(&lt;span class=&quot;keyword&quot;&gt;BlockTrackerCallbackBlock)callback&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class cls = &lt;span class=&quot;keyword&quot;&gt;bt_classOfTarget(self);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method &lt;span class=&quot;keyword&quot;&gt;originMethod &lt;/span&gt;= class_getInstanceMethod(cls, selector)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!&lt;span class=&quot;keyword&quot;&gt;originMethod) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const char *&lt;span class=&quot;keyword&quot;&gt;originType &lt;/span&gt;= (char *)method_getTypeEncoding(&lt;span class=&quot;keyword&quot;&gt;originMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    if (![[NSString stringWithUTF8String:&lt;span class=&quot;keyword&quot;&gt;originType] &lt;/span&gt;containsString:@&lt;span class=&quot;string&quot;&gt;&quot;@?&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableArray *&lt;span class=&quot;keyword&quot;&gt;blockArgIndex &lt;/span&gt;= [NSMutableArray array]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int argIndex = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;; // return type is the first one&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while(&lt;span class=&quot;keyword&quot;&gt;originType &lt;/span&gt;&amp;amp;&amp;amp; *&lt;span class=&quot;keyword&quot;&gt;originType)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;originType &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;BHSizeAndAlignment(originType, &lt;/span&gt;NULL, NULL, NULL)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if ([[NSString stringWithUTF8String:&lt;span class=&quot;keyword&quot;&gt;originType] &lt;/span&gt;hasPrefix:@&lt;span class=&quot;string&quot;&gt;&quot;@?&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;blockArgIndex &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addObject:@(argIndex)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        argIndex++&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;BTTracker &lt;/span&gt;*tracker = &lt;span class=&quot;keyword&quot;&gt;BTEngine.defaultEngine.trackers[bt_methodDescription(self, &lt;/span&gt;selector)]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!tracker) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tracker = [[&lt;span class=&quot;keyword&quot;&gt;BTTracker &lt;/span&gt;alloc] initWithTarget:self selector:selector]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tracker.callback = callback&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tracker.&lt;span class=&quot;keyword&quot;&gt;blockArgIndex &lt;/span&gt;= [&lt;span class=&quot;keyword&quot;&gt;blockArgIndex &lt;/span&gt;copy]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return [tracker apply] ? tracker : nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;bt_trackBlockArgOfSelector:callback:&lt;/code&gt; 方法返回的 &lt;code&gt;BTTracker&lt;/code&gt; 对象也保存了 &lt;code&gt;callback&lt;/code&gt; 回调。&lt;/p&gt;
&lt;h3 id=&quot;执行-Callback&quot;&gt;&lt;a href=&quot;#执行-Callback&quot; class=&quot;headerlink&quot; title=&quot;执行 Callback&quot;&gt;&lt;/a&gt;执行 Callback&lt;/h3&gt;&lt;p&gt;遍历之前保存的 Block 参数 Index 列表 &lt;code&gt;blockArgIndex&lt;/code&gt;，从 &lt;code&gt;NSInvocation&lt;/code&gt; 中取到 Block 参数后，就可以 Hook 了。Block 的执行次数保存到了 &lt;code&gt;BHToken&lt;/code&gt; 上，每次执行都会累加。在 Block 执行或销毁后都会调用 &lt;code&gt;callback&lt;/code&gt;，只是传的参数稍有不同。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *index &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; tracker.blockArgIndex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (index.integerValue &amp;lt; invocation.methodSignature.numberOfArguments) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       __unsafe_unretained &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [invocation getArgument:&amp;amp;block atIndex:index.integerValue];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(block) weakBlock = block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(tracker) weakTracker = tracker;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       BHToken *tokenAfter = [block block_hookWithMode:BlockHookModeAfter usingBlock:^(BHToken *token) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           __&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(weakBlock) strongBlock = weakBlock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           __&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(weakTracker) strongTracker = weakTracker;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *invokeCount = objc_getAssociatedObject(token, &lt;span class=&quot;built_in&quot;&gt;NSSelectorFromString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;invokeCount&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!invokeCount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               invokeCount = @(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               invokeCount = [&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; numberWithInt:invokeCount.intValue + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           objc_setAssociatedObject(token, &lt;span class=&quot;built_in&quot;&gt;NSSelectorFromString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;invokeCount&quot;&lt;/span&gt;), invokeCount, OBJC_ASSO&lt;span class=&quot;built_in&quot;&gt;CIATION_RETAIN&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strongTracker.callback) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               strongTracker.callback(strongBlock, BlockTrackerCallbackTypeInvoke, invokeCount.intValue, token.args, token.retValue, [&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; callStackSymbols]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [block block_hookWithMode:BlockHookModeDead usingBlock:^(BHToken *token) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           __&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(weakTracker) strongTracker = weakTracker;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *invokeCount = objc_getAssociatedObject(tokenAfter, &lt;span class=&quot;built_in&quot;&gt;NSSelectorFromString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;invokeCount&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strongTracker.callback) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               strongTracker.callback(&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, BlockTrackerCallbackTypeDead, invokeCount.intValue, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, [&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; callStackSymbols]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;对-NSInvocation-的一点探索&quot;&gt;&lt;a href=&quot;#对-NSInvocation-的一点探索&quot; class=&quot;headerlink&quot; title=&quot;对 NSInvocation 的一点探索&quot;&gt;&lt;/a&gt;对 NSInvocation 的一点探索&lt;/h3&gt;&lt;p&gt;在从 &lt;code&gt;NSInvocation&lt;/code&gt; 对象获取参数时，需要先调用 &lt;code&gt;retainArguments&lt;/code&gt; 方法让 &lt;code&gt;NSInvocation&lt;/code&gt; 将 Block 参数 &lt;code&gt;copy&lt;/code&gt;。因为有些 Block 参数类型是 &lt;code&gt;__NSStackBlock__&lt;/code&gt;，需要拷贝到堆上，否则从 &lt;code&gt;NSInvocation&lt;/code&gt; 获取的 Block 不会销毁。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getArgument:atIndex:&lt;/code&gt; 方法只是将第 &lt;code&gt;index&lt;/code&gt; 个参数指针的值拷贝到 &lt;code&gt;buffer&lt;/code&gt; 中，而 &lt;code&gt;retainArguments&lt;/code&gt; 才是真的对 C 字符串和 Block 拷贝。&lt;/p&gt;
&lt;p&gt;我还为此做了个小实验。一个类外部声明并调用了 &lt;code&gt;test:&lt;/code&gt; 方法，但其实内部实现的是 &lt;code&gt;foo:&lt;/code&gt; 方法。通过实现 &lt;code&gt;methodSignatureForSelector:&lt;/code&gt; 让消息转发流程走到 &lt;code&gt;forwardInvocation:&lt;/code&gt; 方法中。然后向 Block 参数关联 &lt;code&gt;BTDealloc&lt;/code&gt; 对象，在 &lt;code&gt;test:&lt;/code&gt; 方法执行后，&lt;code&gt;BTDealloc&lt;/code&gt; 类的 &lt;code&gt;dealloc&lt;/code&gt; 方法并没有执行。也就是说通过 &lt;code&gt;NSInvocation&lt;/code&gt; 获取的 Block 参数没销毁；如果先调用了 &lt;code&gt;retainArguments&lt;/code&gt; 就会销毁。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;test:&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(^)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;))block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;foo:&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(^)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)) block &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    block();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSMethodSignature *)&lt;span class=&quot;string&quot;&gt;methodSignatureForSelector:&lt;/span&gt;(SEL)aSelector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [NSMethodSignature &lt;span class=&quot;string&quot;&gt;signatureWithObjCTypes:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;v@:@?&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;forwardInvocation:&lt;/span&gt;(NSInvocation *)anInvocation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    [anInvocation retainArguments];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; **invocationFrame = ((__bridge struct BTInvocaton *)anInvocation)-&amp;gt;frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *blockFromFrame = invocationFrame[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [anInvocation &lt;span class=&quot;string&quot;&gt;getArgument:&lt;/span&gt;&amp;amp;block &lt;span class=&quot;string&quot;&gt;atIndex:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BTDealloc *btDealloc = [BTDealloc &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_setAssociatedObject((__bridge id)block, &lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;foo:&lt;/span&gt;), btDealloc, OBJC_ASSOCIATION_RETAIN);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    anInvocation.selector = &lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;foo:&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [anInvocation invoke];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过对 &lt;code&gt;NSInvocation&lt;/code&gt; 对象的解析，我发现 &lt;code&gt;NSInvocation&lt;/code&gt; 的参数存储于一个私有成员变量 &lt;code&gt;_frame&lt;/code&gt; 中，试着将其强转为二级指针，也就是指针数组。拿到对应 index 的值 &lt;code&gt;blockFromFrame&lt;/code&gt; 跟 &lt;code&gt;block&lt;/code&gt; 作比较，发现是一样的。这里获取 &lt;code&gt;_frame&lt;/code&gt; 需要强转下，&lt;code&gt;NSInvocation&lt;/code&gt; 的内存模型如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;struct &lt;span class=&quot;keyword&quot;&gt;BTInvocaton &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void *isa&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void *frame&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void *retdata&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void *signature&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void *container&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uint8_t retainedArgs&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uint8_t reserved[&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;由于 Hook Method 的逻辑是在消息转发流程搞事情，所以跟 Aspects 一样不能同时 Hook 父类和子类类相同方法。因为如果子类调用父类的实现，就会死循环。如果 Hook 方法这部分使用 &lt;a href=&quot;http://yulingtianxia.com/blog/2017/04/17/Objective-C-Method-Swizzling/&quot;&gt;Method Swizzling&lt;/a&gt; 等交换 IMP 的方式实现，也会有着严重依赖 Hook 顺序导致调用错乱的问题。还是基于桥的 Hook 牛逼，汇编跳板，我这辈子是看不懂了。&lt;/p&gt;
&lt;p&gt;老子终于在这个月最后一天快结束的时候憋出来一篇大水文！搬砖累死了没时间研究技术，你们尽管喷！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;很多方法最后一个参数是类似于 &lt;code&gt;completionBlock&lt;/code&gt; 这种回调，然而有些 API 实现一些异常逻辑时会忘记调用传入的 Block 参数（当然这肯定是 bug 啦），或者存在多次调用。在调试的时候可能会碰到这种大坑，需要追踪下 Block 参数何时调用了，甚至是否调用过。如果不方便直接在 Block 实现中加代码，或者没有源码的情况下，就需要无侵入式地追踪 Block 参数对象。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/BlockTracker&quot;&gt;BlockTracker&lt;/a&gt; 可以追踪方法调用时传入的 Block 类型的参数的执行和销毁。基于 &lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot;&gt;BlockHook&lt;/a&gt; 实现。本文讲述了它的使用方法和实现原理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Hook Objective-C Block with Libffi</title>
    <link href="http://yulingtianxia.com/blog/2018/02/28/Hook-Objective-C-Block-with-Libffi/"/>
    <id>http://yulingtianxia.com/blog/2018/02/28/Hook-Objective-C-Block-with-Libffi/</id>
    <published>2018-02-28T11:05:24.000Z</published>
    <updated>2018-09-15T08:28:13.567Z</updated>
    
    <content type="html">&lt;p&gt;本文通过参照 &lt;code&gt;MABlockClosure&lt;/code&gt; 的实现和 &lt;code&gt;Aspects&lt;/code&gt; 的 API 设计，基于 libffi 实现了对 Objective-C Block 的 hook。GitHub 地址：&lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/BlockHook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;什么场景下需要 hook block 呢？在有源码的情况下，大部分程序员会选择直接在 block 中插代码。假如方法 A 的入参是个 block 对象，方法 A 将 block 传给方法 B,C…等。如果只有方法 A 的源码，上层传入的 block 和下层方法实现都是黑盒的话，想追踪 block 调用的时机，打印些 log，就得 hook 这个 block 对象了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h2&gt;&lt;p&gt;虽然 Github 上已经给了例子，用过 Aspects 的人一看就懂，但为了凑篇幅，还是多 BB 几句吧。&lt;/p&gt;
&lt;p&gt;API 虽然清奇，但是需要在 block 对象上用哦，在其他类型的对象上用是无效的！&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(BHToken *)&lt;/span&gt;block_hookWithMode:&lt;span class=&quot;params&quot;&gt;(BlockHookMode)&lt;/span&gt;mode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     usingBlock:&lt;span class=&quot;params&quot;&gt;(id)&lt;/span&gt;block&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;四种 hook 模式任你选择，可以对同一个 block 对象 hook 多次，但是要注意自己控制好顺序问题！hook 后会返回一个 &lt;code&gt;BHToken&lt;/code&gt; 对象，可以调用它的 &lt;code&gt;remove&lt;/code&gt; 方法来让 hook 失效。切记 &lt;code&gt;remove&lt;/code&gt; 的时候要按照 hook 时的逆序！（以后可以搞个栈优化下用户体验，暂时懒的弄）&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;name&quot;&gt;super&lt;/span&gt; viewDidLoad]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSObject *z = NSObject.new&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int (&lt;span class=&quot;name&quot;&gt;^block&lt;/span&gt;)(&lt;span class=&quot;name&quot;&gt;int&lt;/span&gt;, int) = ^(&lt;span class=&quot;name&quot;&gt;int&lt;/span&gt; x, int y) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   int result = x + y&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSLog(&lt;span class=&quot;name&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;%d + %d = %d, z is a NSObject: %p&quot;&lt;/span&gt;, x, y, result, z)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   return result&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BHToken *tokenInstead = [&lt;span class=&quot;name&quot;&gt;block&lt;/span&gt; block_hookWithMode:BlockHookModeInstead usingBlock:^(&lt;span class=&quot;name&quot;&gt;BHToken&lt;/span&gt; *token, int x, int y)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;name&quot;&gt;token&lt;/span&gt; invokeOriginalBlock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSLog(&lt;span class=&quot;name&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;let me see original result: %d&quot;&lt;/span&gt;, *(&lt;span class=&quot;name&quot;&gt;int&lt;/span&gt; *)(&lt;span class=&quot;name&quot;&gt;token.retValue&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // change the block imp and result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *(&lt;span class=&quot;name&quot;&gt;int&lt;/span&gt; *)(&lt;span class=&quot;name&quot;&gt;token.retValue&lt;/span&gt;) = x * y&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSLog(&lt;span class=&quot;name&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;hook instead: &#39;+&#39; -&amp;gt; &#39;*&#39;&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BHToken *tokenAfter = [&lt;span class=&quot;name&quot;&gt;block&lt;/span&gt; block_hookWithMode:BlockHookModeAfter usingBlock:^(&lt;span class=&quot;name&quot;&gt;BHToken&lt;/span&gt; *token, int x, int y)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // print args and result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSLog(&lt;span class=&quot;name&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;hook after block! %d * %d = %d&quot;&lt;/span&gt;, x, y, *(&lt;span class=&quot;name&quot;&gt;int&lt;/span&gt; *)(&lt;span class=&quot;name&quot;&gt;token.retValue&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BHToken *tokenBefore = [&lt;span class=&quot;name&quot;&gt;block&lt;/span&gt; block_hookWithMode:BlockHookModeBefore usingBlock:^(&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt; token)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // BHToken has to be the first arg.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSLog(&lt;span class=&quot;name&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;hook before block! token:%@&quot;&lt;/span&gt;, token)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BHToken *tokenDead = [&lt;span class=&quot;name&quot;&gt;block&lt;/span&gt; block_hookWithMode:BlockHookModeDead usingBlock:^(&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt; token)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // BHToken is the only arg.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSLog(&lt;span class=&quot;name&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;block dead! token:%@&quot;&lt;/span&gt;, token)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(&lt;span class=&quot;name&quot;&gt;dispatch_get_global_queue&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSLog(&lt;span class=&quot;name&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;hooked block&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   int ret = block(&lt;span class=&quot;name&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSLog(&lt;span class=&quot;name&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;hooked result:%d&quot;&lt;/span&gt;, ret)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // remove all tokens when you don&lt;span class=&quot;symbol&quot;&gt;&#39;t&lt;/span&gt; need.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // reversed order of hook.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;name&quot;&gt;tokenBefore&lt;/span&gt; remove]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;name&quot;&gt;tokenAfter&lt;/span&gt; remove]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [&lt;span class=&quot;name&quot;&gt;tokenInstead&lt;/span&gt; remove]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSLog(&lt;span class=&quot;name&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;remove tokens, original block&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ret = block(&lt;span class=&quot;name&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSLog(&lt;span class=&quot;name&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;original result:%d&quot;&lt;/span&gt;, ret)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//        [&lt;span class=&quot;name&quot;&gt;tokenDead&lt;/span&gt; remove]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以通过设置 &lt;code&gt;BHToken&lt;/code&gt; 的 &lt;code&gt;retValue&lt;/code&gt; 属性来修改 block 的返回值。&lt;code&gt;usingBlock:&lt;/code&gt; 的参数内容是自定义的，跟 Aspects 一样，用户自己填上对应的参数列表。完整参数列表的内容就是 &lt;code&gt;BHToken&lt;/code&gt;（第一个参数）+ 原始 block 参数列表。看上面的例子应该很容易看懂。可以在 hook 的 block 中获取参数和修改返回值，打log，做些有(wei)趣(suo)的事情。&lt;/p&gt;
&lt;p&gt;上面代码执行后的 log 结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hooked block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hook before block! &lt;span class=&quot;string&quot;&gt;token:&lt;/span&gt;&amp;lt;&lt;span class=&quot;string&quot;&gt;BHToken:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0x1d00f0d80&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, z is a &lt;span class=&quot;string&quot;&gt;NSObject:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0x1d00172b0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let me see original &lt;span class=&quot;string&quot;&gt;result:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hook &lt;span class=&quot;string&quot;&gt;instead:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hook after block! &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hooked &lt;span class=&quot;string&quot;&gt;result:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;remove tokens, original block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, z is a &lt;span class=&quot;string&quot;&gt;NSObject:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0x1d00172b0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;original &lt;span class=&quot;string&quot;&gt;result:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;block dead! &lt;span class=&quot;string&quot;&gt;token:&lt;/span&gt;&amp;lt;&lt;span class=&quot;string&quot;&gt;BHToken:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0x1d00f9900&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;老铁稳。&lt;/p&gt;
&lt;p&gt;因为需要动态定义和运行函数，用到了 libffi，所以还需要引入对应架构的静态库，自己去官网下个编译好，在工程中引入 libffi.a 和包含头文件的 include 文件夹就行。示例程序 BlockHookSample 使用的是 arm64 架构。具体做法是在 Build Settings 中的 Other Link Flags 加入 libffi.a 的路径，在 Header Search Paths 加入 include 文件夹路径。&lt;/p&gt;
&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;p&gt;先说下大致思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据 block 对象的签名，使用 &lt;code&gt;ffi_prep_cif&lt;/code&gt; 构建 block-&amp;gt;invoke 函数的模板 &lt;code&gt;cif&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;ffi_closure&lt;/code&gt;，根据 cif 动态定义函数 &lt;code&gt;replacementInvoke&lt;/code&gt;，并指定通用的实现函数为 &lt;code&gt;ClosureFunc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 block-&amp;gt;invoke 替换为 &lt;code&gt;replacementInvoke&lt;/code&gt;，原始的 block-&amp;gt;invoke 存放在 &lt;code&gt;originInvoke&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;ClosureFunc&lt;/code&gt; 中动态调用 &lt;code&gt;originInvoke&lt;/code&gt; 函数和执行 hook 的逻辑。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对 libffi 的介绍和用法有很多文章可以参考，这里不再赘述。&lt;/p&gt;
&lt;p&gt;再整理下代码设计思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BHToken&lt;/code&gt;: 它实现了 hook 的逻辑，存储了相关的上下文。是最主要的类。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSObject (BlockHook)&lt;/code&gt;: 提供 hook 的接口，每次 hook block 对象都会创建一个 &lt;code&gt;BHToken&lt;/code&gt;，并将其返回给用户。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BHCenter&lt;/code&gt; 管理 &lt;code&gt;BHToken&lt;/code&gt; 对象的中心，以后可以拓展更多玩法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面列举下 &lt;code&gt;BHToken&lt;/code&gt; 中几个比较重要的逻辑。&lt;/p&gt;
&lt;h3 id=&quot;通过-Block-创建函数模板&quot;&gt;&lt;a href=&quot;#通过-Block-创建函数模板&quot; class=&quot;headerlink&quot; title=&quot;通过 Block 创建函数模板&quot;&gt;&lt;/a&gt;通过 Block 创建函数模板&lt;/h3&gt;&lt;p&gt;有关 Objective-C Block 内存模型这里不再赘述，Block ABI 可以在 &lt;a href=&quot;https://clang.llvm.org/docs/Block-ABI-Apple.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clang 文档&lt;/a&gt; 查到。根据 block 的 flag 位掩码计算偏移拿到 Type Encoding 签名 signature。&lt;code&gt;BHBlockTypeEncodeString()&lt;/code&gt; 函数实现了这些逻辑，代码不贴了。一个 block 的签名格式是：[返回值类型和偏移][@?0][参数0类型和偏移][参数1类型和偏移]…，比如 arm64 下 &lt;code&gt;int (^block)(int, int)&lt;/code&gt; 的签名是 &lt;code&gt;i16@?0i8i12&lt;/code&gt;。block 指针占 8 字节，参数和返回值 &lt;code&gt;int&lt;/code&gt; 都是 4 字节。&lt;/p&gt;
&lt;p&gt;然后需要把 signature 字符串处理分拆成参数类型列表，在 libffi 中使用 &lt;code&gt;ffi_type&lt;/code&gt; 表示各种类型。&lt;code&gt;_argsWithEncodeString:getCount:&lt;/code&gt; 方法会根据 Type Encoding 规则，将 signature 逐个字符处理，可以获取 &lt;code&gt;ffi_type *&lt;/code&gt; 参数（返回值）数组和参数个数。&lt;code&gt;_ffiArgForEncode:&lt;/code&gt; 方法负责将 Type Encoding 字符映射到对应的 &lt;code&gt;ffi_type&lt;/code&gt; 上，这是个很长的方法。&lt;/p&gt;
&lt;p&gt;有了参数类型列表，返回值类型，参数个数后，就可以调用 &lt;code&gt;ffi_prep_cif()&lt;/code&gt; 函数创建 &lt;code&gt;ffi_cif&lt;/code&gt; 了，也就是函数模板。&lt;code&gt;_prepCIF:withEncodeString:&lt;/code&gt; 方法实现了这个逻辑。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;_prepCIF:&lt;/span&gt;(ffi_cif *)cif &lt;span class=&quot;string&quot;&gt;withEncodeString:&lt;/span&gt;(const &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)str&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ffi_type **argTypes = [self &lt;span class=&quot;string&quot;&gt;_argsWithEncodeString:&lt;/span&gt;str &lt;span class=&quot;string&quot;&gt;getCount:&lt;/span&gt;&amp;amp;argCount];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ffi_status status = ffi_prep_cif(cif, FFI_DEFAULT_ABI, argCount, [self &lt;span class=&quot;string&quot;&gt;_ffiArgForEncode:&lt;/span&gt; str], argTypes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(status != FFI_OK)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;Got result %ld from ffi_prep_cif&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        abort();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; argCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建闭包，替换-Block-的-invoke&quot;&gt;&lt;a href=&quot;#创建闭包，替换-Block-的-invoke&quot; class=&quot;headerlink&quot; title=&quot;创建闭包，替换 Block 的 invoke&quot;&gt;&lt;/a&gt;创建闭包，替换 Block 的 &lt;code&gt;invoke&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;可以使用函数模板（&lt;code&gt;ffi_cif&lt;/code&gt;）和一个函数指针（&lt;code&gt;replacementInvoke&lt;/code&gt;）创建闭包(&lt;code&gt;ffi_closure&lt;/code&gt;)。&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_closure = ffi_closure_alloc(&lt;span class=&quot;name&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;ffi_closure&lt;/span&gt;), &lt;span class=&quot;symbol&quot;&gt;&amp;amp;_replacementInvoke&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当 &lt;code&gt;replacementInvoke()&lt;/code&gt; 函数被调用时，绑定到闭包上的函数 &lt;code&gt;void BHFFIClosureFunc(ffi_cif *cif, void *ret, void **args, void *userdata)&lt;/code&gt; 会被调用。传给 &lt;code&gt;replacementInvoke()&lt;/code&gt; 的参数及其返回值都会被传给 &lt;code&gt;BHFFIClosureFunc()&lt;/code&gt;。&lt;code&gt;ffi_prep_closure_loc&lt;/code&gt; 函数的倒数第二个参数是 &lt;code&gt;user_data&lt;/code&gt;，也会被传给 &lt;code&gt;BHFFIClosureFunc()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)_prepClosure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ffi_status status = ffi_prep_closure_loc(_closure, &amp;amp;_cif, BHFFIClosureFunc, (__bridge void *)(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;), _replacementInvoke);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(status != FFI_OK)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;ffi_prep_closure returned %d&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        abort();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// exchange invoke func imp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _originInvoke = ((__bridge &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_BHBlock&lt;/span&gt;&lt;/span&gt; *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.block)-&amp;gt;invoke;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ((__bridge &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_BHBlock&lt;/span&gt;&lt;/span&gt; *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.block)-&amp;gt;invoke = _replacementInvoke;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将函数指针 &lt;code&gt;_replacementInvoke&lt;/code&gt; 和函数模板 &lt;code&gt;_cif&lt;/code&gt; 绑定函数闭包之后，需要将 block 的 &lt;code&gt;invoke&lt;/code&gt; 替换成 &lt;code&gt;_replacementInvoke&lt;/code&gt;，并把原始的实现存到 &lt;code&gt;_originInvoke&lt;/code&gt;。&lt;code&gt;invoke&lt;/code&gt; 函数的模板跟 block 的签名内容是一致的。&lt;/p&gt;
&lt;p&gt;这样当 block 调用时，实际上会调用 &lt;code&gt;_replacementInvoke&lt;/code&gt; 函数，进而调用 &lt;code&gt;BHFFIClosureFunc&lt;/code&gt; 通用函数。在这里面会实现 hook 的逻辑。&lt;/p&gt;
&lt;p&gt;还原 Hook 的 &lt;code&gt;remove&lt;/code&gt; 逻辑也很简单，将 &lt;code&gt;_originInvoke&lt;/code&gt; 恢复到 &lt;code&gt;invoke&lt;/code&gt; 即可：&lt;/p&gt;
&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;((__bridge struct _BHBlock *)self.block)&lt;/span&gt;-&amp;gt;&lt;/span&gt;invoke = _originInvoke;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;实现通用-Hook-函数&quot;&gt;&lt;a href=&quot;#实现通用-Hook-函数&quot; class=&quot;headerlink&quot; title=&quot;实现通用 Hook 函数&quot;&gt;&lt;/a&gt;实现通用 Hook 函数&lt;/h3&gt;&lt;p&gt;所有被 hook 的 block 调用时都会走到 &lt;code&gt;BHFFIClosureFunc&lt;/code&gt; 这里，可以拿到 block-&amp;gt;invoke 的函数模板，返回值指针，参数列表。还有自定义的 &lt;code&gt;userdata&lt;/code&gt;，传入的是 &lt;code&gt;BHToken&lt;/code&gt; 对象。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;ffi_call()&lt;/code&gt; 动态调用 block 的原始实现 &lt;code&gt;_originInvoke&lt;/code&gt;，并将参数列表和返回值指针传入。还需要传入函数模板，满足 Calling Convention。&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static void BHFFIClosureFunc(ffi_cif *cif, void *&lt;span class=&quot;keyword&quot;&gt;ret&lt;/span&gt;, void **&lt;span class=&quot;keyword&quot;&gt;args&lt;/span&gt;, void *userdata)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BHToken *&lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt; = (__bridge BHToken *)(userdata);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.retValue = &lt;span class=&quot;keyword&quot;&gt;ret&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (BlockHookModeBefore == &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt; invokeHookBlockWithArgs:&lt;span class=&quot;keyword&quot;&gt;args&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(BlockHookModeInstead == &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.mode &amp;amp;&amp;amp; [&lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt; invokeHookBlockWithArgs:&lt;span class=&quot;keyword&quot;&gt;args&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ffi_call(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;-&amp;gt;_cif, &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;-&amp;gt;_originInvoke, &lt;span class=&quot;keyword&quot;&gt;ret&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;args&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (BlockHookModeAfter == &lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt;.mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;token&lt;/span&gt; invokeHookBlockWithArgs:&lt;span class=&quot;keyword&quot;&gt;args&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据 Hook mode，会在不同的时机调用 &lt;code&gt;invokeHookBlockWithArgs:&lt;/code&gt; 方法执行 hook 的逻辑。&lt;/p&gt;
&lt;h3 id=&quot;组装-NSInvocation-执行-Hook-逻辑&quot;&gt;&lt;a href=&quot;#组装-NSInvocation-执行-Hook-逻辑&quot; class=&quot;headerlink&quot; title=&quot;组装 NSInvocation 执行 Hook 逻辑&quot;&gt;&lt;/a&gt;组装 &lt;code&gt;NSInvocation&lt;/code&gt; 执行 Hook 逻辑&lt;/h3&gt;&lt;p&gt;Hook 逻辑实现在 &lt;code&gt;self.hookBlock&lt;/code&gt; 中，被 Hook 的 block 是 &lt;code&gt;self.block&lt;/code&gt;，分别获取两者的签名，并拷贝后者的参数传给前者构造的 &lt;code&gt;blockInvocation&lt;/code&gt;。这里要注意 &lt;code&gt;self.hookBlock&lt;/code&gt; 的参数比 &lt;code&gt;self.block&lt;/code&gt; 多一个 &lt;code&gt;token&lt;/code&gt;，所以在二者参数比对和传递时需要特殊处理下。最后执行 &lt;code&gt;blockInvocation&lt;/code&gt;，即调用了 &lt;code&gt;usingBlock:&lt;/code&gt; 的参数。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)invokeHookBlockWithArgs:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; **)args&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.block || !&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.hookBlock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMethodSignature&lt;/span&gt; *hookBlockSignature = [&lt;span class=&quot;built_in&quot;&gt;NSMethodSignature&lt;/span&gt; signatureWithObjCTypes:BHBlockTypeEncodeString(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.hookBlock)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMethodSignature&lt;/span&gt; *originalBlockSignature = [&lt;span class=&quot;built_in&quot;&gt;NSMethodSignature&lt;/span&gt; signatureWithObjCTypes:BHBlockTypeEncodeString(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.block)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSInvocation&lt;/span&gt; *blockInvocation = [&lt;span class=&quot;built_in&quot;&gt;NSInvocation&lt;/span&gt; invocationWithMethodSignature:hookBlockSignature];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// origin block invoke func arguments: block(self), ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// hook block signature arguments: block(self), token, ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hookBlockSignature.numberOfArguments &amp;gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.numberOfArguments + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Block has too many arguments. Not calling %@&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hookBlockSignature.numberOfArguments &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [blockInvocation setArgument:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)&amp;amp;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; atIndex:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *argBuf = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; idx = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; idx &amp;lt; hookBlockSignature.numberOfArguments; idx++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *type = [originalBlockSignature getArgumentTypeAtIndex:idx - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; argSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSGetSizeAndAlignment&lt;/span&gt;(type, &amp;amp;argSize, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(argBuf = reallocf(argBuf, argSize))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Failed to allocate memory for block invocation.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        memcpy(argBuf, args[idx - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], argSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [blockInvocation setArgument:argBuf atIndex:idx];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [blockInvocation invokeWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.hookBlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (argBuf != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        free(argBuf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为用户传入的 &lt;code&gt;hookBlock&lt;/code&gt; 签名是不确定的，所以需要针对参数数量判断临界条件。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;又是大水文一篇，总算是在月末憋出来了。因为只花了一天时间写代码，实在太仓促，肯定还有一堆 bug。目前不建议用到生产环境上，辅助 debug 还是可以的，以后会慢慢优化。也欢迎各位老铁们提 PR：&lt;a href=&quot;https://github.com/yulingtianxia/BlockHook/pulls&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/BlockHook/pulls&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码大量参考了 &lt;a href=&quot;https://github.com/mikeash/MABlockClosure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MABlockClosure&lt;/a&gt; 的一些工具函数，API 设计上致敬 &lt;a href=&quot;https://github.com/steipete/Aspects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Aspects&lt;/a&gt;。技术上如有疏漏，还请各位大佬们多多指教。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文通过参照 &lt;code&gt;MABlockClosure&lt;/code&gt; 的实现和 &lt;code&gt;Aspects&lt;/code&gt; 的 API 设计，基于 libffi 实现了对 Objective-C Block 的 hook。GitHub 地址：&lt;a href=&quot;https://github.com/yulingtianxia/BlockHook&quot;&gt;https://github.com/yulingtianxia/BlockHook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;什么场景下需要 hook block 呢？在有源码的情况下，大部分程序员会选择直接在 block 中插代码。假如方法 A 的入参是个 block 对象，方法 A 将 block 传给方法 B,C…等。如果只有方法 A 的源码，上层传入的 block 和下层方法实现都是黑盒的话，想追踪 block 调用的时机，打印些 log，就得 hook 这个 block 对象了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>How to make a Pebble watchface</title>
    <link href="http://yulingtianxia.com/blog/2018/01/15/How-to-make-a-Pebble-watchface/"/>
    <id>http://yulingtianxia.com/blog/2018/01/15/How-to-make-a-Pebble-watchface/</id>
    <published>2018-01-14T16:00:17.000Z</published>
    <updated>2018-09-15T08:28:13.892Z</updated>
    
    <content type="html">&lt;p&gt;之前的 leader 送了我一块 Pebble 智能手表，俗话说『穷玩车，富玩表』，希望自己能在 2018 年里『变有钱』，那就多玩玩表吧！&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;首先简单介绍下 pebble。这个系列的智能手表虽然没有触屏，甚至有的型号是黑白背光屏，但提供了四个硕大的按钮用于上滚、下滚，进入和退出操作。它的数据传输需要依赖于手机的蓝牙连接，相当于一块副屏。但能在手表上独立运行 app，不像 watchOS 1 那样必须依赖手机上的 host app。其优势是续航性和性价比。pebble 曾一度跟安卓和 iOS 系统有三分天下之势，国外很多 geek 都喜欢搞搞 pebble。它甚至提供了云端编程环境，开发者很容易上手，查文档也十分便捷。经历一些固件升级后，开发语言也从 C 语言拓展到了 JS。 发布 app 的流程也很简单，geek 们可以在上面搞些有趣的事情了。&lt;/p&gt;
&lt;p&gt;你可以在 pebble 上安装各种 app，比如查看 evernote，玩一些小游戏。用户输入只有四个按钮，以及重力感应传感器、健康相关传感器等。功能上略差，但能续航一周。它也解决了大部分关于时间的刚需，比如定制表盘，接收通知，计时器等。&lt;/p&gt;
&lt;p&gt;出于对 pebble 的好奇以及感叹时间从自己身边流逝，时刻提醒自己把握当下珍惜每一秒，我做了一个简单有趣的 watchface。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/Pebble-MoHa/blob/master/watchface.gif?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;戴着黑框眼镜的程序员哥哥在手表中仿佛看到了自己，并时刻提醒着我们珍惜每一秒的光阴。pebble 以超长续航能力著称，于是我索性将电池电量一直显示满格，满足一切强迫症患者！同样以『超长待机』著称的英国女王伊丽莎白二世出生于 1926 年，有了来自女王的 buff 加持，你的 pebble 将会更持久更耐用！&lt;/p&gt;
&lt;p&gt;为了展现上面 GIF 的效果，我设置了个定时器每秒回调下面的函数：&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; void update_time() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取当地时间戳&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  time_t temp = time(NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tm&lt;/span&gt;&lt;/span&gt; *tick_time = localtime(&amp;amp;temp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 时间戳转字符串：时，分，显示到 label 上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; s_hour_buffer[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  strftime(s_hour_buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(s_hour_buffer), clock_is_24h_style() ?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                          &lt;span class=&quot;string&quot;&gt;&quot;%H&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;%I&quot;&lt;/span&gt;, tick_time);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  text_layer_set_text(s_left_time_layer, s_hour_buffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; s_minute_buffer[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  strftime(s_minute_buffer, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(s_minute_buffer), &lt;span class=&quot;string&quot;&gt;&quot;%M&quot;&lt;/span&gt;, tick_time);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  text_layer_set_text(s_right_time_layer, s_minute_buffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 每隔一秒切换下显示状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tick_time-&amp;gt;tm_sec % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layer_set_hidden((Layer *)s_eye_layer, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layer_set_hidden((Layer *)s_left_time_layer, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layer_set_hidden((Layer *)s_right_time_layer, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bitmap_layer_set_bitmap(s_nose_layer, s_nose_empty_bitmap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layer_set_hidden((Layer *)s_eye_layer, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layer_set_hidden((Layer *)s_left_time_layer, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layer_set_hidden((Layer *)s_right_time_layer, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bitmap_layer_set_bitmap(s_nose_layer, s_nose_bitmap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 显示每日金句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *s_words[] = &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;You Naive!&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;I&#39;m angry!&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;2 young 2 simple&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Wearing 3 watch&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Apply for Professor&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Excited!&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Sometimes naive!&quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  text_layer_set_text(s_word_layer, s_words[tick_time-&amp;gt;tm_wday]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终实现的代码只有一百多行，GitHub 地址： &lt;a href=&quot;https://github.com/yulingtianxia/Pebble-MoHa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/Pebble-MoHa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里说几个开发时需要注意的地方：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;显示带 alpha 通道的 png 图片时需要参照下&lt;a href=&quot;https://developer.pebble.com/blog/2015/05/13/tips-and-tricks-transparent-images/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇指引&lt;/a&gt;，我 P 图的时候干脆搞成不透明的了。&lt;/li&gt;
&lt;li&gt;位图无法缩放，但可以设置其在 &lt;code&gt;BitmapLayer&lt;/code&gt; 中的对齐策略。&lt;/li&gt;
&lt;li&gt;加载资源时需要加上 &lt;code&gt;RESOURCE_ID_&lt;/code&gt; 前缀。&lt;/li&gt;
&lt;li&gt;系统自带的字体并不是所有字号都有的，种类很有限。&lt;/li&gt;
&lt;li&gt;圆形手表的 &lt;code&gt;Window&lt;/code&gt; 的 &lt;code&gt;bounds.size&lt;/code&gt; 是外接矩形，有内建方法判断是否是圆形手表。&lt;/li&gt;
&lt;li&gt;真机调试需要打开手机上 Pebble 官方 App，打开开发者模式，开启开发者连接，保持蓝牙连接，让电脑与手机在同一个子网内。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我选择使用云端开发工具 &lt;a href=&quot;https://cloudpebble.net/ide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CloudPebble&lt;/a&gt; 而不是本地 sdk，主要是因为 CloudPebble 集成了一套创建和管理工程、托管代码和资源、在真机或模拟器编译运行、持续集成以及支持同步 GitHub 的开发环境。很适合初学者快速上手，敏捷开发。&lt;/p&gt;
&lt;p&gt;开发语言选择 C 语言，并不是为了装逼，也不是因为我不会 JS，而是因为 leader 送我的手表所支持固件最新版本目前为 v3.12.3，而使用 JS 开发需要依赖 Rocky.js，要求固件版本 v4.x。&lt;/p&gt;
&lt;p&gt;强烈建议看这篇&lt;a href=&quot;https://developer.pebble.com/tutorials/watchface-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方开发者教程&lt;/a&gt;来快速入门。不得不说 pebble 的开发者博客里无论是文档还是教程都很赞，就是有些 demo 的 github 连接失效了。不过按照教程一步步去做终归还是很容易搞定的。&lt;/p&gt;
&lt;p&gt;使用 &lt;a href=&quot;https://developer.pebble.com/docs/c/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pebble C SDK&lt;/a&gt; 的 API 时会用到各种功能的函数，监听回调也都是传入自定义函数指针。跟 UI 相关的 API 跟移动开发很类似，也会提供 &lt;code&gt;Window&lt;/code&gt;，&lt;code&gt;Layer&lt;/code&gt;，&lt;code&gt;GBitmap&lt;/code&gt; 等类型。因为不涉及到 UI 的点击，所以会简单很多。但要注意的是对象的生命周期，每次调用 xxx_create 方法一定要对应调用 xxx_destroy 方法。&lt;code&gt;Layer&lt;/code&gt; 有很多子类，比如 &lt;code&gt;TextLayer&lt;/code&gt;,&lt;code&gt;BitmapLayer&lt;/code&gt; 等。这些子类可以很方便地显示文字和图片等内容。对于这次我做的 watchface 来说，图片和文字已经够用了。构建 &lt;code&gt;Layer&lt;/code&gt; 的层级关系也很简单，比如用 &lt;code&gt;layer_add_child()&lt;/code&gt; 就能往一个 &lt;code&gt;Layer&lt;/code&gt; 上添加其他 &lt;code&gt;Layer&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;目前 pebble 项目所支持的图片资源种类很少，且对二进制和资源大小均有限制。毕竟手表上能发挥的空间有限，所以将大部分逻辑放在手机上。通过蓝牙将数据传输给手表，手表上只负责展示一些比较及时的数据，做一些简单的操作同步数据给手机。所以 pebble 也提供了 iOS 和 Android 对应的 sdk。&lt;/p&gt;
&lt;p&gt;pebble 推出了好几款手表，所以一个项目对应的 target 也有五种之多。所幸的是 CloudPebble 的模拟器提供了这五种 target 的模拟器，在网页中编程也有较好的编程体验，支持高亮和查看文档。管理资源更是简单，每种 target 都提供预览。项目配置也都是可视化操作，十分容易上手。&lt;/p&gt;
&lt;p&gt;以上内容就是开发一款 pebble watchface 的基本法则，喜欢的话可以去主页点个赞：&lt;a href=&quot;https://apps.getpebble.com/applications/5a4b9bfc0dfc329496001b60&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://apps.getpebble.com/applications/5a4b9bfc0dfc329496001b60&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前的 leader 送了我一块 Pebble 智能手表，俗话说『穷玩车，富玩表』，希望自己能在 2018 年里『变有钱』，那就多玩玩表吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="http://yulingtianxia.com/tags/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>Associated Object 与 Dealloc</title>
    <link href="http://yulingtianxia.com/blog/2017/12/15/Associated-Object-and-Dealloc/"/>
    <id>http://yulingtianxia.com/blog/2017/12/15/Associated-Object-and-Dealloc/</id>
    <published>2017-12-14T16:19:21.000Z</published>
    <updated>2018-09-15T08:28:13.669Z</updated>
    
    <content type="html">&lt;p&gt;我的 Objective-C 消息节流防抖库 &lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 需要实现一个特性：当 &lt;code&gt;MTRule&lt;/code&gt; 的 &lt;code&gt;target&lt;/code&gt; 释放后，自动调用 &lt;code&gt;MTRule&lt;/code&gt; 的 &lt;code&gt;discard&lt;/code&gt; 方法。后来使用了业界很早就已有的方案：Associated Object，在这里整理下相关的知识点。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;问题的由来&quot;&gt;&lt;a href=&quot;#问题的由来&quot; class=&quot;headerlink&quot; title=&quot;问题的由来&quot;&gt;&lt;/a&gt;问题的由来&lt;/h2&gt;&lt;p&gt;起初的思路是考虑到 &lt;code&gt;MTRule&lt;/code&gt; 的 &lt;code&gt;target&lt;/code&gt; 属性是 &lt;code&gt;weak&lt;/code&gt; 的，想在其释放之前，也就是 &lt;code&gt;target&lt;/code&gt; 变成 &lt;code&gt;nil&lt;/code&gt; 之前调用 &lt;code&gt;MTRule&lt;/code&gt; 对象的 &lt;code&gt;discard&lt;/code&gt;  方法。然而 &lt;code&gt;target&lt;/code&gt; 被释放赋值为 &lt;code&gt;nil&lt;/code&gt; 的操作并不能通过 KVO 之类来监听，因为其并不是在外部通过 set 方法，这涉及到 &lt;code&gt;weak&lt;/code&gt; 的实现原理（PS: 可以查看源码中 &lt;code&gt;weak_clear_no_lock()&lt;/code&gt; 函数的实现）。于是问题转而变成了『在对象销毁前得到通知』。&lt;/p&gt;
&lt;p&gt;接着我在 MacRumors 上找到了一篇 2005 年的&lt;a href=&quot;https://forums.macrumors.com/threads/getting-notified-when-an-object-instance-is-deallocated.976309/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;贴子&lt;/a&gt;。大概内容就是讲通过 KVO 监听 &lt;code&gt;retainCount&lt;/code&gt; 属性纯属失了智，众所周知 &lt;code&gt;retainCount&lt;/code&gt; 不能真实反映对象内存管理的情况，即便 &lt;code&gt;retainCount&lt;/code&gt; 为 &lt;code&gt;1&lt;/code&gt; 的时候收到了 &lt;code&gt;release&lt;/code&gt; 消息，也会直接 &lt;code&gt;dealloc&lt;/code&gt; 掉，并不会变成 &lt;code&gt;0&lt;/code&gt;。接着又有人说干脆 hook 下 &lt;code&gt;dealloc&lt;/code&gt; 方法，然后抛通知，但是这样不安全。直到 2008 年 DenNukem 回帖说他直到咋办啦，用 Associated Object！&lt;/p&gt;
&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;p&gt;当一个对象（Host）释放后，其关联的对象（Associated Object）也会被解除。可以在 Host 对象上添加 Associated Object，策略用 &lt;code&gt;OBJC_ASSOCIATION_RETAIN&lt;/code&gt;。由于只有 Host 持有了这个 Associated Object，当 Host 释放后 Associated Object 也会被释放。在 Associated Object 的 &lt;code&gt;dealloc&lt;/code&gt; 方法中告知外界其 Host 对象已经释放。Perfect！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;dealloc&lt;/code&gt; 方法的调用顺序是从子类到父类直至 &lt;code&gt;NSObject&lt;/code&gt; 的，&lt;code&gt;NSObject&lt;/code&gt; 的 &lt;code&gt;dealloc&lt;/code&gt; 会调用 &lt;code&gt;object_dispose()&lt;/code&gt; 函数，进而移除 Associated Object。&lt;/strong&gt;具体的实现如下:&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;object_dispose(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!obj) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 销毁对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_destructInstance(obj);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 释放内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    free(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *objc_destructInstance(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Read all of the flags at once for performance.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; cxx = obj-&amp;gt;hasCxxDtor();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; assoc = obj-&amp;gt;hasAssociatedObjects();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// This order is important.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// C++ 析构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cxx) object_cxxDestruct(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 移除 Associated Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (assoc) _object_remove_assocations(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ARC 下调用实例变量的 release 方法，移除 weak 引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obj-&amp;gt;clearDeallocating();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;也就是说 Associated Object 的 &lt;code&gt;dealloc&lt;/code&gt; 调用时 Host 已经释放了，无法拿到关于 Host 对象的任何信息了。但这其实对于大部分场景已经足够了，给外界一个 block/delegate callback，甚至是抛通知都 OK 的。&lt;/strong&gt;实现起来很简单，代码很少，网上也可以找到一些 &lt;a href=&quot;https://blog.slaunchaman.com/2011/04/11/fun-with-the-objective-c-runtime-run-code-at-deallocation-of-any-object/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MRC&lt;/a&gt; 或 &lt;a href=&quot;https://github.com/ChenYilong/CYLDeallocBlockExecutor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ARC&lt;/a&gt; 下实现的示例代码。&lt;/p&gt;
&lt;p&gt;虽说 Runtime 帮我们自动移除了 Associated Object，但对我这种平常几乎一直写 MRC 代码的人来说还真有点不适应，毕竟脑子里时刻警惕着：每一次 &lt;code&gt;retain&lt;/code&gt; 都要配套来一次 &lt;code&gt;release&lt;/code&gt; 或 &lt;code&gt;autorelease&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;MessageThrottle-的特殊定制&quot;&gt;&lt;a href=&quot;#MessageThrottle-的特殊定制&quot; class=&quot;headerlink&quot; title=&quot;MessageThrottle 的特殊定制&quot;&gt;&lt;/a&gt;MessageThrottle 的特殊定制&lt;/h2&gt;&lt;p&gt;好，又回归到文章最开头的问题。现在解决了『&lt;code&gt;MTRule&lt;/code&gt; 的 &lt;code&gt;target&lt;/code&gt; 释放后，自动调用 &lt;code&gt;MTRule&lt;/code&gt; 的 &lt;code&gt;discard&lt;/code&gt; 方法』的问题。但是，要注意到此时 &lt;code&gt;target&lt;/code&gt; 属性都释放了，于是就无法提供 &lt;code&gt;discard&lt;/code&gt; 方法正确执行做需要的信息。所以需要在 Associated Object 中加入一些属性来保存一些执行 &lt;code&gt;discard&lt;/code&gt; 时所需必要的信息。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;MTDealloc &lt;/span&gt;: NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这三个属性就是 discardRule:whenTargetDealloc: 方法将要用到的信息。这个方法会把 rule 从 MTEngine 列表中移除，并按需要还原之前的 hook 操作。这些细节不是重点，重点就是调用 discard 需要这仨属性。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic, weak) MTRule *rule;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic, copy) NSString *methodDescription;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic) Class cls;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@implementation&lt;/span&gt; MTDealloc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)dealloc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 我只是觉得这样写代码就没警告了，而且还骚&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SEL selector = NSSelectorFromString(@&quot;&lt;span class=&quot;attribute&quot;&gt;discardRule&lt;/span&gt;:&lt;span class=&quot;attribute&quot;&gt;whenTargetDealloc&lt;/span&gt;:&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ((void (*)(id, SEL, MTRule *, MTDealloc *))&lt;span class=&quot;selector-attr&quot;&gt;[MTEngine.defaultEngine methodForSelector:selector]&lt;/span&gt;)(MTEngine.defaultEngine, selector, self.rule, self);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后只需要在 &lt;code&gt;applyRule&lt;/code&gt; 的时候初始化和配置好 &lt;code&gt;MTDealloc&lt;/code&gt; 对象，并将其关联到 &lt;code&gt;target&lt;/code&gt; 上即可：&lt;/p&gt;
&lt;figure class=&quot;highlight puppet&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// applyRule 时调用这个方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static void mt_configureTargetDealloc(MTRule *rule)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mt_object_isClass(rule.target)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Class cls = object_getClass(&lt;span class=&quot;literal&quot;&gt;rule&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;target&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MTDealloc *mtDealloc = objc_getAssociatedObject(&lt;span class=&quot;literal&quot;&gt;rule&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;target&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;rule&lt;/span&gt;.selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!mtDealloc) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mtDealloc = [MTDealloc new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mtDealloc.&lt;span class=&quot;literal&quot;&gt;rule&lt;/span&gt; = &lt;span class=&quot;literal&quot;&gt;rule&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mtDealloc.methodDescription = mt_methodDescription(&lt;span class=&quot;literal&quot;&gt;rule&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;target&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;rule&lt;/span&gt;.selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mtDealloc.cls = cls;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            objc_setAssociatedObject(&lt;span class=&quot;literal&quot;&gt;rule&lt;/span&gt;.&lt;span class=&quot;literal&quot;&gt;target&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;rule&lt;/span&gt;.selector, mtDealloc, OBJC_ASSOCIATION_RETAIN);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 &lt;code&gt;rule.selector&lt;/code&gt; 作为 Key 的目的就是让 &lt;code&gt;target&lt;/code&gt; 对象上的每一个方法都对应一个关联对象，不会搞混。&lt;/p&gt;
&lt;p&gt;感兴趣的可以查看 &lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 的源码，或者阅读我的上一篇文章 &lt;a href=&quot;http://yulingtianxia.com/blog/2017/11/05/Objective-C-Message-Throttle-and-Debounce/&quot;&gt;Objective-C Message Throttle and Debounce&lt;/a&gt;，更详细地讲述了 Objective-C 消息节流防抖的实现原理。这里只是对其实现自动 &lt;code&gt;discard&lt;/code&gt; 原理的补充。&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.macrumors.com/threads/getting-notified-when-an-object-instance-is-deallocated.976309/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting notified when an object instance is deallocated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.slaunchaman.com/2011/04/11/fun-with-the-objective-c-runtime-run-code-at-deallocation-of-any-object/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fun With the Objective-C Runtime: Run Code at Deallocation of Any Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/10842829/will-an-associated-object-be-released-automatically/10843510#10843510&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Will An Associated Object Be Released Automatically?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChenYilong/CYLDeallocBlockExecutor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CYLDeallocBlockExecutor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.apple.com/source/objc4/objc4-723/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;objc4-723&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我的 Objective-C 消息节流防抖库 &lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot;&gt;MessageThrottle&lt;/a&gt; 需要实现一个特性：当 &lt;code&gt;MTRule&lt;/code&gt; 的 &lt;code&gt;target&lt;/code&gt; 释放后，自动调用 &lt;code&gt;MTRule&lt;/code&gt; 的 &lt;code&gt;discard&lt;/code&gt; 方法。后来使用了业界很早就已有的方案：Associated Object，在这里整理下相关的知识点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
      <category term="Runtime" scheme="http://yulingtianxia.com/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Message Throttle and Debounce</title>
    <link href="http://yulingtianxia.com/blog/2017/11/05/Objective-C-Message-Throttle-and-Debounce/"/>
    <id>http://yulingtianxia.com/blog/2017/11/05/Objective-C-Message-Throttle-and-Debounce/</id>
    <published>2017-11-04T16:39:44.000Z</published>
    <updated>2018-09-15T08:28:13.802Z</updated>
    
    <content type="html">&lt;p&gt;在实际项目中经常会遇到因方法调用频繁而导致的 UI 闪动问题和性能问题，这时用某种策略需要控制调用频率，以达到节流和防抖的效果。&lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 是我实现的一个 Objective-C 消息节流和防抖的轻量级工具库，使用便捷且业务无关。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;读懂本文的前提是对 &lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot;&gt;Objective-C Runtime&lt;/a&gt; 和 &lt;a href=&quot;http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/&quot;&gt;Objective-C 消息发送与转发机制原理&lt;/a&gt;有一定了解。&lt;/p&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;函数节流（throttle）是一个很基础的概念，常常跟函数防抖（debounce）作比较。在处理连续事件时比较常用，可以通过&lt;a href=&quot;http://demo.nimius.net/debounce_throttle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个 Demo&lt;/a&gt; 感受下二者区别。在 JS 中有较多的实现和应用案例，可以查看&lt;a href=&quot;https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt; 更直接地了解下。&lt;/p&gt;
&lt;p&gt;虽然在开发 iOS 和 macOS 的时候不用过多关心连续事件的采样问题，但有时也需要避免某个方法被频繁调用。比如一个很复杂的页面可能会频繁请求网络，每次回包都需更新界面，这时就需要防抖，控制刷新频率。&lt;/p&gt;
&lt;p&gt;在 Objective-C 中，方法调用其实就是消息发送，所以我改了个名字，叫消息节流和防抖。&lt;/p&gt;
&lt;h2 id=&quot;使用姿势&quot;&gt;&lt;a href=&quot;#使用姿势&quot; class=&quot;headerlink&quot; title=&quot;使用姿势&quot;&gt;&lt;/a&gt;使用姿势&lt;/h2&gt;&lt;p&gt;假如我创建了一个 &lt;code&gt;Stub&lt;/code&gt; 类的实例 &lt;code&gt;s&lt;/code&gt;，我想限制它调用 &lt;code&gt;foo:&lt;/code&gt; 方法的频率。先要创建并配置一个 &lt;code&gt;MTRule&lt;/code&gt;，并将规则应用到 &lt;code&gt;MTEngine&lt;/code&gt; 单例中：&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Stub *s = [Stub &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MTRule *rule = [MTRule &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rule.target = s; &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; You can also assign `&lt;span class=&quot;javascript&quot;&gt;Stub.class&lt;/span&gt;` &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; `&lt;span class=&quot;javascript&quot;&gt;mt_metaClass(Stub.class)&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rule.selector = @selector(foo:);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rule.durationThreshold = &lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[MTEngine.defaultEngine applyRule:rule]; &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; use `&lt;span class=&quot;javascript&quot;&gt;[rule apply]&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;target&lt;/code&gt; 可以是一个实例对象，也可以是一个类或元类。这样可以更灵活地控制限制策略，既可以只控制某个对象的消息发送频率，也可以控制某个类的实例方法和类方法的频率。当然，规则的 &lt;code&gt;target&lt;/code&gt; 为实例对象的优先级比类更高，也不会发生冲突。&lt;/p&gt;
&lt;p&gt;当然还有更简单的用法，跟上面那段代码作用相同：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[s &lt;span class=&quot;string&quot;&gt;limitSelector:&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;foo:&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;oncePerDuration:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// returns MTRule instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;无论是节流还是防抖，都需要设定一个时间 &lt;code&gt;durationThreshold&lt;/code&gt; 阈值来限制频率，都意味着方法在最后会延迟调用。&lt;code&gt;MTRule&lt;/code&gt; 默认的模式是 &lt;code&gt;MTPerformModeDebounce&lt;/code&gt;，也就是防抖模式，需要等消息不再连续频繁发送后才执行。&lt;code&gt;MTPerformModeLast&lt;/code&gt; 和 &lt;code&gt;MTPerformModeFirstly&lt;/code&gt; 对应着节流模式，也就是控制一定时间内只执行一次。区别在于前者执行的是这段时间内最后发送的消息，后者执行第一次发送的消息。&lt;/p&gt;
&lt;p&gt;比如我想要控制界面上某个 Label 内容的更新频率，给用户更好的体验，这时候很适合使用 &lt;code&gt;MTPerformModeLast&lt;/code&gt; 模式：&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.mode = MTPerformModeLast;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然所有规则都是可以动态调整的，也就是在应用规则以后，依然可以改变 &lt;code&gt;MTRule&lt;/code&gt; 对象中各项配置，并会在下次消息发送时生效。如果调皮地将 &lt;code&gt;durationThreshold&lt;/code&gt; 改成非正数，那么等同于立即执行方法，不会限制频率。&lt;/p&gt;
&lt;p&gt;当使用 &lt;code&gt;MTPerformModeDebounce&lt;/code&gt; 和 &lt;code&gt;MTPerformModeLast&lt;/code&gt; 模式的时候，因为执行消息会有延迟，可以指定执行消息的队列 &lt;code&gt;messageQueue&lt;/code&gt;，默认为主队列。&lt;/p&gt;
&lt;p&gt;当想要废除某条规则时，使用一行代码即可：&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[MTEngine.defaultEngine discardRule:&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;]; // &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; use `[&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt; discard]`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;应用和废除规则都是线程安全的。&lt;/p&gt;
&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;p&gt;参照 &lt;a href=&quot;https://github.com/steipete/Aspects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Aspects&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/bang590/JSPatch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSPatch&lt;/a&gt; 中 Hook 的原理，将限制频率逻辑嵌入消息转发流程中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给类添加一个新的方法 &lt;code&gt;fixed_selector&lt;/code&gt;，对应实现为 &lt;code&gt;rule.selector&lt;/code&gt; 的 &lt;code&gt;IMP&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;利用 &lt;a href=&quot;http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/&quot;&gt;Objective-C runtime 消息转发机制&lt;/a&gt;，将 &lt;code&gt;rule.selector&lt;/code&gt; 对应的 &lt;code&gt;IMP&lt;/code&gt; 改成 &lt;code&gt;_objc_msgForward&lt;/code&gt; 从而触发调用 &lt;code&gt;forwardInvocation:&lt;/code&gt; 方法。&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;forwardInvocation:&lt;/code&gt; 的实现替换为自己实现的 &lt;code&gt;IMP&lt;/code&gt;，并在自己实现的逻辑中将 &lt;code&gt;invocation.selector&lt;/code&gt; 设为 &lt;code&gt;fixed_selector&lt;/code&gt;。并限制 &lt;code&gt;[invocation invoke]&lt;/code&gt; 的调用频率。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种做法的缺陷是如果同时 hook 了基类和子类的同一个方法，且子类调用了基类的方法，就会导致循环调用。因为调用 &lt;code&gt;super&lt;/code&gt; 方法时，传入的 &lt;code&gt;target&lt;/code&gt; 还是 &lt;code&gt;self&lt;/code&gt; 对象，导致调用了子类的方法。好在这里并不允许同时 hook 一条继承链上的两个类，因为子类和基类限制频率的规则会相互干扰，导致不易发现的 bug。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 从设计上使用 &lt;code&gt;MTEngine&lt;/code&gt; 单例这种中心化的的方式来管理所有规则。Aspects 是将 hook 的上下文插入到对应的 &lt;code&gt;target&lt;/code&gt; 中，这样的好处是需要暴露的接口较少。而 &lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 需要提供当前所有的规则给使用方。因为方法调用频率的限制会影响其上游代码和下游代码的运行频率，所以中心化管理的做法很有必要。&lt;/p&gt;
&lt;p&gt;由于配置规则的内容较多，如果使用逐个传参的方式，方法名会很长。所以这里用 &lt;code&gt;MTRule&lt;/code&gt; 类封装了规则的上下文，并使用 &lt;code&gt;applyRule:&lt;/code&gt; 和 &lt;code&gt;discardRule:&lt;/code&gt; 方法应用和废除规则。&lt;/p&gt;
&lt;h3 id=&quot;管理-MTRule&quot;&gt;&lt;a href=&quot;#管理-MTRule&quot; class=&quot;headerlink&quot; title=&quot;管理 MTRule&quot;&gt;&lt;/a&gt;管理 &lt;code&gt;MTRule&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;MTEngine&lt;/code&gt; 内部使用键值对存取 &lt;code&gt;MTRule&lt;/code&gt;，这里使用 &lt;code&gt;target&lt;/code&gt; 和 &lt;code&gt;selector&lt;/code&gt; 的组合值作为 key。这里只要保证唯一性即可区分不同的规则，格式不固定：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * mt_methodDescription(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; target, SEL selector)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *selectorName = &lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (object_isClass(target)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *className = &lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%@ [%@ %@]&quot;&lt;/span&gt;, class_isMetaClass(target) ? &lt;span class=&quot;string&quot;&gt;@&quot;+&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;@&quot;-&quot;&lt;/span&gt;, className, selectorName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;[%p %@]&quot;&lt;/span&gt;, target, selectorName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在应用和废除规则的时候，需要检查规则合法性。这里只是简单检查下库中涉及的类和方法，一些内存管理和runtime 的方法并没有做限制，毕竟用户想作死我也管不着：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; mt_checkRuleValid(MTRule *rule)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rule.target &amp;amp;&amp;amp; rule.selector &amp;amp;&amp;amp; rule.durationThreshold &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *selectorName = &lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(rule.selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([selectorName isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;forwardInvocation:&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Class cls;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (object_isClass(rule.target)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cls = rule.target;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cls = object_getClass(rule.target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *className = &lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;(cls);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([className isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;MTRule&quot;&lt;/span&gt;] || [className isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;MTEngine&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;处理-NSInvocation&quot;&gt;&lt;a href=&quot;#处理-NSInvocation&quot; class=&quot;headerlink&quot; title=&quot;处理 NSInvocation&quot;&gt;&lt;/a&gt;处理 &lt;code&gt;NSInvocation&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;在进入到消息转发流程调用 &lt;code&gt;forwardInvocation:&lt;/code&gt; 方法时会进入到自定义的处理逻辑中，然后决定是否执行 &lt;code&gt;[invocation invoke]&lt;/code&gt;。之前已经将原始 &lt;code&gt;selector&lt;/code&gt; 的 IMP 替换成了 &lt;code&gt;fixedSelector&lt;/code&gt;，所以调用 &lt;code&gt;[invocation invoke]&lt;/code&gt; 之前需要调用 &lt;code&gt;invocation.selector = fixedSelector&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面的函数就是处理 &lt;code&gt;NSInvocation&lt;/code&gt; 对象的逻辑。先用 &lt;code&gt;target&lt;/code&gt; 和 &lt;code&gt;selector&lt;/code&gt; 获取 &lt;code&gt;MTRule&lt;/code&gt; 对象，进而根据不同的 &lt;code&gt;mode&lt;/code&gt; 采取不同的策略。如果 &lt;code&gt;durationThreshold&lt;/code&gt; 非正数就立即执行方法。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; mt_handleInvocation(&lt;span class=&quot;built_in&quot;&gt;NSInvocation&lt;/span&gt; *invocation, SEL fixedSelector)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *methodDescriptionForInstance = mt_methodDescription(invocation.target, invocation.selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *methodDescriptionForClass = mt_methodDescription(object_getClass(invocation.target), invocation.selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MTRule *rule = MTEngine.defaultEngine.rules[methodDescriptionForInstance];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!rule) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rule = MTEngine.defaultEngine.rules[methodDescriptionForClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rule.durationThreshold &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [invocation setSelector:fixedSelector];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [invocation invoke];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSTimeInterval&lt;/span&gt; now = [[&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; date] timeIntervalSince1970];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (rule.mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MTPerformModeFirstly:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MTPerformModeLast:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MTPerformModeDebounce:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码省略了不同 &lt;code&gt;mode&lt;/code&gt; 的处理逻辑，下面会逐个讲解。&lt;/p&gt;
&lt;h4 id=&quot;MTPerformModeFirstly&quot;&gt;&lt;a href=&quot;#MTPerformModeFirstly&quot; class=&quot;headerlink&quot; title=&quot;MTPerformModeFirstly&quot;&gt;&lt;/a&gt;&lt;code&gt;MTPerformModeFirstly&lt;/code&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;MTModePerformFirstly&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start                                                                end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                           durationThreshold                          |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@-------------------------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@----------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@---------------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@----------------&lt;/span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                         |          |               |          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;perform immediately       ignore     ignore          ignore&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最简单粗暴的实现方式，忽略第一次发送消息之后 &lt;code&gt;durationThreshold&lt;/code&gt; 时间段内的所有消息。&lt;/p&gt;
&lt;figure class=&quot;highlight inform7&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (now - &lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastTimeRequest &amp;gt; &lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.durationThreshold) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastTimeRequest = now;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	invocation.selector = fixedSelector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;[invocation invoke]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;MTPerformModeLast&quot;&gt;&lt;a href=&quot;#MTPerformModeLast&quot; class=&quot;headerlink&quot; title=&quot;MTPerformModeLast&quot;&gt;&lt;/a&gt;&lt;code&gt;MTPerformModeLast&lt;/code&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;MTModePerformLast&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start                                                                end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                           durationThreshold                          |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@-------------------------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@----------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@---------------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@----------------&lt;/span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                         |          |               |          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ignore                    ignore     ignore          will perform at end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;durationThreshold&lt;/code&gt; 时间内不断更新 &lt;code&gt;lastInvocation&lt;/code&gt; 的值，并在达到阈值 &lt;code&gt;durationThreshold&lt;/code&gt; 后执行 &lt;code&gt;[lastInvocation invoke]&lt;/code&gt;。这样保证了执行的是最后一次发送的消息。需要注意的是，&lt;code&gt;NSInvocation&lt;/code&gt; 对象默认不会持有参数，在异步延迟执行 &lt;code&gt;invoke&lt;/code&gt; 的时候参数可能已经被释放了，进而野指针 crash。所以需要调用 &lt;code&gt;retainArguments&lt;/code&gt; 方法提前持有参数，防止之后被释放掉。如果实际传入的参数与参数类型不符，可能导致 &lt;code&gt;retainArguments&lt;/code&gt; 方法 crash。我曾想过将参数列表保存到一个 &lt;code&gt;NSArray&lt;/code&gt; 里，然后放到 &lt;code&gt;MTRule&lt;/code&gt; 中，这样可以对参数类型做判断，避免 crash，也顺便持有了参数列表。但发现需要覆盖的类型太多，工作量和风险更多。我把这个半成品代码放在了 GitHubGist 上: &lt;a href=&quot;https://gist.github.com/yulingtianxia/1518fc7604ed65aa4ca98abdeee974e1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConvertInvocationArguments.m&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (now - &lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastTimeRequest &amp;gt; &lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.durationThreshold) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastTimeRequest = now;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.durationThreshold * NSEC_PER_SEC)), &lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.messageQueue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation invoke];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	invocation.selector = fixedSelector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation = invocation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation retainArguments];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;MTPerformModeDebounce&quot;&gt;&lt;a href=&quot;#MTPerformModeDebounce&quot; class=&quot;headerlink&quot; title=&quot;MTPerformModeDebounce&quot;&gt;&lt;/a&gt;&lt;code&gt;MTPerformModeDebounce&lt;/code&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;MTModePerformDebounce&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start                                        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|           durationThreshold(old)             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@----------------------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@----------------------&lt;/span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                      |                 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ignore                 will perform at end of new duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       |---------------------------------------------&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       |           durationThreshold(new)             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       start                                        end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然流程看上去复杂但其实实现起来也很简单。每次发送消息完再过 &lt;code&gt;durationThreshold&lt;/code&gt; 时间后，检查下 &lt;code&gt;lastInvocation&lt;/code&gt; 有没有变化。如果无变化，则说明这段时间内没有新的消息发送，则可以执行 &lt;code&gt;lastInvocation&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;invocation.selector = fixedSelector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation = invocation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation retainArguments];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.durationThreshold * NSEC_PER_SEC)), &lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.messageQueue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation == invocation) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation invoke];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;规则的应用与废除&quot;&gt;&lt;a href=&quot;#规则的应用与废除&quot; class=&quot;headerlink&quot; title=&quot;规则的应用与废除&quot;&gt;&lt;/a&gt;规则的应用与废除&lt;/h3&gt;&lt;p&gt;在真正应用规则之前，需要检查下规则合法性，然后检查继承链上是否已经应用过规则了。如果有，则需要输出错误信息；否则应用规则。这里使用 POSIX 的互斥锁保证线程安全。&lt;code&gt;mt_overrideMethod()&lt;/code&gt; 函数所作的事情就是开始提到的利用消息转发流程 hook 的三个步骤。&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;BOOL)applyRule:(MTRule &lt;/span&gt;*)rule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_lock(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __block &lt;span class=&quot;keyword&quot;&gt;BOOL &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;shouldApply &lt;/span&gt;= YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mt_checkRuleValid(rule)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [self.rules enumerateKeysAndObjectsUsingBlock:^(NSString * _Nonnull key, MTRule * _Nonnull obj, &lt;span class=&quot;keyword&quot;&gt;BOOL &lt;/span&gt;* _Nonnull stop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (rule.selector == obj.selector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; object_isClass(rule.target)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; object_isClass(obj.target)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Class clsA = rule.target&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Class clsB = obj.target&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;shouldApply &lt;/span&gt;= !([clsA isSubclassOfClass:clsB] &lt;span class=&quot;title&quot;&gt;||&lt;/span&gt; [clsB isSubclassOfClass:clsA])&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                *stop = &lt;span class=&quot;keyword&quot;&gt;shouldApply;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;                NSString *errorDescription = [NSString stringWithFormat:@&lt;span class=&quot;string&quot;&gt;&quot;Error: %@ already apply rule in %@. A message can only have one throttle per class hierarchy.&quot;&lt;/span&gt;, NSStringFromSelector(obj.selector), NSStringFromClass(clsB)]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;%@&quot;&lt;/span&gt;, errorDescription)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (&lt;span class=&quot;keyword&quot;&gt;shouldApply) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.rules[mt_methodDescription(rule.target, rule.selector)] = rule&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mt_overrideMethod(rule.target, rule.selector)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_unlock(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;keyword&quot;&gt;shouldApply;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;废除规则是执行相反的操作。如果 &lt;code&gt;target&lt;/code&gt; 是个实例对象，&lt;code&gt;mt_recoverMethod()&lt;/code&gt; 函数会判断是否有相同 &lt;code&gt;selector&lt;/code&gt; 且 &lt;code&gt;target&lt;/code&gt; 为这个实例对象的类的其他规则。如果有，那将不会移除 hook。&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;BOOL)discardRule:(MTRule &lt;/span&gt;*)rule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_lock(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;BOOL &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;shouldDiscard &lt;/span&gt;= NO&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mt_checkRuleValid(rule)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSString *description = mt_methodDescription(rule.target, rule.selector)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;shouldDiscard &lt;/span&gt;= self.rules[description] != nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (&lt;span class=&quot;keyword&quot;&gt;shouldDiscard) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.rules[description] = nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mt_recoverMethod(rule.target, rule.selector)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_unlock(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;keyword&quot;&gt;shouldDiscard;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h2&gt;&lt;p&gt;其实在开发过程中遇到需要限制方法调用频率的场景并不多，只是最近恰巧连续碰到几个刷新 UI 过频繁的问题，才想到应该去造个轮子。因为时间仓促，肯定还有考虑不周和一些 bug，待投入使用后慢慢完善和修复。&lt;/p&gt;
&lt;p&gt;其实想在某个特定函数做节流很简单，但每次都需要做重复劳动，写脏代码，还不如抽象出一个工具类出来。尽量造与业务无关的轮子，锻炼技术，也受益整个业务发展。&lt;/p&gt;
&lt;p&gt;好，装逼到此为止。Github : &lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/MessageThrottle&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在实际项目中经常会遇到因方法调用频繁而导致的 UI 闪动问题和性能问题，这时用某种策略需要控制调用频率，以达到节流和防抖的效果。&lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot;&gt;MessageThrottle&lt;/a&gt; 是我实现的一个 Objective-C 消息节流和防抖的轻量级工具库，使用便捷且业务无关。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
      <category term="Runtime" scheme="http://yulingtianxia.com/tags/Runtime/"/>
    
      <category term="Message Forwarding" scheme="http://yulingtianxia.com/tags/Message-Forwarding/"/>
    
  </entry>
  
  <entry>
    <title>Threading Programming Guide(3)</title>
    <link href="http://yulingtianxia.com/blog/2017/10/08/Threading-Programming-Guide-3/"/>
    <id>http://yulingtianxia.com/blog/2017/10/08/Threading-Programming-Guide-3/</id>
    <published>2017-10-08T09:03:54.000Z</published>
    <updated>2018-09-15T08:28:13.573Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Threading Programming Guide&lt;/a&gt; 的学习笔记&amp;amp;翻译，第三部分。关于同步的内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/08/28/Threading-Programming-Guide-1/&quot;&gt;Threading Programming Guide(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/09/17/Threading-Programming-Guide-2/&quot;&gt;Threading Programming Guide(2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;同步&quot;&gt;&lt;a href=&quot;#同步&quot; class=&quot;headerlink&quot; title=&quot;同步&quot;&gt;&lt;/a&gt;同步&lt;/h2&gt;&lt;p&gt;两个线程同时修改同一个资源可能会不小心干扰到对方，多线程存取资源带来了潜在的线程安全问题。比如，一个线程可能会覆盖了另一个线程的修改，或者使应用置于未知混乱状态。如果幸运的话，错乱的资源可能会导致明显的性能问题或 crash 这类相对容易复现和解决的 bug；如果不太走运，面临的就是短时间难以重现的 bug 和对代码的全面排查。&lt;/p&gt;
&lt;p&gt;为了线程安全，要尽量避免共享资源并减少线程间交互。即便有必须交互的地方，也需要使用同步工具来确保安全。&lt;/p&gt;
&lt;p&gt;macOS 和 iOS 提供了许多同步工具，范围涵盖互斥操作工具到应用中的序列化事件。下面会介绍这些工具的使用方法。&lt;/p&gt;
&lt;h3 id=&quot;同步工具&quot;&gt;&lt;a href=&quot;#同步工具&quot; class=&quot;headerlink&quot; title=&quot;同步工具&quot;&gt;&lt;/a&gt;同步工具&lt;/h3&gt;&lt;p&gt;完全避免同步问题是理想方案，但并不现实。下面介绍几类基本的同步工具。&lt;/p&gt;
&lt;h4 id=&quot;原子操作&quot;&gt;&lt;a href=&quot;#原子操作&quot; class=&quot;headerlink&quot; title=&quot;原子操作&quot;&gt;&lt;/a&gt;原子操作&lt;/h4&gt;&lt;p&gt;原子操作是对简单数据类型同步的一种简易形式。优点是不会阻塞竞争的线程。对于简单的操作，比如增加计数器变量的值，原子操作比锁拥有更好的性能。&lt;/p&gt;
&lt;p&gt;macOS 和 iOS 包含许多基本的数学和逻辑运算的操作，可以在 32 位和 64 位上执行。其中就有 compare-and-swap, test-and-set 和 test-and-clear 操作的原子版本。 详见 &lt;code&gt;/usr/include/libkern/OSAtomic.h&lt;/code&gt; 头文件，或 &lt;code&gt;atomic&lt;/code&gt; man page。&lt;/p&gt;
&lt;h4 id=&quot;内存屏障和-Volatile-变量&quot;&gt;&lt;a href=&quot;#内存屏障和-Volatile-变量&quot; class=&quot;headerlink&quot; title=&quot;内存屏障和 Volatile 变量&quot;&gt;&lt;/a&gt;内存屏障和 &lt;code&gt;Volatile&lt;/code&gt; 变量&lt;/h4&gt;&lt;p&gt;编译器为了让性能达到最佳，会经常重排序汇编指令，这就有可能导致存取内存的顺序跟着变化，进而产生错误数据，影响到一些看似各自独立的变量。由于编译器优化造成对变量错误的更新顺序，产生了潜在的错误结果。&lt;/p&gt;
&lt;p&gt;内存屏障（Memory Barrier）是一种非阻塞的同步工具，用来确保以正确的顺序操作内存。Memory Barrier 就像栅栏一样，强制处理器在栅栏之前的所有读写操作都执行后才可以开始执行栅栏之后的操作。内存屏障知识详见维基百科 &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_barrier&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Memory Barrier&lt;/a&gt;。可以在代码中调用 &lt;code&gt;OSMemoryBarrier&lt;/code&gt; 函数添加内存屏障，详见 &lt;code&gt;OSMemoryBarrier&lt;/code&gt; man page。&lt;/p&gt;
&lt;p&gt;Volatile 关键字对单独的变量应用了另一种内存约束。编译器为了优化代码，会将变量的值加载到寄存器中。对于局部变量这没毛病，如果这个变量由别的线程更新了的话，将出现不一致的现象。Volatile 关键字可以用来提醒编译器它后面所定义的变量随时有可能改变，因此编译后的程序每次需要存储或读取这个变量的时候，都会直接从变量地址中读取数据。 如果一个变量可能在任何时候被外部资源修改，而编译器可能无法察觉，那么可以将其声明为 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Volatile变量&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;volatile 变量&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;由于内存屏障和 volatile 变量都降低了编译器对代码的优化，除非万不得已，需慎用。&lt;/p&gt;
&lt;h4 id=&quot;锁&quot;&gt;&lt;a href=&quot;#锁&quot; class=&quot;headerlink&quot; title=&quot;锁&quot;&gt;&lt;/a&gt;锁&lt;/h4&gt;&lt;p&gt;锁是最常用的同步工具之一，可以用它保护代码中的临界区域（critical section）。临界区域中的代码只允许同时被一个线程访问。其他线程对这块代码的修改都会被拒绝，因为会影响其正确性。&lt;/p&gt;
&lt;p&gt;下表列出了程序员最常用的一些锁。macOS 和 iOS 提供了大部分锁的实现，那些没实现的锁也会有说明。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;锁&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mutex&lt;/td&gt;
&lt;td&gt;互斥锁（Mutual exclusion，缩写Mutex）是多线程编程中一种对资源的保护机制，避免多个线程同时访问。如果互斥锁正在使用，其他线程需要等到它被释放后才能获取到。在同一时间只能有一个线程使用互斥锁。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Recursive lock&lt;/td&gt;
&lt;td&gt;也叫重入锁或递归锁，是互斥锁的变种。重入锁允许同一条线程多次获得同一个锁，但也释放锁时也要释放对应的次数。重入锁主要用于递归程序或者多个方法都需要获得锁的场景。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read-write lock&lt;/td&gt;
&lt;td&gt;读写锁可以认为是一种共享版的互斥锁。如果对一个临界区大部分是读操作而只有少量的写操作，在大规模操作上应用读写锁可以显著降低线程互斥产生的代价。正常操作数据时，可以同时有多个读操作。线程想要做写操作时，需要等到所有的读操作完成并释放锁之后，然后写操作会获取锁并更新数据。在写操作线程阻塞等待锁被释放时，新来的读操作线程在写操作完成前会一直阻塞。系统只支持 POSIX 线程中使用读写锁。关于如何使用这些锁，详见 &lt;code&gt;pthread&lt;/code&gt; man page。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Distributed lock&lt;/td&gt;
&lt;td&gt;提供进程级别的互斥锁，但并不会真的阻塞进程，只是简单地向进程汇报锁正被占用，并让进程自己决定如何处理。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spin lock&lt;/td&gt;
&lt;td&gt;自旋锁会重复查询锁的条件，直到为 true。因为自旋锁属于在『死等』，它最常用在多核处理器系统上，且锁的等待时间很短，时间短到轮询比阻塞线程的开销还小（因为需要阻塞线程切换上下文和更新线程数据结构）。因为它的轮询性质，系统没有提供自旋锁的任何实现，在特定场景下可以自己实现。内核中实现自旋锁详见 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Darwin/Conceptual/KernelProgramming/About/About.html#//apple_ref/doc/uid/TP30000905&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kernel Programming Guide&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Double-checked lock&lt;/td&gt;
&lt;td&gt;双重检查锁试图减少并发系统中竞争和同步的开销。由于双重检查锁潜在地不安全性，系统不提供直接支持，不鼓励使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：大部分的锁也会纳入内存屏障来确保进入临界区域前的加载和存储指令已经完成。&lt;/p&gt;
&lt;h4 id=&quot;条件变量&quot;&gt;&lt;a href=&quot;#条件变量&quot; class=&quot;headerlink&quot; title=&quot;条件变量&quot;&gt;&lt;/a&gt;条件变量&lt;/h4&gt;&lt;p&gt;Condition 是信号量的另一种类型，它允许线程在某个条件为 true 的时候，向其他线程发信号（signal）。通常用于标示资源的可用性或确保任务以特定的顺序执行。在进入临界区域时如果检查条件变量不为 true，线程会一直阻塞，直到某个其他线程 signal。与互斥锁的不同点在于 condition 允许被多个线程同时访问，它更像是个用某个特定标准筛查线程的门卫。&lt;/p&gt;
&lt;p&gt;一种使用场景是管理即将发生的事件池。当队列中有事件到来时，使用条件变量对发信号（signal）。于是一个被唤醒的线程就可以从队列中获取并处理事件。如果有两个事件大致同时到达队列，会对 condition 发两次信号唤醒两个线程。&lt;/p&gt;
&lt;p&gt;系统用几种不同的技术对 condition 提供支持。写这块代码需要谨慎，后面会给出示例。&lt;/p&gt;
&lt;h4 id=&quot;Perform-Selector&quot;&gt;&lt;a href=&quot;#Perform-Selector&quot; class=&quot;headerlink&quot; title=&quot;Perform Selector&quot;&gt;&lt;/a&gt;Perform Selector&lt;/h4&gt;&lt;p&gt;Cocoa 提供了向一个活跃线程异步分发消息的便捷方式，也就是 &lt;code&gt;NSObject&lt;/code&gt; 类的 &lt;code&gt;performSelector...&lt;/code&gt; 系列方法。使用这些方法向线程发送的执行 &lt;code&gt;selector&lt;/code&gt; 的请求会被目标线程的 run loop 按接收顺序执行。&lt;/p&gt;
&lt;p&gt;详见 &lt;a href=&quot;http://yulingtianxia.com/blog/2017/09/17/Threading-Programming-Guide-2/#Cocoa-Perform-Selector-Sources&quot;&gt;Cocoa Perform Selector Sources&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;同步开销与性能&quot;&gt;&lt;a href=&quot;#同步开销与性能&quot; class=&quot;headerlink&quot; title=&quot;同步开销与性能&quot;&gt;&lt;/a&gt;同步开销与性能&lt;/h3&gt;&lt;p&gt;同步机制在帮助确保代码正确性的同时也造成了性能代价。即便没有竞争，使用同步工具也会引发延迟。锁和原子操作为了确保充分保护代码，通常会需要使用内存屏障和内核级同步。如果存在对锁的竞争，线程会阻塞，经历甚至更久的延迟。&lt;/p&gt;
&lt;p&gt;下表列出了非竞争场景下互斥锁和原子操作的一些大致开销。这些测量值取自几千个样本的均值。时间开销会随着处理器负荷、计算机速度以及系统程序的可用内存数量产生巨幅波动。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;大约的开销&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mutex acquisition time&lt;/td&gt;
&lt;td&gt;大约 0.2 ms&lt;/td&gt;
&lt;td&gt;无竞争场景下获取锁的时间。如果锁已经被其他线程持有，获取锁的耗时还会更长。结果取自对均值和中位数的分析，运行系统为 macOS 10.5，配备基于Intel 2 GHz Core Duo 处理器和 1 GB RAM 的 iMac。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Atomic compare-and-swap&lt;/td&gt;
&lt;td&gt;大约 0.05 ms&lt;/td&gt;
&lt;td&gt;无竞争场景下的 compare-and-swap 时间。运行环境同上。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;设计并发任务的时候，最重要的因素永远是正确性，但是也应该考虑到性能因素。总不能一味追求正确性而导致多线程执行的代码比单线程还慢吧。&lt;/p&gt;
&lt;p&gt;如果是在单线程应用的基础上进行多线程的改装，应该分别测量下关键任务在单线程和多线程下执行的性能，比对结果后再决定是否使用多线程。&lt;/p&gt;
&lt;p&gt;关于性能和指标采集工具详见 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Performance/Conceptual/PerformanceOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40001410&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Performance Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;线程安全和信号&quot;&gt;&lt;a href=&quot;#线程安全和信号&quot; class=&quot;headerlink&quot; title=&quot;线程安全和信号&quot;&gt;&lt;/a&gt;线程安全和信号&lt;/h3&gt;&lt;p&gt;信号(Signal) 是一种底层 BSD 机制，用于向进程传递信息或以某种方式操作进程。有些程序使用信号来监测某些事件，比如子进程终止。系统使用信号来终止失控的进程和传达其他类型的信息。&lt;/p&gt;
&lt;p&gt;在多线程应用中，信号可能被发送到任何线程。所以实现 signal handler 的首要原则就是不要假定handler 会运行在某个特定线程。也就是说，假如在 A 线程设置 signal handler，信号被发送到 B 线程，A 和 B 不一定相同。&lt;/p&gt;
&lt;p&gt;设置 signal handler 的细节可以查看 &lt;code&gt;signal&lt;/code&gt; 和 &lt;code&gt;sigaction&lt;/code&gt; man page。&lt;/p&gt;
&lt;h3 id=&quot;线程安全设计技巧&quot;&gt;&lt;a href=&quot;#线程安全设计技巧&quot; class=&quot;headerlink&quot; title=&quot;线程安全设计技巧&quot;&gt;&lt;/a&gt;线程安全设计技巧&lt;/h3&gt;&lt;p&gt;同步工具是把双刃剑，能让代码线程安全，但使用过多也会带来性能问题。能平衡好二者利弊靠的是经验，下面会提供一些技巧。&lt;/p&gt;
&lt;h4 id=&quot;完全避免同步&quot;&gt;&lt;a href=&quot;#完全避免同步&quot; class=&quot;headerlink&quot; title=&quot;完全避免同步&quot;&gt;&lt;/a&gt;完全避免同步&lt;/h4&gt;&lt;p&gt;最佳解决方案是从代码和数据结构设计上避免需要同步。同步工具很管用但也影响性能，能从设计根源上避免当然是最好的了。比如实现并发的时候要减少任务之间的相互作用和依赖。如果每个任务都在自己的私有数据集上操作，就不需要使用锁保护数据了。即便在两个任务共享一分公共数据集的情况下，可以考虑分割数据集或为每个任务提供一份数据拷贝。当然拷贝数据集也会有成本，这就需要提前权衡下拷贝成本高还是同步成本高。&lt;/p&gt;
&lt;h4 id=&quot;理解同步的限制&quot;&gt;&lt;a href=&quot;#理解同步的限制&quot; class=&quot;headerlink&quot; title=&quot;理解同步的限制&quot;&gt;&lt;/a&gt;理解同步的限制&lt;/h4&gt;&lt;p&gt;同步工具只有在应用中所有线程都持续使用才能生效。如果创建了互斥锁来限制对某个资源的存取，那么所有线程在试图操作此资源前都必须获得这个的互斥锁。如果做不到这些，互斥锁提供的保护就会失效，这是程序员的错。&lt;/p&gt;
&lt;h4 id=&quot;清楚代码正确性的风险&quot;&gt;&lt;a href=&quot;#清楚代码正确性的风险&quot; class=&quot;headerlink&quot; title=&quot;清楚代码正确性的风险&quot;&gt;&lt;/a&gt;清楚代码正确性的风险&lt;/h4&gt;&lt;p&gt;使用锁和内存屏障时需要认真些，要在代码中加对地方才行。你甚至觉得自己加锁的地方是对的，其实只是错觉。下面一系列例子试图阐述这个问题。表面上看似没毛病的代码，也能挑出瑕疵。基础假设是有一个可变数组，包含了一组不可变的对象。如果想要执行数组中第一个对象的方法，可以用下面代码实现：&lt;/p&gt;
&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSLock* arrayLock = GetArrayLock()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray* myArray = GetSharedArray()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id anObject&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[arrayLock lock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anObject = [myArray objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[arrayLock unlock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[anObject doSomething]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为数组是可变的，在获取数组第一个元素之前，锁会阻止其他线程修改数组。又因为元素对象本身是不可变的，不用对 &lt;code&gt;doSomething&lt;/code&gt; 方法加锁。&lt;/p&gt;
&lt;p&gt;不过上面的例子存在问题：在锁释放后 &lt;code&gt;doSomething&lt;/code&gt; 执行前，如果另一个线程将数组中所有对象都移除会发生什么呢？&lt;code&gt;anObject&lt;/code&gt; 野指针！解决问题的办法也很简单，重新整理下代码顺序，在 &lt;code&gt;doSomething&lt;/code&gt; 执行后再释放锁：&lt;/p&gt;
&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSLock* arrayLock = GetArrayLock()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray* myArray = GetSharedArray()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id anObject&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[arrayLock lock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anObject = [myArray objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[anObject doSomething]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[arrayLock unlock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把调用 &lt;code&gt;doSomething&lt;/code&gt; 的代码挪到锁里面保证了对象依然有效，但如果 &lt;code&gt;doSomething&lt;/code&gt; 执行时间过长又会导致锁也会被占用很久，造成性能瓶颈。&lt;/p&gt;
&lt;p&gt;代码的毛病不是临界区域不清晰，真正的问题在于其他线程插了一脚触发的内存管理问题。因为其他线程释放了 &lt;code&gt;anObject&lt;/code&gt;，更好的解决方案是在锁释放前 &lt;code&gt;retain&lt;/code&gt; 它。此解决方案不仅对症下药，而且无潜在的性能问题。&lt;/p&gt;
&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSLock* arrayLock = GetArrayLock()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray* myArray = GetSharedArray()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id anObject&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[arrayLock lock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anObject = [myArray objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[anObject retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[arrayLock unlock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[anObject doSomething]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[anObject release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;尽管上面的例子非常简单，但抓到重点了。要透过表面看本质。要预先考虑到一些问题，比如内存管理和其他方面的设计可能会受多线程的影响。除此之外，在安全问题上要对编辑器的行为做最坏的打算。小心谨慎方能避灾。&lt;/p&gt;
&lt;h4 id=&quot;提防死锁和活锁&quot;&gt;&lt;a href=&quot;#提防死锁和活锁&quot; class=&quot;headerlink&quot; title=&quot;提防死锁和活锁&quot;&gt;&lt;/a&gt;提防死锁和活锁&lt;/h4&gt;&lt;p&gt;如果线程在同一时刻持有不止一个锁，随时都有发生死锁的可能。当两个不同的线程分别持有一个锁，并且尝试获取对方持有的锁，&lt;a href=&quot;https://zh.wikipedia.org/wiki/死锁&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;死锁&lt;/a&gt;就发生了。因为每个线程永远都获取不到另一个锁，结果就是永久阻塞。&lt;/p&gt;
&lt;p&gt;活锁跟死锁很像，死锁是获取不到另一个锁就死等，而活锁是获取不到就释放已经持有的锁和资源，然后重试。活锁把时间都花在释放锁和尝试获取其他锁上面了，并没啥干活儿。&lt;/p&gt;
&lt;p&gt;避免死锁和活锁的最好方法就是一次只获取一个锁。如果一次必须获取不止一个锁，那就应该确保其他线程别这么做。&lt;/p&gt;
&lt;h4 id=&quot;正确地使用-Volatile-变量&quot;&gt;&lt;a href=&quot;#正确地使用-Volatile-变量&quot; class=&quot;headerlink&quot; title=&quot;正确地使用 Volatile 变量&quot;&gt;&lt;/a&gt;正确地使用 &lt;code&gt;Volatile&lt;/code&gt; 变量&lt;/h4&gt;&lt;p&gt;如果已经对一段代码用互斥锁保护了，就不要自动假定需要对这段代码中的重要变量用 &lt;code&gt;volatile&lt;/code&gt; 关键字再保护一次。互斥锁包含了内存屏障，确保加载和存储操作的顺序正确。添加 &lt;code&gt;volatile&lt;/code&gt; 关键字会强制访问变量时每次都从内存加载。可能在特殊情况下有必要将这两种同步技术混合使用，但也会导致严重降低性能。如果只用互斥锁保护变量就够了，删掉 &lt;code&gt;volatile&lt;/code&gt; 关键字吧。&lt;/p&gt;
&lt;p&gt;不要用 &lt;code&gt;volatile&lt;/code&gt; 变量试图替代使用互斥锁。互斥锁和其他同步机制通常比 &lt;code&gt;volatile&lt;/code&gt; 变量能更好地保护数据结构的完整性。&lt;code&gt;volatile&lt;/code&gt; 关键字只是确保变量从内存加载而不是存在寄存器中。它无法确保代码可以正确地访问变量。&lt;/p&gt;
&lt;h3 id=&quot;使用原子操作&quot;&gt;&lt;a href=&quot;#使用原子操作&quot; class=&quot;headerlink&quot; title=&quot;使用原子操作&quot;&gt;&lt;/a&gt;使用原子操作&lt;/h3&gt;&lt;p&gt;无阻塞同步可以执行一些操作并避免锁的开销。虽然用锁可以有效地同步两个线程，但即便在无竞争情况下获取锁的代价相对较高。相反，许多同步操作花一小部分时间就能完成，而且跟锁一样管用。&lt;/p&gt;
&lt;p&gt;可以用原子操作在 32 位或 64 位数值上做些简单的数学和逻辑操作。为了确保在原子操作完成后才可再次访问受影响的内存，这些操作依赖专门的硬件指令（和可选的内存屏障）。在多线程情况下为确保内存被正确地同步，应该始终使用纳入内存屏障版本的原子操作（带有 &lt;code&gt;Barrier&lt;/code&gt; 后缀）。&lt;/p&gt;
&lt;p&gt;下标列出了可用的数学和逻辑原子操作以及相关函数名。这些函数都声明在 &lt;code&gt;/usr/include/libkern/OSAtomic.h&lt;/code&gt; 头文件中，它包含了完整语法。这些函数的 64 位版本仅在 64 位处理器中可用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;函数名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Add&lt;/td&gt;
&lt;td&gt;OSAtomicAdd32 OSAtomicAdd32Barrier OSAtomicAdd64 OSAtomicAdd64Barrier&lt;/td&gt;
&lt;td&gt;将两个整数相加并将结果存在其中一个指定的变量中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Increment&lt;/td&gt;
&lt;td&gt;OSAtomicIncrement32 OSAtomicIncrement32Barrier OSAtomicIncrement64 OSAtomicIncrement64Barrier&lt;/td&gt;
&lt;td&gt;将指定的整数值加一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Decrement&lt;/td&gt;
&lt;td&gt;OSAtomicDecrement32 OSAtomicDecrement32Barrier OSAtomicDecrement64 OSAtomicDecrement64Barrier&lt;/td&gt;
&lt;td&gt;将指定的整数值减一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logical OR&lt;/td&gt;
&lt;td&gt;OSAtomicOr32 OSAtomicOr32Barrier&lt;/td&gt;
&lt;td&gt;在指定的 32 位数值和掩码之间做逻辑或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logical AND&lt;/td&gt;
&lt;td&gt;OSAtomicAnd32 OSAtomicAnd32Barrier&lt;/td&gt;
&lt;td&gt;在指定的 32 位数值和掩码之间做逻辑与&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logical XOR&lt;/td&gt;
&lt;td&gt;OSAtomicXor32 OSAtomicXor32Barrier&lt;/td&gt;
&lt;td&gt;在指定的 32 位数值和掩码之间做逻辑异或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Compare and swap&lt;/td&gt;
&lt;td&gt;OSAtomicCompareAndSwap32 OSAtomicCompareAndSwap32Barrier OSAtomicCompareAndSwap64 OSAtomicCompareAndSwap64Barrier OSAtomicCompareAndSwapPtr OSAtomicCompareAndSwapPtrBarrier OSAtomicCompareAndSwapInt OSAtomicCompareAndSwapIntBarrier OSAtomicCompareAndSwapLong OSAtomicCompareAndSwapLongBarrier&lt;/td&gt;
&lt;td&gt;函数有三个参数：oldValue, newValue, theValue 指针。如果 oldValue 跟 theValue 指针的内容相等，则把 newValue 赋给 theValue 指针的内容。否则啥都不干。比较和赋值会以一个原子操作完成。返回值表明是否发生了交换。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Test and set&lt;/td&gt;
&lt;td&gt;OSAtomicTestAndSet OSAtomicTestAndSetBarrier&lt;/td&gt;
&lt;td&gt;将指定变量第 n 位设为 1，并将旧值以 bool 形式返回。注意这里会将变量按 8 位分块，每块的内容是逆序的。所以如果想要设置 0 位的值，n 需要传入 7。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Test and clear&lt;/td&gt;
&lt;td&gt;OSAtomicTestAndClear OSAtomicTestAndClearBarrier&lt;/td&gt;
&lt;td&gt;将指定变量第 n 位设为 0，并将旧值以 bool 形式返回。注意这里会将变量按 8 位分块，每块的内容是逆序的。所以如果想要设置 0 位的值，n 需要传入 7。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;大多数原子函数的行为都会是相对简单且能预料到的。下面的示例代码使用了 &lt;code&gt;OSAtomicTestAndSet&lt;/code&gt; 和 &lt;code&gt;OSAtomicCompareAndSwap32&lt;/code&gt; 函数，结果可能跟你预想的不太一样。这些函数在无竞争情况下被调用，且没有其他线程同时操作。&lt;/p&gt;
&lt;figure class=&quot;highlight mizar&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int32_t  theValue = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSAtomicTestAndSet(0, &amp;amp;theValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// theValue &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;now&lt;/span&gt; 128.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;theValue = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSAtomicTestAndSet(7, &amp;amp;theValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// theValue &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;now&lt;/span&gt; 1.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;theValue = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSAtomicTestAndSet(15, &amp;amp;theValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// theValue &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;now&lt;/span&gt; 256.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSAtomicCompareAndSwap32(256, 512, &amp;amp;theValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// theValue &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;now&lt;/span&gt; 512.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSAtomicCompareAndSwap32(256, 1024, &amp;amp;theValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// theValue &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; still 512.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于原子操作可以看看 &lt;code&gt;atomic&lt;/code&gt; man page 和 &lt;code&gt;/usr/include/libkern/OSAtomic.h&lt;/code&gt; 头文件。&lt;/p&gt;
&lt;h3 id=&quot;使用锁&quot;&gt;&lt;a href=&quot;#使用锁&quot; class=&quot;headerlink&quot; title=&quot;使用锁&quot;&gt;&lt;/a&gt;使用锁&lt;/h3&gt;&lt;p&gt;锁是多线程编程中的一个基础同步工具，macOS 和 iOS 都提供了基础的互斥锁。Foundation 框架定义了几种用于特别场景的互斥锁作为补充。&lt;/p&gt;
&lt;h4 id=&quot;POSIX-互斥锁&quot;&gt;&lt;a href=&quot;#POSIX-互斥锁&quot; class=&quot;headerlink&quot; title=&quot;POSIX 互斥锁&quot;&gt;&lt;/a&gt;POSIX 互斥锁&lt;/h4&gt;&lt;p&gt;POSIX 互斥锁贼好用。用 &lt;code&gt;pthread_mutex_t&lt;/code&gt; 结构体声明一个互斥锁变量，将其传入 &lt;code&gt;pthread_mutex_init&lt;/code&gt; 函数初始化，然后用 &lt;code&gt;pthread_mutex_lock&lt;/code&gt; 和 &lt;code&gt;pthread_mutex_unlock&lt;/code&gt; 函数获取和释放锁就行了。等到不需要用锁了，调用 &lt;code&gt;pthread_mutex_destroy&lt;/code&gt; 函数析构锁的数据结构。下面是简化后的代码，实际使用时要考虑到错误处理等细节：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pthread_mutex_t&lt;/span&gt; mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyInitFunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_init(&amp;amp;mutex, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyLockingFunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_lock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Do work.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_unlock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;NSLock&quot;&gt;&lt;a href=&quot;#NSLock&quot; class=&quot;headerlink&quot; title=&quot;NSLock&quot;&gt;&lt;/a&gt;&lt;code&gt;NSLock&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;NSLock&lt;/code&gt; 实现了 Cocoa 中基本的互斥锁。包括 &lt;code&gt;NSLock&lt;/code&gt; 的所有锁的接口实际上都由 &lt;code&gt;NSLocking&lt;/code&gt; 协议定义，也就是 &lt;code&gt;lock&lt;/code&gt; 和 &lt;code&gt;unlock&lt;/code&gt; 这俩方法，对应功能是获取和释放锁。&lt;/p&gt;
&lt;p&gt;除此之外，&lt;code&gt;NSLock&lt;/code&gt; 类还提供了 &lt;code&gt;tryLock&lt;/code&gt; 和 &lt;code&gt;lockBeforeDate:&lt;/code&gt; 方法。&lt;code&gt;tryLock&lt;/code&gt; 方法尝试获取锁，但如果锁不可用，并不会阻塞，只是返回 &lt;code&gt;NO&lt;/code&gt; 而已。&lt;code&gt;lockBeforeDate:&lt;/code&gt; 方法尝试获取锁，并一直阻塞线程，直到获取到锁（返回 &lt;code&gt;YES&lt;/code&gt;）或达到限定的时间（返回 &lt;code&gt;NO&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;下面的示例代码展示了如何使用 &lt;code&gt;NSLock&lt;/code&gt; 在多个线程计算要被显示的数据时，即便获取不到锁的情况下依然可以继续运算。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; moreToDo = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLock&lt;/span&gt; *theLock = [[&lt;span class=&quot;built_in&quot;&gt;NSLock&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (moreToDo) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Do another increment of calculation */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* until there’s no more to do. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([theLock tryLock]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* Update display used by all threads. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [theLock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;synchronized&quot;&gt;&lt;a href=&quot;#synchronized&quot; class=&quot;headerlink&quot; title=&quot;@synchronized&quot;&gt;&lt;/a&gt;&lt;code&gt;@synchronized&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;可以用 &lt;code&gt;@synchronized&lt;/code&gt; 指令很方便地在 Objective-C 代码中飞快地写个互斥锁。它的作用跟互斥锁一样，但不用创建锁，只需要把一个 Objective-C 对象当做锁的 token 即可：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (void)&lt;span class=&quot;selector-tag&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(id)anObj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@synchronized&lt;/span&gt;(anObj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Everything between the braces is protected by the @synchronized directive.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;传给 &lt;code&gt;@synchronized&lt;/code&gt; 的对象是区分被保护的代码块的唯一标识。如果两个线程都执行上面的 &lt;code&gt;myMethod:&lt;/code&gt; 方法，传入的对象如果不同，则不会有阻塞；传入的对象相同，则一个线程先获取锁，另一个线程在临界区域执行完成之前会一直阻塞。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;@synchronized&lt;/code&gt; 的前提是工程开启了 Objective-C exception handling 选项。因为 &lt;code&gt;@synchronized&lt;/code&gt; 的 block 为了保护代码，预防措施是隐式加入 exception handler。handler 在异常抛出时会自动释放互斥锁。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/&quot;&gt;关于 @synchronized，这儿比你想知道的还要多&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用其他-Cocoa-框架的锁&quot;&gt;&lt;a href=&quot;#使用其他-Cocoa-框架的锁&quot; class=&quot;headerlink&quot; title=&quot;使用其他 Cocoa 框架的锁&quot;&gt;&lt;/a&gt;使用其他 Cocoa 框架的锁&lt;/h4&gt;&lt;h5 id=&quot;NSRecursiveLock&quot;&gt;&lt;a href=&quot;#NSRecursiveLock&quot; class=&quot;headerlink&quot; title=&quot;NSRecursiveLock&quot;&gt;&lt;/a&gt;&lt;code&gt;NSRecursiveLock&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;NSRecursiveLock&lt;/code&gt; 类也就是递归锁，可以被同一线程获取多次而不会导致死锁。当然 &lt;code&gt;lock&lt;/code&gt; 多少次，也要相应地 &lt;code&gt;unlock&lt;/code&gt; 多少次，这样锁才会被真正释放，其他线程才能获取锁。&lt;/p&gt;
&lt;p&gt;递归锁通常用于递归函数中来避免死锁线程。也可以用于非递归的场景下。这有个使用 &lt;code&gt;NSRecursiveLock&lt;/code&gt; 的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSRecursiveLock *theLock = [[NSRecursiveLock alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyRecursiveFunction&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [theLock &lt;span class=&quot;keyword&quot;&gt;lock&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        --&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyRecursiveFunction(&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [theLock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MyRecursiveFunction(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：因为递归锁需要 &lt;code&gt;lock&lt;/code&gt; 和 &lt;code&gt;unlock&lt;/code&gt; 次数相等才能释放，应该小心权衡。可以重写代码来避免递归，或避免使用递归锁，这样可以获取更好的性能。&lt;/p&gt;
&lt;h5 id=&quot;NSConditionLock&quot;&gt;&lt;a href=&quot;#NSConditionLock&quot; class=&quot;headerlink&quot; title=&quot;NSConditionLock&quot;&gt;&lt;/a&gt;&lt;code&gt;NSConditionLock&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;NSConditionLock&lt;/code&gt; 定义了可以用特定值来 &lt;code&gt;lock&lt;/code&gt; 和 &lt;code&gt;unlock&lt;/code&gt; 的互斥锁，但别跟条件变量搞混了。虽然行为差不多但实现很不一样。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSConditionLock&lt;/code&gt; 一般用于线程需要以特定的顺序执行任务时，例如生产者消费者问题。当生产者执行时，消费者需要使用程序中特定的条件变量来获取锁。所谓的条件变量其实就是个程序员定义的整型数。当生产者完成后，它会 &lt;code&gt;unlock&lt;/code&gt; 并更新条件变量，进而唤醒了消费者线程。消费者线程继续处理数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSConditionLock&lt;/code&gt; 的加锁和解锁方法可以任意组合使用。比如可以用 &lt;code&gt;lock&lt;/code&gt; 跟 &lt;code&gt;unlockWithCondition:&lt;/code&gt; 搭配，或用 &lt;code&gt;lockWhenCondition:&lt;/code&gt; 跟 &lt;code&gt;unlock&lt;/code&gt; 搭配。当然第二种搭配没有在解锁后设置 &lt;code&gt;condition&lt;/code&gt; 属性的值，其他一些等待特定条件变量的线程可能还会阻塞。&lt;/p&gt;
&lt;p&gt;下面的例子展示了如何使用条件锁处理生产者-消费者问题。摄像应用含有一个数据队列，生产者线程向队列添加数据，消费者线程从队列取数据。生产者不需要等特定的条件，但是必须等锁可用的时候才能安全地向队列添加数据。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;id condLock = [[NSConditionLock alloc] &lt;span class=&quot;string&quot;&gt;initWithCondition:&lt;/span&gt;NO_DATA];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [condLock lock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Add data to the queue. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [condLock &lt;span class=&quot;string&quot;&gt;unlockWithCondition:&lt;/span&gt;HAS_DATA];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于锁的初始条件被设置成 &lt;code&gt;NO_DATA&lt;/code&gt;，生产者线程起初会顺利地获取锁。它向队列填充数据并将条件设置为 &lt;code&gt;HAS_DATA&lt;/code&gt;。在接下来的迭代中，不管队列是否为空，生产者线程总能添加新数据。它只有消费者线程从队列中获取数据的时候才会阻塞。&lt;/p&gt;
&lt;p&gt;由于消费者线程必须有数据去处理，它会用一个特定的条件等待着队列。当生产者网队列中放数据时，消费者线程会活跃起来并获取锁。然后它可能从队列获取一些数据并更新队列状态。下面的例子展示了消费者线程循环程序的基本结构。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;while&lt;/span&gt; (true)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-attr&quot;&gt;[condLock lockWhenCondition:HAS_DATA]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Remove data from the queue. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-attr&quot;&gt;[condLock unlockWithCondition:(isEmpty ? NO_DATA : HAS_DATA)]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Process the data locally.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;NSDistributedLock&quot;&gt;&lt;a href=&quot;#NSDistributedLock&quot; class=&quot;headerlink&quot; title=&quot;NSDistributedLock&quot;&gt;&lt;/a&gt;&lt;code&gt;NSDistributedLock&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;NSDistributedLock&lt;/code&gt; 可以用于多个应用拥有并访问某个共享资源（例如文件）的临界区。它实际上是使用文件系统的文件或目录等实现的互斥锁。所有使用 &lt;code&gt;NSDistributedLock&lt;/code&gt; 对象的应用必须对其可写入。这通常意味着将其放入一个所有运行此应用的计算机都能访问的文件系统。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSDistributedLock&lt;/code&gt; &lt;strong&gt;不&lt;/strong&gt;像其他锁一样遵从 &lt;code&gt;NSLocking&lt;/code&gt; 协议，没有 &lt;code&gt;lock&lt;/code&gt; 方法。&lt;code&gt;lock&lt;/code&gt; 方法会阻塞进程的执行并需要系统以预定的速率查询锁。与其在代码上强制损耗性能，不如用 &lt;code&gt;NSDistributedLock&lt;/code&gt; 提供的 &lt;code&gt;tryLock&lt;/code&gt; 方法来让程序员决定是否去查询锁。&lt;/p&gt;
&lt;p&gt;由于 &lt;code&gt;NSDistributedLock&lt;/code&gt; 使用文件系统实现，它只有在拥有者显式释放它时才会跟着释放。如果应用 crash 时还持有一个 &lt;code&gt;NSDistributedLock&lt;/code&gt; 对象，其他 client 将不能访问被保护的资源。在这种情况下，可以使用 &lt;code&gt;breakLock&lt;/code&gt; 方法打破已经存在的锁，这样就能获取到它了。通常应该避免打破锁，除非你确信拥有锁的进程挂了，无法释放锁。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSDistributedLock&lt;/code&gt; 跟其他锁一样，调用 &lt;code&gt;unlock&lt;/code&gt; 方法释放它。&lt;/p&gt;
&lt;h3 id=&quot;使用条件（Condition）&quot;&gt;&lt;a href=&quot;#使用条件（Condition）&quot; class=&quot;headerlink&quot; title=&quot;使用条件（Condition）&quot;&gt;&lt;/a&gt;使用条件（Condition）&lt;/h3&gt;&lt;p&gt;Condition 是一种特殊类型的锁，它可以让操作必须以正确的顺序进行。它跟互斥锁有细微的差别。等待 condition 的线程会保持阻塞，直到 condition 被其他线程显式发信号。&lt;/p&gt;
&lt;p&gt;由于牵扯到操作系统实现的细节，条件锁在即使没被发信号的情况下被允许伪造成功返回。为了避免这种站不住脚的发信号导致的问题，应该总是把断言跟条件锁结合起来使用。断言是一个决定线程是否能安全进行的更具体的方式。在发信号的线程设置断言前，condition 会让你的线程保持睡眠。&lt;/p&gt;
&lt;p&gt;下面展示如何在代码中使用 condition。&lt;/p&gt;
&lt;h4 id=&quot;NSCondition&quot;&gt;&lt;a href=&quot;#NSCondition&quot; class=&quot;headerlink&quot; title=&quot;NSCondition&quot;&gt;&lt;/a&gt;&lt;code&gt;NSCondition&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;NSCondition&lt;/code&gt; 是对 POSIX Condition 语法的封装，而且将锁和 condition 数据结构包含在一个对象里。这使得可以用一个对象既能当做互斥锁 &lt;code&gt;lock&lt;/code&gt;，又能像 Condition 一样继续 &lt;code&gt;wait&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面的代码中 &lt;code&gt;cocoaCondition&lt;/code&gt; 变量是一个 &lt;code&gt;NSCondition&lt;/code&gt; 对象，&lt;code&gt;timeToDoWork&lt;/code&gt; 变量是一个整型数，用作断言。其他线程会在向 condition 发信号之前立刻增加 &lt;code&gt;timeToDoWork&lt;/code&gt; 的值。&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;name&quot;&gt;cocoaCondition&lt;/span&gt; lock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while (&lt;span class=&quot;name&quot;&gt;timeToDoWork&lt;/span&gt; &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;name&quot;&gt;cocoaCondition&lt;/span&gt; wait]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timeToDoWork--&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Do real work here.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;name&quot;&gt;cocoaCondition&lt;/span&gt; unlock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就是增加断言的值，并向 condition 发信号。当然这些操作要加锁：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[cocoaCondition lock]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timeToDoWork++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[cocoaCondition signal]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[cocoaCondition unlock]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;POSIX-Condition&quot;&gt;&lt;a href=&quot;#POSIX-Condition&quot; class=&quot;headerlink&quot; title=&quot;POSIX Condition&quot;&gt;&lt;/a&gt;POSIX Condition&lt;/h4&gt;&lt;p&gt;POSIX 线程条件锁需要将 condition 数据结构和互斥锁一起使用。尽管两个锁结构是分开的，但是互斥锁在运行时会被紧紧地捆到 condition 结构上。等待发信号的线程应该始终将相同的互斥锁和 condition 结构一起使用。改变配对会导致错误。&lt;/p&gt;
&lt;p&gt;下面的代码展示了 condition 和断言基本的初始化和使用。在初始化 condition 和互斥锁后，线程进入了一个使用 &lt;code&gt;ready_to_go&lt;/code&gt; 变量作为断言的 &lt;code&gt;while&lt;/code&gt; 循环。只有断言设置好并且 condition 接着被发信号后，等待着的线程才会被唤醒，并开始工作。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pthread_mutex_t&lt;/span&gt; mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pthread_cond_t&lt;/span&gt; condition;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Boolean     ready_to_go = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyCondInitFunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_init(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_cond_init(&amp;amp;condition, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyWaitOnConditionFunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Lock the mutex.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_lock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// If the predicate is already set, then the while loop is bypassed;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// otherwise, the thread sleeps until the predicate is set.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(ready_to_go == &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_cond_wait(&amp;amp;condition, &amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Do work. (The mutex should stay locked.)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Reset the predicate and release the mutex.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ready_to_go = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_unlock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发信号的线程负责设置断言并向条件锁发信号。下面的代码展示了它的实现。为了避免线程之间等待 condition 而发生竞态条件，发信号的操作要在互斥锁里面进行。因为是简化过后的例子，代码中没包含错误处理的代码，只展示基础用法。&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SignalThreadUsingCondition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// At this point, there should be work for the other thread to do.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_lock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ready_to_go = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Signal the other thread to begin work.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_cond_signal(&amp;amp;condition);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_unlock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW1&quot;&gt;Threading Programming Guide&lt;/a&gt; 的学习笔记&amp;amp;翻译，第三部分。关于同步的内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/08/28/Threading-Programming-Guide-1/&quot;&gt;Threading Programming Guide(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/09/17/Threading-Programming-Guide-2/&quot;&gt;Threading Programming Guide(2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="http://yulingtianxia.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
</feed>
